1
00:00:00,000 --> 00:00:01,500

2
00:00:01,500 --> 00:00:05,110
Hello and welcome to yet another
worked exercise for Python

3
00:00:05,110 --> 00:00:07,630
for Informatics,
Exploring Information.

4
00:00:07,630 --> 00:00:09,810
I am your exercise
worker, Charles Severance.

5
00:00:09,810 --> 00:00:11,370
I'm the author of the book.

6
00:00:11,370 --> 00:00:13,860
And as always, this
material, as well as the book

7
00:00:13,860 --> 00:00:17,890
itself, is Creative
Commons Attribution.

8
00:00:17,890 --> 00:00:20,920
So this exercise assumes
that you sort of know

9
00:00:20,920 --> 00:00:24,290
how to edit files and
have things set up.

10
00:00:24,290 --> 00:00:27,770
If you need more help go to
www.pythonlearn.com and go

11
00:00:27,770 --> 00:00:30,260
through the
installation process.

12
00:00:30,260 --> 00:00:32,470
So the exercise we're
contemplating right now

13
00:00:32,470 --> 00:00:35,360
is exercise 5.1.

14
00:00:35,360 --> 00:00:39,500
We're going to read a
list of numbers and deal

15
00:00:39,500 --> 00:00:41,960
with some bad data, and
ultimately compute the average

16
00:00:41,960 --> 00:00:44,950
and finish when we're done.

17
00:00:44,950 --> 00:00:50,400
And so we're going to do this
stepwise like we always do.

18
00:00:50,400 --> 00:00:53,740
We're not going to just
write this and try to imagine

19
00:00:53,740 --> 00:00:55,480
what the ultimate thing is.

20
00:00:55,480 --> 00:00:59,490
So the first thing that
I'm going to try to write

21
00:00:59,490 --> 00:01:03,910
is-- so the first thing that
I'm going to try to write

22
00:01:03,910 --> 00:01:06,914
is the enter a number, convert
the number to a floating point,

23
00:01:06,914 --> 00:01:07,830
and then print it out.

24
00:01:07,830 --> 00:01:08,538
Just [INAUDIBLE].

25
00:01:08,538 --> 00:01:11,750
So let's go ahead and
get started on that.

26
00:01:11,750 --> 00:01:12,820
Keep a copy of that.

27
00:01:12,820 --> 00:01:14,950
I've got a nice
copy on paper here.

28
00:01:14,950 --> 00:01:17,680
I'll refer back to
my specifications.

29
00:01:17,680 --> 00:01:21,270
So here I have Text Wrangler up.

30
00:01:21,270 --> 00:01:25,226
I will go into my desktop.

31
00:01:25,226 --> 00:01:29,210
I've got this folder called
Python for Informatics here.

32
00:01:29,210 --> 00:01:30,430
So I'll go on my desktop.

33
00:01:30,430 --> 00:01:33,070

34
00:01:33,070 --> 00:01:35,500
Desktop.

35
00:01:35,500 --> 00:01:37,800
cd Python for Informatics.

36
00:01:37,800 --> 00:01:41,230
I do an ls and there's the
sum of the other exercises

37
00:01:41,230 --> 00:01:45,140
that I played with before.

38
00:01:45,140 --> 00:01:48,890
So I'm going to make a new file.

39
00:01:48,890 --> 00:01:53,280
I'll just say print hello.

40
00:01:53,280 --> 00:01:56,220
Just I always start this way.

41
00:01:56,220 --> 00:01:58,320
It's how I do it.

42
00:01:58,320 --> 00:01:59,610
Save as.

43
00:01:59,610 --> 00:02:01,660
I'm just making sure.

44
00:02:01,660 --> 00:02:03,660
It looks like I'm
in the right folder.

45
00:02:03,660 --> 00:02:06,370
And I'll call this
one numlist.py.

46
00:02:06,370 --> 00:02:12,491

47
00:02:12,491 --> 00:02:14,490
If all goes well, you'll
notice that now it

48
00:02:14,490 --> 00:02:17,040
has python suffix
it's properly colored.

49
00:02:17,040 --> 00:02:19,380
And son of a gun, if I'm not
in the correct directory.

50
00:02:19,380 --> 00:02:21,670
So let's go ahead
and run this thing.

51
00:02:21,670 --> 00:02:25,650
numlist.py hello.

52
00:02:25,650 --> 00:02:27,225
So it's good stuff.

53
00:02:27,225 --> 00:02:30,750
I'll make this a little smaller.

54
00:02:30,750 --> 00:02:33,130
So there we go.

55
00:02:33,130 --> 00:02:35,025
So let's get started.

56
00:02:35,025 --> 00:02:38,470
So instead of saying hello,
I'm going to just say--

57
00:02:38,470 --> 00:02:40,590
I'm going to get a
string variable inp,

58
00:02:40,590 --> 00:02:51,367
and say raw input,
enter a number, colon.

59
00:02:51,367 --> 00:02:52,950
And then I'm going
to add a space just

60
00:02:52,950 --> 00:02:54,695
to make it look a
little prettier.

61
00:02:54,695 --> 00:02:57,570
Then I'm going to Convert that
to a floating point number.

62
00:02:57,570 --> 00:03:02,132
I'll call this thing
num and I'll call float,

63
00:03:02,132 --> 00:03:03,800
because int is a string.

64
00:03:03,800 --> 00:03:08,310
And I want floating point
number so I can add them up.

65
00:03:08,310 --> 00:03:11,360
And I'm just going to print num
out just to sort of be cool.

66
00:03:11,360 --> 00:03:15,090
So on my Mac I use
Command S instead

67
00:03:15,090 --> 00:03:16,120
of all the clicky stuff.

68
00:03:16,120 --> 00:03:19,440
So Command S. In my
terminal I hit up arrow,

69
00:03:19,440 --> 00:03:21,750
so I can run it again.

70
00:03:21,750 --> 00:03:22,570
Enter a number.

71
00:03:22,570 --> 00:03:24,700
789.

72
00:03:24,700 --> 00:03:26,580
That's looking pretty good.

73
00:03:26,580 --> 00:03:28,560
Enter a number.

74
00:03:28,560 --> 00:03:30,330
That's looking pretty
bad, but, frankly,

75
00:03:30,330 --> 00:03:32,980
that's exactly what
we would expect.

76
00:03:32,980 --> 00:03:34,880
If we're going to
type garbage in,

77
00:03:34,880 --> 00:03:36,500
we're going to get a trace back.

78
00:03:36,500 --> 00:03:38,760
We'll deal one out in a minute.

79
00:03:38,760 --> 00:03:39,405
OK, so.

80
00:03:39,405 --> 00:03:42,750

81
00:03:42,750 --> 00:03:45,120
So it looks like that
part's pretty cool.

82
00:03:45,120 --> 00:03:48,700
So our problem now is we
want to take this-- let's put

83
00:03:48,700 --> 00:03:49,400
that back in.

84
00:03:49,400 --> 00:03:52,090

85
00:03:52,090 --> 00:03:53,969
Let's put this in a loop.

86
00:03:53,969 --> 00:03:55,010
So how do we make a loop?

87
00:03:55,010 --> 00:03:58,660
Well, I'll just make an
infinite loop for now.

88
00:03:58,660 --> 00:04:01,110
And I'm going to indent
these four spaces.

89
00:04:01,110 --> 00:04:03,870

90
00:04:03,870 --> 00:04:10,410
Make sure you have tabs
turned into spaces,

91
00:04:10,410 --> 00:04:11,390
or you'll just be--

92
00:04:11,390 --> 00:04:19,050

93
00:04:19,050 --> 00:04:21,007
And so I'm going
to write this loop.

94
00:04:21,007 --> 00:04:22,590
Right now I'm writing
an infinite loop

95
00:04:22,590 --> 00:04:25,230
because it's always
going to be true.

96
00:04:25,230 --> 00:04:27,000
So let's go ahead
and save this one.

97
00:04:27,000 --> 00:04:29,720

98
00:04:29,720 --> 00:04:33,400
Python numlist.py.

99
00:04:33,400 --> 00:04:38,850

100
00:04:38,850 --> 00:04:42,789
123, 456, collect
another number.

101
00:04:42,789 --> 00:04:44,580
Now we're supposed to
be able to type done.

102
00:04:44,580 --> 00:04:47,140

103
00:04:47,140 --> 00:04:52,110
Well, our program ended
because the float crashed.

104
00:04:52,110 --> 00:04:55,160
The float crashed on line
three, and so at least we

105
00:04:55,160 --> 00:04:56,920
killed our program.

106
00:04:56,920 --> 00:04:58,337
Because we wrote
an infinite loop.

107
00:04:58,337 --> 00:05:00,503
It would have been prompting
us for numbers forever.

108
00:05:00,503 --> 00:05:01,753
It would have never been done.

109
00:05:01,753 --> 00:05:03,544
So the next thing we're
going to need to do

110
00:05:03,544 --> 00:05:05,550
is we're going to need
to get out of the loop.

111
00:05:05,550 --> 00:05:06,590
OK?

112
00:05:06,590 --> 00:05:09,390
So I'm going to
get out of the loop

113
00:05:09,390 --> 00:05:19,460
by checking to see if inp
is equal to done, break.

114
00:05:19,460 --> 00:05:24,210
So that just basically says
if the input the user types,

115
00:05:24,210 --> 00:05:27,180
I'm going to break out.

116
00:05:27,180 --> 00:05:30,930
So let's run this again.

117
00:05:30,930 --> 00:05:32,450
123.

118
00:05:32,450 --> 00:05:33,800
Done.

119
00:05:33,800 --> 00:05:35,290
Now, at least it runs.

120
00:05:35,290 --> 00:05:37,320
And it gets out of the loop.

121
00:05:37,320 --> 00:05:39,662
The break comes down here.

122
00:05:39,662 --> 00:05:40,870
[INAUDIBLE] just pretty good.

123
00:05:40,870 --> 00:05:43,950
Let me just add a quick feature
to this not specification list.

124
00:05:43,950 --> 00:05:46,830

125
00:05:46,830 --> 00:05:49,501
We'll see if we get in
trouble for this one.

126
00:05:49,501 --> 00:05:55,780
I'm going to say if len of
inp is less than one, break.

127
00:05:55,780 --> 00:05:58,680
This is actually kind
of an idiom here.

128
00:05:58,680 --> 00:06:04,190
Check for empty line.

129
00:06:04,190 --> 00:06:06,410
It's a bit of an idiom.

130
00:06:06,410 --> 00:06:08,600
So basically maybe the
poor user would not

131
00:06:08,600 --> 00:06:12,410
think to type done because they
didn't read the specifications.

132
00:06:12,410 --> 00:06:14,270
So we'll save that one.

133
00:06:14,270 --> 00:06:20,800
And you'll see now that
I can just hit Enter key,

134
00:06:20,800 --> 00:06:22,442
and it sees that
as done as well.

135
00:06:22,442 --> 00:06:24,400
And that's probably a
more clever way to do it,

136
00:06:24,400 --> 00:06:25,983
and a more user
friendly way to do it.

137
00:06:25,983 --> 00:06:28,530

138
00:06:28,530 --> 00:06:30,717
Or maybe it's a violation
of the specifications,

139
00:06:30,717 --> 00:06:32,550
but we're just going
to treat that as vague.

140
00:06:32,550 --> 00:06:33,883
We'll leave it in there for now.

141
00:06:33,883 --> 00:06:35,720
But that's kind
of a Python idiom,

142
00:06:35,720 --> 00:06:38,617
that ending on an empty line.

143
00:06:38,617 --> 00:06:40,200
Just because it's
natural for the user

144
00:06:40,200 --> 00:06:43,600
to just hit enter and think
is this thing going to stop.

145
00:06:43,600 --> 00:06:45,760
OK, so now our
problem is, is we've

146
00:06:45,760 --> 00:06:46,940
got to count these things.

147
00:06:46,940 --> 00:06:50,145
So we've got this loop body, and
it's running a bunch of times.

148
00:06:50,145 --> 00:06:52,980
And we want to count
how many times it runs.

149
00:06:52,980 --> 00:06:57,000
So we'll make a variable
called count, set to 0.

150
00:06:57,000 --> 00:07:00,110
And then each time
we count through,

151
00:07:00,110 --> 00:07:02,170
we're going to add count
equals count plus 1.

152
00:07:02,170 --> 00:07:08,990

153
00:07:08,990 --> 00:07:11,310
Now, I did not put
the count here.

154
00:07:11,310 --> 00:07:20,010

155
00:07:20,010 --> 00:07:23,520
And that's because I only want
to count the numbers that I've

156
00:07:23,520 --> 00:07:24,330
actually read.

157
00:07:24,330 --> 00:07:26,450
So I've read a number.

158
00:07:26,450 --> 00:07:31,250
Because if I increment my
count here, and I break,

159
00:07:31,250 --> 00:07:32,860
it'll be one too many.

160
00:07:32,860 --> 00:07:36,350
Well, let's just go ahead and
do that-- just say count equals

161
00:07:36,350 --> 00:07:39,770
and make that mistake.

162
00:07:39,770 --> 00:07:42,150
So I'm going to get rid of this.

163
00:07:42,150 --> 00:07:46,880
And I'll put it here, exactly
where I say don't count here.

164
00:07:46,880 --> 00:07:48,030
All right?

165
00:07:48,030 --> 00:07:49,350
So I'm going to count here.

166
00:07:49,350 --> 00:07:51,160
And this is a bad
place to count.

167
00:07:51,160 --> 00:07:52,526
So I'm going to save that.

168
00:07:52,526 --> 00:07:54,400
And this loop is going
to go until it's done,

169
00:07:54,400 --> 00:07:56,900
and then it's going to print
out how many numbers we've got.

170
00:07:56,900 --> 00:08:01,380

171
00:08:01,380 --> 00:08:02,970
So you see here
it's got a mistake.

172
00:08:02,970 --> 00:08:05,760
It's not a syntax error,
it's a logic error.

173
00:08:05,760 --> 00:08:08,400
Because we've got
to count up to 3.

174
00:08:08,400 --> 00:08:12,970
But that's because the last time
through the code-- count was 0.

175
00:08:12,970 --> 00:08:13,980
We read a number.

176
00:08:13,980 --> 00:08:15,595
We added 1 to the count.

177
00:08:15,595 --> 00:08:16,830
Read another number.

178
00:08:16,830 --> 00:08:18,730
Added 1 to the count.

179
00:08:18,730 --> 00:08:20,730
And then we wrote
another bad number,

180
00:08:20,730 --> 00:08:22,280
we added a number the count.

181
00:08:22,280 --> 00:08:24,380
And then we end up
with this break.

182
00:08:24,380 --> 00:08:26,700
So the account is
wrong, basically.

183
00:08:26,700 --> 00:08:28,140
OK?

184
00:08:28,140 --> 00:08:31,990
And so the key is
that we got to move--

185
00:08:31,990 --> 00:08:34,159
you got to move the count down.

186
00:08:34,159 --> 00:08:35,830
We only want to
count valid data.

187
00:08:35,830 --> 00:08:37,980
We don't want to
count invalid data.

188
00:08:37,980 --> 00:08:42,510
So what we were doing is we were
counting the last non data bit.

189
00:08:42,510 --> 00:08:45,650
So that's just another
thing to look for.

190
00:08:45,650 --> 00:08:51,580
The pattern here
is read your data,

191
00:08:51,580 --> 00:08:55,030
decide if you've got bad data
or good data or you want to stop

192
00:08:55,030 --> 00:08:57,620
or whatever, and
then do the work.

193
00:08:57,620 --> 00:09:06,900
So I'll put a comment in
here called do the work.

194
00:09:06,900 --> 00:09:08,480
So this is the work.

195
00:09:08,480 --> 00:09:14,765
And this is kind of--
handle the edge cases.

196
00:09:14,765 --> 00:09:18,110

197
00:09:18,110 --> 00:09:20,420
And this is get the data,
handle the edge cases,

198
00:09:20,420 --> 00:09:21,330
then do the work.

199
00:09:21,330 --> 00:09:24,300
And incrementing count
is just part of the work.

200
00:09:24,300 --> 00:09:25,610
OK?

201
00:09:25,610 --> 00:09:29,390
So let's keep going.

202
00:09:29,390 --> 00:09:32,440
Now we've got to
make our average.

203
00:09:32,440 --> 00:09:34,490
So average of course
means the total.

204
00:09:34,490 --> 00:09:37,330

205
00:09:37,330 --> 00:09:39,380
And that's pretty
easy because we

206
00:09:39,380 --> 00:09:49,720
want to-- so total
equals total plus num.

207
00:09:49,720 --> 00:09:51,005
Simple enough.

208
00:09:51,005 --> 00:09:55,290
So I'm going to print out
num, total, and count.

209
00:09:55,290 --> 00:09:59,790

210
00:09:59,790 --> 00:10:07,620
So now 12, 14-- so you see our
number is 12, our total is 12,

211
00:10:07,620 --> 00:10:09,400
and our count's 1.

212
00:10:09,400 --> 00:10:12,030
Number's 14, total 26, count 2.

213
00:10:12,030 --> 00:10:14,450
Looking pretty good.

214
00:10:14,450 --> 00:10:18,470
Let's just hit enter,
and count is 2.

215
00:10:18,470 --> 00:10:19,970
So we got count.

216
00:10:19,970 --> 00:10:24,330
So let's change this to be what
we're supposed to change to,

217
00:10:24,330 --> 00:10:25,050
say average.

218
00:10:25,050 --> 00:10:29,530

219
00:10:29,530 --> 00:10:30,830
Colon.

220
00:10:30,830 --> 00:10:33,300
No space because the
comma adds a space.

221
00:10:33,300 --> 00:10:37,930
And we're going to just
say total over count.

222
00:10:37,930 --> 00:10:42,320

223
00:10:42,320 --> 00:10:44,870
So let's run that.

224
00:10:44,870 --> 00:10:48,745
Write 10, 11, 10.5.

225
00:10:48,745 --> 00:10:49,870
So our numbers are working.

226
00:10:49,870 --> 00:10:51,340
So we're getting pretty close.

227
00:10:51,340 --> 00:10:53,280
We really have one
more problem to solve.

228
00:10:53,280 --> 00:10:56,440
And that is that
problem-- the problem

229
00:10:56,440 --> 00:10:58,010
when we got crappy data.

230
00:10:58,010 --> 00:11:01,270
And we don't want to use
trace back as our mechanism.

231
00:11:01,270 --> 00:11:02,800
We just want to
reprompt the user.

232
00:11:02,800 --> 00:11:05,310

233
00:11:05,310 --> 00:11:07,592
So the key thing
when you're dealing

234
00:11:07,592 --> 00:11:09,550
with this, is the first
thing to take a look at

235
00:11:09,550 --> 00:11:14,181
is the actual line question--
the line that caused the error.

236
00:11:14,181 --> 00:11:17,550
The line that caused
the error is line 11.

237
00:11:17,550 --> 00:11:20,740
And it's this line right here.

238
00:11:20,740 --> 00:11:24,410
So we can't control
what the user types.

239
00:11:24,410 --> 00:11:29,550
The simplest thing to
do is to the tracks out,

240
00:11:29,550 --> 00:11:32,410
to take out some insurance
on this particular line.

241
00:11:32,410 --> 00:11:35,700
Like that's a dangerous line.

242
00:11:35,700 --> 00:11:38,930
And then except
tells us what to do.

243
00:11:38,930 --> 00:11:40,730
So now the question
is-- now let's

244
00:11:40,730 --> 00:11:41,813
put out a print statement.

245
00:11:41,813 --> 00:11:45,150

246
00:11:45,150 --> 00:11:47,710
Print what we're supposed
to say-- invalid input.

247
00:11:47,710 --> 00:11:51,241

248
00:11:51,241 --> 00:11:51,740
OK.

249
00:11:51,740 --> 00:11:53,162
So here we go.

250
00:11:53,162 --> 00:11:58,720
We've got invalid input, and
so we got an accept state.

251
00:11:58,720 --> 00:12:00,930
I've made a mistake on purpose.

252
00:12:00,930 --> 00:12:04,470
You can pause and try to
figure out what the mistake is.

253
00:12:04,470 --> 00:12:06,027
OK, you had your
chance to pause,

254
00:12:06,027 --> 00:12:07,985
so let's go take a look
at what the mistake is.

255
00:12:07,985 --> 00:12:11,510
Let's come up with some evil
data that causes the problem.

256
00:12:11,510 --> 00:12:16,700
So 10 is our first number.

257
00:12:16,700 --> 00:12:19,720

258
00:12:19,720 --> 00:12:23,370
12 is our second number.

259
00:12:23,370 --> 00:12:25,872
And now I'm going to say Fred.

260
00:12:25,872 --> 00:12:28,668

261
00:12:28,668 --> 00:12:32,950
So now you should be able
to see what's wrong here.

262
00:12:32,950 --> 00:12:34,990
The problem is that
basically Fred, indeed,

263
00:12:34,990 --> 00:12:36,450
says invalid input.

264
00:12:36,450 --> 00:12:38,985
That works because it runs
down this line of code,

265
00:12:38,985 --> 00:12:40,702
and it says invalid input.

266
00:12:40,702 --> 00:12:44,920
The problem is it still is
executing this code right here.

267
00:12:44,920 --> 00:12:48,660
So the number-- actually
the float-- failed.

268
00:12:48,660 --> 00:12:50,420
We said Fred, but
the number's 12,

269
00:12:50,420 --> 00:12:53,505
and that's because it's 12 from
the last time through the loop.

270
00:12:53,505 --> 00:12:56,310
The last time through the loop.

271
00:12:56,310 --> 00:12:58,480
So it ends up
adding 12 again, 22.

272
00:12:58,480 --> 00:12:59,720
And we have three numbers.

273
00:12:59,720 --> 00:13:02,580
And then we finish it.

274
00:13:02,580 --> 00:13:04,350
That was in the
wrong window there.

275
00:13:04,350 --> 00:13:09,540
And then when we finish,
the average is not 11,

276
00:13:09,540 --> 00:13:13,880
but it is indeed 11.3.

277
00:13:13,880 --> 00:13:18,260
So the problem is when
we have this exception,

278
00:13:18,260 --> 00:13:20,340
we can't run this code.

279
00:13:20,340 --> 00:13:22,540
Of course, there's a
lovely, lovely bit of python

280
00:13:22,540 --> 00:13:25,810
that solves this for us.

281
00:13:25,810 --> 00:13:27,595
And that is the
continue statement.

282
00:13:27,595 --> 00:13:31,710
The continue statement says
I'm done with this iteration.

283
00:13:31,710 --> 00:13:32,950
You entered a number.

284
00:13:32,950 --> 00:13:33,824
It's crappy.

285
00:13:33,824 --> 00:13:35,240
I'm just not going
to do anything.

286
00:13:35,240 --> 00:13:39,390
So effectively, instead of
going down here to continue,

287
00:13:39,390 --> 00:13:42,000
goes up to here and
prompts for the next one.

288
00:13:42,000 --> 00:13:43,590
So it doesn't do this code.

289
00:13:43,590 --> 00:13:45,660
It does not do that code.

290
00:13:45,660 --> 00:13:47,954
And everything's cool.

291
00:13:47,954 --> 00:13:48,870
And so that's the key.

292
00:13:48,870 --> 00:13:51,915
When we say invalid input, we
do not want to run this code.

293
00:13:51,915 --> 00:13:56,125

294
00:13:56,125 --> 00:13:58,270
So let's save this.

295
00:13:58,270 --> 00:14:00,900
So it continues our
friend on this one.

296
00:14:00,900 --> 00:14:05,180

297
00:14:05,180 --> 00:14:09,580
So 10, 12-- I'm doing these
just so I can know the average

298
00:14:09,580 --> 00:14:10,720
should be 11.

299
00:14:10,720 --> 00:14:12,560
And then Fred.

300
00:14:12,560 --> 00:14:14,310
You'll notice it
says invalid input.

301
00:14:14,310 --> 00:14:16,880
But because of continue, it
doesn't follow through and do

302
00:14:16,880 --> 00:14:19,150
all the rest of that stuff.

303
00:14:19,150 --> 00:14:20,630
And then let's hit
Enter to finish.

304
00:14:20,630 --> 00:14:25,080
And the average is indeed 11.0.

305
00:14:25,080 --> 00:14:25,900
OK?

306
00:14:25,900 --> 00:14:30,970
So again, I think
that's pretty much it.

307
00:14:30,970 --> 00:14:32,375
Thanks for listening.

308
00:14:32,375 --> 00:14:38,130
For more information Python for
Informatics, www.py4inf.com.

309
00:14:38,130 --> 00:14:39,270