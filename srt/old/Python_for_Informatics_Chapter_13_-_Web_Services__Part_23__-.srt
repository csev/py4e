1
00:00:00,000 --> 00:00:00,499

2
00:00:00,499 --> 00:00:03,720
So I hope you enjoyed that
video about Doug Crockford.

3
00:00:03,720 --> 00:00:04,830
He's a pretty funny guy.

4
00:00:04,830 --> 00:00:07,220
He's got sort of an
irascible sense of humor.

5
00:00:07,220 --> 00:00:12,870
You can find some more
of his talks on YouTube.

6
00:00:12,870 --> 00:00:15,470
One of his probably
the funnest things

7
00:00:15,470 --> 00:00:21,200
is this picture that's
wandering around the internet.

8
00:00:21,200 --> 00:00:23,030
Douglas Crockford
wrote a book called

9
00:00:23,030 --> 00:00:24,680
JavaScript, The Good Parts.

10
00:00:24,680 --> 00:00:27,480
And so what we see
here, of course,

11
00:00:27,480 --> 00:00:30,260
is here is the book that
talks about JavaScript,

12
00:00:30,260 --> 00:00:33,456
The Definitive Guide, which is
everything, and then the book

13
00:00:33,456 --> 00:00:34,830
called JavaScript,
The Good Parts

14
00:00:34,830 --> 00:00:39,160
is much smaller than JavaScript,
The Definitive Guide.

15
00:00:39,160 --> 00:00:41,700
Part reason for
that is JavaScript

16
00:00:41,700 --> 00:00:44,890
is a really, really deep
and powerful language.

17
00:00:44,890 --> 00:00:46,940
As you've probably
seen with the video,

18
00:00:46,940 --> 00:00:50,060
if I've shown you the
video of Brendan Eich,

19
00:00:50,060 --> 00:00:52,750
he was very thoughtful when
he designed the language

20
00:00:52,750 --> 00:00:54,760
to seem simple on
the surface but yet

21
00:00:54,760 --> 00:00:59,300
be subtly complex and powerful
just under the surface.

22
00:00:59,300 --> 00:01:02,260
And so that's why
there's a big difference

23
00:01:02,260 --> 00:01:05,330
between doing JavaScript
at the light level

24
00:01:05,330 --> 00:01:08,620
and doing JavaScript
at an awesome level.

25
00:01:08,620 --> 00:01:13,770
And so as Doug mentioned, JSON,
he didn't exactly invent it.

26
00:01:13,770 --> 00:01:17,880
He just came up with a term
to legitimize the notion.

27
00:01:17,880 --> 00:01:22,410
And JSON.org describes it, and
he hasn't changed it barely

28
00:01:22,410 --> 00:01:24,530
at all since he came
up with the idea.

29
00:01:24,530 --> 00:01:28,350
And that, as he said, is
one of the charming things.

30
00:01:28,350 --> 00:01:36,490
So in the debate of XML versus
JSON, XML has its advantages.

31
00:01:36,490 --> 00:01:41,860
JSON has a lot of advantages,
and in many situations,

32
00:01:41,860 --> 00:01:45,250
people would push XML where JSON
would've been more appropriate.

33
00:01:45,250 --> 00:01:47,300
So there's a bit of a
backlash against XML,

34
00:01:47,300 --> 00:01:50,460
but there's still places
where XML is useful.

35
00:01:50,460 --> 00:01:52,740
But when you just
have two applications

36
00:01:52,740 --> 00:01:55,120
and they really just
want to send some lists

37
00:01:55,120 --> 00:01:57,120
and dictionaries
back and forth, JSON

38
00:01:57,120 --> 00:01:58,970
is a much better way to do it.

39
00:01:58,970 --> 00:02:02,700
Both applications know
what they're looking for.

40
00:02:02,700 --> 00:02:08,100
And so JSON represents data as
nested lists and dictionaries.

41
00:02:08,100 --> 00:02:11,760
This is another form of
composite data structures

42
00:02:11,760 --> 00:02:14,440
where before we talked
about data structures,

43
00:02:14,440 --> 00:02:17,559
it would say "a list"
or "a dictionary."

44
00:02:17,559 --> 00:02:18,975
And then we got
to the point where

45
00:02:18,975 --> 00:02:21,840
we had a list of tuples, which
is more of a composite data

46
00:02:21,840 --> 00:02:24,010
structure because it's
a data structure that

47
00:02:24,010 --> 00:02:25,750
within it has data structures.

48
00:02:25,750 --> 00:02:28,890
Well, in JSON,
we'd just go crazy.

49
00:02:28,890 --> 00:02:34,360
It's turtles all the way
down, as the joke says.

50
00:02:34,360 --> 00:02:36,800
And it really has two
basic primitive structures

51
00:02:36,800 --> 00:02:40,380
that are repeated over
and over and over again.

52
00:02:40,380 --> 00:02:44,790
And that is they map exactly
onto Python's dictionaries

53
00:02:44,790 --> 00:02:46,870
and Python's lists.

54
00:02:46,870 --> 00:02:51,610
And this particular bit of JSON
is using just the dictionary

55
00:02:51,610 --> 00:02:52,190
format.

56
00:02:52,190 --> 00:02:54,160
Of course, it's a
triple-quoted string,

57
00:02:54,160 --> 00:02:56,820
but the open brace
and close brace

58
00:02:56,820 --> 00:02:59,710
are the indication
that we are starting

59
00:02:59,710 --> 00:03:03,930
a JavaScript object, which
is a set of key value pairs.

60
00:03:03,930 --> 00:03:07,760
So this is name
matched to Chuck.

61
00:03:07,760 --> 00:03:09,470
It's a dictionary, comma.

62
00:03:09,470 --> 00:03:13,140
And then phone maps to-- but
this is now another dictionary.

63
00:03:13,140 --> 00:03:17,190
Type matched international,
number matched to this string.

64
00:03:17,190 --> 00:03:19,610
And then that's the
end of this thing.

65
00:03:19,610 --> 00:03:22,510

66
00:03:22,510 --> 00:03:26,360
And then email is another
dictionary with only one

67
00:03:26,360 --> 00:03:27,470
key and one value.

68
00:03:27,470 --> 00:03:31,400
So this is a dictionary
that contains

69
00:03:31,400 --> 00:03:33,990
two dictionaries within it.

70
00:03:33,990 --> 00:03:36,755
And so this is a
composite data structure.

71
00:03:36,755 --> 00:03:43,420

72
00:03:43,420 --> 00:03:46,680
And much like what we
had to do with XML,

73
00:03:46,680 --> 00:03:49,700
we load the library
using import--

74
00:03:49,700 --> 00:03:50,960
import the JSON library.

75
00:03:50,960 --> 00:03:54,940
JSON is built into Python
in the more recent versions

76
00:03:54,940 --> 00:03:56,180
that we're using.

77
00:03:56,180 --> 00:04:00,270
And you basically
take the string data

78
00:04:00,270 --> 00:04:05,740
and you do JSON.loads, which
parses this and turns it

79
00:04:05,740 --> 00:04:08,530
into internal Python
data structures.

80
00:04:08,530 --> 00:04:10,590
But the difference
is unlike XML,

81
00:04:10,590 --> 00:04:13,490
which is this tree
structure, it actually

82
00:04:13,490 --> 00:04:16,709
is exactly Python
structures at this point.

83
00:04:16,709 --> 00:04:22,119
So this means that what we get
back in info is a dictionary.

84
00:04:22,119 --> 00:04:26,060

85
00:04:26,060 --> 00:04:31,815
And if we want
the word "chuck"--

86
00:04:31,815 --> 00:04:36,690
if we want the word "chuck,"
we simply say info sub "name."

87
00:04:36,690 --> 00:04:40,480
So info is this outer
dictionary and the key name

88
00:04:40,480 --> 00:04:42,190
and the value is chuck.

89
00:04:42,190 --> 00:04:44,490
So it's like give
me info sub chuck.

90
00:04:44,490 --> 00:04:46,920
No querying, no nothing.

91
00:04:46,920 --> 00:04:51,200
It just is a Python dictionary
when we get it back.

92
00:04:51,200 --> 00:04:58,050
So if we then take
a quick look at how

93
00:04:58,050 --> 00:05:06,270
to get at this value right here,
well, info sub email-- well,

94
00:05:06,270 --> 00:05:08,650
that's this bit right here.

95
00:05:08,650 --> 00:05:11,730
Actually, it's this
bit right here.

96
00:05:11,730 --> 00:05:14,300
Let me start that again.

97
00:05:14,300 --> 00:05:18,000
Info sub email is
this dictionary.

98
00:05:18,000 --> 00:05:21,150
So infor sub email is
itself a dictionary.

99
00:05:21,150 --> 00:05:25,200
Then we say sub hide
to go deeper into it

100
00:05:25,200 --> 00:05:29,120
and then this value is yes.

101
00:05:29,120 --> 00:05:32,660
So you see that
the JSON, there's

102
00:05:32,660 --> 00:05:37,140
no sort of querying or finding
or find all-ing or looking up.

103
00:05:37,140 --> 00:05:38,431
It's just there.

104
00:05:38,431 --> 00:05:40,680
And you'll also notice that
this is not nearly as self

105
00:05:40,680 --> 00:05:41,860
descriptive.

106
00:05:41,860 --> 00:05:44,170
We don't have the
less than person

107
00:05:44,170 --> 00:05:47,140
and all that other stuff that
gives us a clue as to what's

108
00:05:47,140 --> 00:05:48,630
actually going on in here.

109
00:05:48,630 --> 00:05:50,550
But if we know what
we're looking for--

110
00:05:50,550 --> 00:05:52,300
and we're just looking
for the name thing,

111
00:05:52,300 --> 00:05:54,133
and it's always going
to be the name thing--

112
00:05:54,133 --> 00:05:56,540
we just write info sub name.

113
00:05:56,540 --> 00:06:01,000
And so JSON really is a
very direct representation

114
00:06:01,000 --> 00:06:03,700
of lists and dictionaries
as a wire format.

115
00:06:03,700 --> 00:06:07,779
And that's why it's very,
very popular compared to XML

116
00:06:07,779 --> 00:06:09,820
when you really just are
sending data between two

117
00:06:09,820 --> 00:06:12,430
cooperating applications.

118
00:06:12,430 --> 00:06:16,510
Here's an example of a
list of dictionaries.

119
00:06:16,510 --> 00:06:20,220
And so in Python-- well,
Python is the same way.

120
00:06:20,220 --> 00:06:23,170
JSON and Python kind
of look the same.

121
00:06:23,170 --> 00:06:27,250
Here we have square brackets,
just like a Python list.

122
00:06:27,250 --> 00:06:33,590
And the first item in this
list is this dictionary

123
00:06:33,590 --> 00:06:39,260
followed by that comma followed
by the second item in the list

124
00:06:39,260 --> 00:06:41,600
is this diction.

125
00:06:41,600 --> 00:06:44,030
So we have two item list.

126
00:06:44,030 --> 00:06:48,340
So when we parse this whole
thing using JSON.loads,

127
00:06:48,340 --> 00:06:53,415
we get back info is a
list of dictionaries.

128
00:06:53,415 --> 00:06:57,240

129
00:06:57,240 --> 00:07:00,620
Because this is a
list of dictionaries.

130
00:07:00,620 --> 00:07:02,840
In this case, there's only
two of them in the list.

131
00:07:02,840 --> 00:07:12,000
Our dictionary-- I mean our
list contains two dictionaries.

132
00:07:12,000 --> 00:07:15,070
And then each dictionary
has some key value pairs.

133
00:07:15,070 --> 00:07:18,850
And so de-reference
these things.

134
00:07:18,850 --> 00:07:23,130
Actually, I probably should
add a little example.

135
00:07:23,130 --> 00:07:32,520
A simple de-reference would
be info sub zero sub name.

136
00:07:32,520 --> 00:07:36,310

137
00:07:36,310 --> 00:07:41,210
Because info is a list, sub
zero is that one right there.

138
00:07:41,210 --> 00:07:46,200
And then within that,
chuck is sub name.

139
00:07:46,200 --> 00:07:49,360
So again, this is
just Python syntax.

140
00:07:49,360 --> 00:07:50,880
Info is a list.

141
00:07:50,880 --> 00:07:53,210
Sub zero is the first
element of that list.

142
00:07:53,210 --> 00:07:55,520
And the thing that is the
first element of that list

143
00:07:55,520 --> 00:07:56,750
is a dictionary.

144
00:07:56,750 --> 00:08:00,640
So to look up the name
value, we do sub name.

145
00:08:00,640 --> 00:08:06,230

146
00:08:06,230 --> 00:08:11,610
We could also take info, which
is a list-- a list of two

147
00:08:11,610 --> 00:08:12,810
dictionaries.

148
00:08:12,810 --> 00:08:16,420
And now we can have a for
loop for item and info.

149
00:08:16,420 --> 00:08:21,217
So that means that item is going
to be an iteration variable.

150
00:08:21,217 --> 00:08:22,925
It's going to first
look at this and then

151
00:08:22,925 --> 00:08:24,270
it's going to look at that.

152
00:08:24,270 --> 00:08:26,920
Item is going to
be a dictionary.

153
00:08:26,920 --> 00:08:31,660
So we can say item sub name,
which is this bit right here.

154
00:08:31,660 --> 00:08:37,809
We can say item sub ID, which
is this bit right there.

155
00:08:37,809 --> 00:08:42,650
And item sub X, which
is that bit right there.

156
00:08:42,650 --> 00:08:45,700
So you just tear
these things apart.

157
00:08:45,700 --> 00:08:48,160
The curly brace things
turn into dictionaries

158
00:08:48,160 --> 00:08:52,160
and the square brace
things turn into lists.

159
00:08:52,160 --> 00:08:55,280
And again, like I said,
it's not as self-describing,

160
00:08:55,280 --> 00:08:57,230
but if you know what
it's supposed to be,

161
00:08:57,230 --> 00:08:59,870
then your Python code
looks really simple

162
00:08:59,870 --> 00:09:01,260
as you take this stuff apart.

163
00:09:01,260 --> 00:09:06,130

164
00:09:06,130 --> 00:09:10,760
So once we have a
serialization, we

165
00:09:10,760 --> 00:09:14,730
use HTTP to move this
data back and forth.

166
00:09:14,730 --> 00:09:18,470
One application produces
data, and another application

167
00:09:18,470 --> 00:09:19,510
consumes data.

168
00:09:19,510 --> 00:09:22,930

169
00:09:22,930 --> 00:09:25,090
It leads to start
a notion called

170
00:09:25,090 --> 00:09:27,600
a service oriented approach.

171
00:09:27,600 --> 00:09:29,480
And a service oriented
approach is a place

172
00:09:29,480 --> 00:09:34,690
where we break our applications
into multiple pieces

173
00:09:34,690 --> 00:09:37,450
and often run them
in multiple servers.

174
00:09:37,450 --> 00:09:39,580
Take something as
complex as Coursera.

175
00:09:39,580 --> 00:09:42,830
They have lots of servers
that do special purposes.

176
00:09:42,830 --> 00:09:45,060
And your user
interface that you see

177
00:09:45,060 --> 00:09:49,269
is pulling data from many
servers-- different kinds

178
00:09:49,269 --> 00:09:50,810
of servers and
pulling them together.

179
00:09:50,810 --> 00:09:52,980
One might be a server
that tells who's

180
00:09:52,980 --> 00:09:54,790
registered in what courses.

181
00:09:54,790 --> 00:09:56,980
Another might be the
threaded discussion server.

182
00:09:56,980 --> 00:09:59,250
Another might be
the video server.

183
00:09:59,250 --> 00:10:03,310
And so what you is you
break your application

184
00:10:03,310 --> 00:10:07,210
into multiple services
and then you basically

185
00:10:07,210 --> 00:10:09,600
compose those together
to produce what

186
00:10:09,600 --> 00:10:11,784
seems to be an application.

187
00:10:11,784 --> 00:10:13,200
Another good example
of this would

188
00:10:13,200 --> 00:10:17,200
be airline reservation
systems that

189
00:10:17,200 --> 00:10:19,380
try to sell you hotel
rooms and rental cars.

190
00:10:19,380 --> 00:10:21,470
Well, airlines don't
have rental cars

191
00:10:21,470 --> 00:10:23,080
and they don't have hotel rooms.

192
00:10:23,080 --> 00:10:28,200
They just call a rental
car web service--

193
00:10:28,200 --> 00:10:32,120
a rental car service--
and a hotel room service.

194
00:10:32,120 --> 00:10:33,420
And they got their own data.

195
00:10:33,420 --> 00:10:37,520
And so somehow in this thing you
can buy a flight, a rental car,

196
00:10:37,520 --> 00:10:40,450
or a hotel room.

197
00:10:40,450 --> 00:10:45,256
And they book them by making
calls to those services.

198
00:10:45,256 --> 00:10:47,130
So this is called a
service oriented approach

199
00:10:47,130 --> 00:10:49,480
where you don't try to
build on every application

200
00:10:49,480 --> 00:10:51,450
to do every single thing.

201
00:10:51,450 --> 00:10:53,580
It does its thing
and it takes services

202
00:10:53,580 --> 00:10:56,310
from other applications.

203
00:10:56,310 --> 00:10:59,460
And when we are going
to use services,

204
00:10:59,460 --> 00:11:01,870
especially those that
don't belong to us--

205
00:11:01,870 --> 00:11:05,920
like if many airlines want to
talk to the car reservation

206
00:11:05,920 --> 00:11:09,569
system-- they have to come up
with a standard that says, OK,

207
00:11:09,569 --> 00:11:11,110
if you're an airline
company and want

208
00:11:11,110 --> 00:11:14,400
to talk to our car reservation
system, here is a standard.

209
00:11:14,400 --> 00:11:20,210
These things are called APIs or
application program interfaces.

210
00:11:20,210 --> 00:11:23,760
So using these APIs, we can
standardize and make it easier

211
00:11:23,760 --> 00:11:26,000
so that by the time
it's all said and done,

212
00:11:26,000 --> 00:11:29,520
once our airline system talks
to one car company-- car

213
00:11:29,520 --> 00:11:32,730
rental company-- it can talk
to 50 different car rental

214
00:11:32,730 --> 00:11:33,790
companies.

215
00:11:33,790 --> 00:11:37,190
And so the act of
studying these APIs

216
00:11:37,190 --> 00:11:41,170
and standardizing these APIs to
make things simpler to reduce

217
00:11:41,170 --> 00:11:46,024
everybody's cost is an important
part of IT development.

218
00:11:46,024 --> 00:11:47,940
The building of standards
is an important part

219
00:11:47,940 --> 00:11:48,700
of IT development.

220
00:11:48,700 --> 00:11:50,770
As a matter of fact,
it's one of the things

221
00:11:50,770 --> 00:11:53,930
that I do a whole
bunch of my time.

222
00:11:53,930 --> 00:11:58,200
So here's a video
that gives an idea

223
00:11:58,200 --> 00:12:01,440
of the value of this
service oriented approach--

224
00:12:01,440 --> 00:12:06,770
about how we use services
across multiple parts

225
00:12:06,770 --> 00:12:09,440
of an application and
exchange data back and forth

226
00:12:09,440 --> 00:12:14,170
and then apply standards at each
of those service boundaries.