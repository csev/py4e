1
00:00:00,000 --> 00:00:00,930

2
00:00:00,930 --> 00:00:03,710
Hello, and welcome
to a Worked Exercise

3
00:00:03,710 --> 00:00:07,660
for Python for Informatics--
Exploring Information.

4
00:00:07,660 --> 00:00:09,090
My name is Dr.
Charles Severance,

5
00:00:09,090 --> 00:00:12,540
and I'm your host for this
particular worked exercise.

6
00:00:12,540 --> 00:00:15,430
This material is copyright
Creative Commons Attribution.

7
00:00:15,430 --> 00:00:18,090

8
00:00:18,090 --> 00:00:21,814
Again, try to work these
exercises yourself.

9
00:00:21,814 --> 00:00:23,730
In the beginning, they're
intended to be easy.

10
00:00:23,730 --> 00:00:25,438
They're intended to
be work from the book

11
00:00:25,438 --> 00:00:27,410
and the other materials,
and this is supposed

12
00:00:27,410 --> 00:00:29,500
to be used as a last resort.

13
00:00:29,500 --> 00:00:33,610
But you're here, so I
assume you know those rules.

14
00:00:33,610 --> 00:00:36,700
I assume that you also
have everything installed--

15
00:00:36,700 --> 00:00:37,700
Python is installed.

16
00:00:37,700 --> 00:00:39,241
You know how to use
your text editor.

17
00:00:39,241 --> 00:00:41,140
You know how to use
your Command Line.

18
00:00:41,140 --> 00:00:45,950
This screencast will not sort
of go through all of those.

19
00:00:45,950 --> 00:00:47,640
Although, it will
review some of them.

20
00:00:47,640 --> 00:00:50,130
Go back to pythonlearn.com,
and go through the software

21
00:00:50,130 --> 00:00:53,470
installation screencast
to get to the point

22
00:00:53,470 --> 00:00:55,070
where your ready
to run programs.

23
00:00:55,070 --> 00:00:56,540
So here's our exercise.

24
00:00:56,540 --> 00:00:58,610
We are going to
write the program.

25
00:00:58,610 --> 00:01:01,650
It's going to enter the
hours and enter the rate

26
00:01:01,650 --> 00:01:02,820
and then compute pay.

27
00:01:02,820 --> 00:01:04,950
It's going to prompt
and read some strings

28
00:01:04,950 --> 00:01:09,460
and convert from floating point
and then do some multiplication

29
00:01:09,460 --> 00:01:11,840
and away we go.

30
00:01:11,840 --> 00:01:15,580
So let's minimize that.

31
00:01:15,580 --> 00:01:18,850
I will start up my TextWrangler.

32
00:01:18,850 --> 00:01:21,000
And this is the last
program I was working on.

33
00:01:21,000 --> 00:01:23,560

34
00:01:23,560 --> 00:01:28,090
And I'll get rid of those
and start up my terminal.

35
00:01:28,090 --> 00:01:31,830
Make it a little bit smaller
and pull it down here.

36
00:01:31,830 --> 00:01:35,940
And break down TextWrangler,
so now I have a new document.

37
00:01:35,940 --> 00:01:40,150
And so I'm going to
do what I always do.

38
00:01:40,150 --> 00:01:42,200
And so the first
thing we've got to do

39
00:01:42,200 --> 00:01:44,182
is we've got to
prompt for some hours.

40
00:01:44,182 --> 00:01:45,640
And so I'm going
to make a variable

41
00:01:45,640 --> 00:01:49,130
called imp, which is just sort
of mnemonic for some input.

42
00:01:49,130 --> 00:01:50,320
It's a string.

43
00:01:50,320 --> 00:01:54,800
Because raw input
always reads a string.

44
00:01:54,800 --> 00:01:56,930
It doesn't read-- even
though they're numbers,

45
00:01:56,930 --> 00:01:59,550
it reads them as a string,
We'll have to convert them.

46
00:01:59,550 --> 00:02:11,360
Raw_input ('Enter Hours: ")
And I'm just going to keep it

47
00:02:11,360 --> 00:02:13,730
simple, and I'm going
to Print imp out.

48
00:02:13,730 --> 00:02:18,160
Now I have to save
this file-- Save As--

49
00:02:18,160 --> 00:02:21,070
and I'll put it in Python here.

50
00:02:21,070 --> 00:02:24,740
And I'm going to
call it hours1.py

51
00:02:24,740 --> 00:02:28,770
because we're going to do a
whole series of these things.

52
00:02:28,770 --> 00:02:29,835
Save that.

53
00:02:29,835 --> 00:02:32,750
Now you'll notice that as
soon as it saves as a .py,

54
00:02:32,750 --> 00:02:35,860
that it does syntax coloring--
thank you very much.

55
00:02:35,860 --> 00:02:39,350
So then I go into my
Command window, CD desktop.

56
00:02:39,350 --> 00:02:42,690
I have everything in this
folder py4infs on my desktop--

57
00:02:42,690 --> 00:02:44,560
right there, that folder-- CD.

58
00:02:44,560 --> 00:02:51,090

59
00:02:51,090 --> 00:02:54,340
And then I do ls.

60
00:02:54,340 --> 00:02:56,800
Again, dir for unix,
and then here we go.

61
00:02:56,800 --> 00:03:03,310
So I say python hours1.py.

62
00:03:03,310 --> 00:03:06,560
Again-- and I use Tab
a lot because I just

63
00:03:06,560 --> 00:03:08,120
don't like typing.

64
00:03:08,120 --> 00:03:09,325
So let's run it.

65
00:03:09,325 --> 00:03:15,370
So I enter some hours-- 1, 2,
3, and it prints out 1, 2, 3.

66
00:03:15,370 --> 00:03:17,530
And just to show you
it's just a string,

67
00:03:17,530 --> 00:03:19,900
I'll just put some
crap in there,

68
00:03:19,900 --> 00:03:24,710
and out comes exactly as
you would expect-- crap.

69
00:03:24,710 --> 00:03:25,860
And let's do this.

70
00:03:25,860 --> 00:03:29,760
Let's just say I
print type(imp)--

71
00:03:29,760 --> 00:03:31,135
just to sort of prove ourselves.

72
00:03:31,135 --> 00:03:34,840

73
00:03:34,840 --> 00:03:36,176
It's a string, right?

74
00:03:36,176 --> 00:03:36,800
It is a string.

75
00:03:36,800 --> 00:03:38,190
It is not an integer.

76
00:03:38,190 --> 00:03:41,510
So how do we convert from a
string to an integer-- float.

77
00:03:41,510 --> 00:03:43,500
We use the built
in function float.

78
00:03:43,500 --> 00:03:45,690
And now I'm going to
call my variable hours

79
00:03:45,690 --> 00:03:47,062
to be quite mnemonic.

80
00:03:47,062 --> 00:03:48,645
And I'll call it the
float conversion.

81
00:03:48,645 --> 00:03:54,580

82
00:03:54,580 --> 00:03:59,410
And then I'll Print hours.

83
00:03:59,410 --> 00:04:02,760
And Print the type of hours.

84
00:04:02,760 --> 00:04:04,680
Now, you might say, hey, Chuck.

85
00:04:04,680 --> 00:04:05,900
You're a pretty smart guy.

86
00:04:05,900 --> 00:04:07,490
This is only like
five lines of code.

87
00:04:07,490 --> 00:04:09,850
How come you're
doing this slowly?

88
00:04:09,850 --> 00:04:11,240
How come it takes so many steps?

89
00:04:11,240 --> 00:04:13,010
That's what we call
iterative development.

90
00:04:13,010 --> 00:04:14,760
So I'm just being
really safe here.

91
00:04:14,760 --> 00:04:16,850
I'll get to the whole
program in a bit.

92
00:04:16,850 --> 00:04:20,250
I mean that's this dot,
dot, dot stuff down here.

93
00:04:20,250 --> 00:04:21,200
There will be more.

94
00:04:21,200 --> 00:04:24,700
But I'm just sort of playing
with it one bit at a time,

95
00:04:24,700 --> 00:04:30,510
and making sure that I
know what's going on.

96
00:04:30,510 --> 00:04:32,830
I'm doing this a little
bit more exaggerated here,

97
00:04:32,830 --> 00:04:35,540
but when I write programs, I
usually start with hello world

98
00:04:35,540 --> 00:04:38,419
and then add to it.

99
00:04:38,419 --> 00:04:40,210
You start with sort of
a nice blank canvas,

100
00:04:40,210 --> 00:04:42,001
and put some basic
stuff on the back of it.

101
00:04:42,001 --> 00:04:46,020
OK, so now I'm going
to read some input

102
00:04:46,020 --> 00:04:47,441
to prove that this is a string.

103
00:04:47,441 --> 00:04:49,815
I'm going to convert the string
to a floating point-- put

104
00:04:49,815 --> 00:04:51,000
in a different number.

105
00:04:51,000 --> 00:04:53,140
Then I'll print out that
thing and the type of it

106
00:04:53,140 --> 00:04:55,290
just to sort of be
sure that it works.

107
00:04:55,290 --> 00:04:59,010
So I print python hours
1.py, and I go 1, 2, 3.

108
00:04:59,010 --> 00:05:02,340
And it turns out that now I've
converted it to 1, 2, 3, 4,

109
00:05:02,340 --> 00:05:03,960
and I've got myself a float.

110
00:05:03,960 --> 00:05:07,600
And, of course, now if
I put junk in there,

111
00:05:07,600 --> 00:05:11,930
it's going to get a trace back
here because it just cannot

112
00:05:11,930 --> 00:05:16,023
convert dskj to float.

113
00:05:16,023 --> 00:05:18,350
We're going to fix
that later, OK?

114
00:05:18,350 --> 00:05:21,530
So now I'm going to start
deleting some of this stuff

115
00:05:21,530 --> 00:05:25,200
because that's pretty
clear that that's working.

116
00:05:25,200 --> 00:05:27,870
OK, so now, I've got
to promp for rate.

117
00:05:27,870 --> 00:05:32,100
Well, good programmers don't
type if they don't have to.

118
00:05:32,100 --> 00:05:34,110
So I'm just going to
Cut and Paste this.

119
00:05:34,110 --> 00:05:36,030
And then I'm going to
change this to rate,

120
00:05:36,030 --> 00:05:39,860
so raw_input("Enter Rate: ")
and then that'll be a string,

121
00:05:39,860 --> 00:05:40,390
of course.

122
00:05:40,390 --> 00:05:41,940
Then I will change
that to float.

123
00:05:41,940 --> 00:05:44,760
And I'm going to
put that into rate.

124
00:05:44,760 --> 00:05:49,265
And just to be sure, I'm going
to Print out rate, hours.

125
00:05:49,265 --> 00:05:52,570
Now at this point, they should
be floating point numbers.

126
00:05:52,570 --> 00:05:53,820
So let's run that.

127
00:05:53,820 --> 00:05:58,010
We'll start with a simple
test-- 40 hours, $10 an hour.

128
00:05:58,010 --> 00:05:58,530
There we go.

129
00:05:58,530 --> 00:06:01,210
They've been converted to
floats-- just peachy fine.

130
00:06:01,210 --> 00:06:02,930
So I'm going to create
a variable called

131
00:06:02,930 --> 00:06:07,720
pay rate times hours.

132
00:06:07,720 --> 00:06:10,610
And I'm going to Print out pay.

133
00:06:10,610 --> 00:06:13,345
And I will just get rid of
this one with a comment.

134
00:06:13,345 --> 00:06:16,090

135
00:06:16,090 --> 00:06:18,260
And notice how I used
a comment, a pound sign

136
00:06:18,260 --> 00:06:20,250
there because I'm
not deleting that.

137
00:06:20,250 --> 00:06:22,390
I keep that in case
something goes wrong.

138
00:06:22,390 --> 00:06:25,196
I don't think it's going
to, but here we go.

139
00:06:25,196 --> 00:06:29,803
Whoa, syntax error-- invalid
syntax, pay rate times hours.

140
00:06:29,803 --> 00:06:31,550
Oh, I forgot the
equal sign-- need

141
00:06:31,550 --> 00:06:35,134
to make that an
assignment statement.

142
00:06:35,134 --> 00:06:41,810
So let's try this again--
python hours 1, 40, 10, 400.

143
00:06:41,810 --> 00:06:42,690
There we go.

144
00:06:42,690 --> 00:06:45,270
And let me go check.

145
00:06:45,270 --> 00:06:48,910
Let's run the data-- 35 and 275.

146
00:06:48,910 --> 00:06:54,145
I'll run my program
again-- 35, $2.75 an hour,

147
00:06:54,145 --> 00:06:58,670
and 6.23 is my sample
example, right?

148
00:06:58,670 --> 00:06:59,840
Yes it is.

149
00:06:59,840 --> 00:07:00,940
So there we go.

150
00:07:00,940 --> 00:07:09,330
So here you have it--
powers and rate equal pay.