1
00:00:00,000 --> 00:00:00,750

2
00:00:00,750 --> 00:00:03,440
Hello, and welcome to
the Worked Exercises

3
00:00:03,440 --> 00:00:06,690
for Python for Informatics,
Exploring Information.

4
00:00:06,690 --> 00:00:10,100
I'm Charles Severance, and I'm
your guide and guest programmer

5
00:00:10,100 --> 00:00:13,050
for this particular example.

6
00:00:13,050 --> 00:00:15,600
As always, this material is
copyright, Creative Commons

7
00:00:15,600 --> 00:00:16,840
attribution.

8
00:00:16,840 --> 00:00:19,009
So we've been working
through a series of exercises

9
00:00:19,009 --> 00:00:20,800
that are doing time
and a half for overtime

10
00:00:20,800 --> 00:00:24,570
and pay of various kinds, to
look at various if-then else.

11
00:00:24,570 --> 00:00:26,410
Now we're on to functions.

12
00:00:26,410 --> 00:00:28,710
And so we're going
to create a function

13
00:00:28,710 --> 00:00:31,740
called compute pay that takes
two parameters, hour and rate.

14
00:00:31,740 --> 00:00:35,750
And it actually does exactly
the same thing as the other one.

15
00:00:35,750 --> 00:00:38,500
It's just we're doing
it in a different way.

16
00:00:38,500 --> 00:00:39,530
OK?

17
00:00:39,530 --> 00:00:51,161
So we will start by running
TextWrangler and the Terminal

18
00:00:51,161 --> 00:00:51,660
program.

19
00:00:51,660 --> 00:00:55,690

20
00:00:55,690 --> 00:00:58,950
Turn the program smaller
and get to the bottom.

21
00:00:58,950 --> 00:01:01,880
TextWrangler smaller.

22
00:01:01,880 --> 00:01:04,830

23
00:01:04,830 --> 00:01:10,640
And let's go CD desktop,
CD Python for Informatics.

24
00:01:10,640 --> 00:01:13,365
And there we are,
got some files here.

25
00:01:13,365 --> 00:01:16,440
Let's make use of Hours2.py.

26
00:01:16,440 --> 00:01:18,490
So I'm going to open Hours2.py.

27
00:01:18,490 --> 00:01:21,320
Hours3.py was Maya.

28
00:01:21,320 --> 00:01:24,140
Actually, I'll use
Hours3.py because that's

29
00:01:24,140 --> 00:01:26,420
my try accept code.

30
00:01:26,420 --> 00:01:28,430
OK.

31
00:01:28,430 --> 00:01:33,450
So the idea is is we're supposed
to encapsulate this bit of code

32
00:01:33,450 --> 00:01:35,731
in a function
called compute pay.

33
00:01:35,731 --> 00:01:37,480
So one of the things
you do with functions

34
00:01:37,480 --> 00:01:41,759
is you have to define
them before you use them.

35
00:01:41,759 --> 00:01:43,300
So we're going to
put the function up

36
00:01:43,300 --> 00:01:46,300
here and use the Def keyword.

37
00:01:46,300 --> 00:01:48,220
Def, compute pay.

38
00:01:48,220 --> 00:01:51,090

39
00:01:51,090 --> 00:01:55,200
And we're going to
accept some parameters.

40
00:01:55,200 --> 00:01:58,700
I'm going to call
it H and R, just

41
00:01:58,700 --> 00:02:01,180
to emphasize the difference
between the parameters

42
00:02:01,180 --> 00:02:09,800
we use inside the function
and the arguments in the call.

43
00:02:09,800 --> 00:02:14,670
So the code needs to be in this
function is these lines of code

44
00:02:14,670 --> 00:02:15,930
right here.

45
00:02:15,930 --> 00:02:18,290
So we're going to
cut them out of here

46
00:02:18,290 --> 00:02:21,166
and then we're going
to indent them and make

47
00:02:21,166 --> 00:02:22,415
them the body of the function.

48
00:02:22,415 --> 00:02:28,370

49
00:02:28,370 --> 00:02:29,260
OK.

50
00:02:29,260 --> 00:02:33,270
So now the variables
in this function

51
00:02:33,270 --> 00:02:36,960
are not H-- are
not hours and rate.

52
00:02:36,960 --> 00:02:40,952
They're P-- I'm going to just
change them all to this--

53
00:02:40,952 --> 00:02:42,910
and I'm just changing
this to kind of emphasize

54
00:02:42,910 --> 00:02:44,720
the difference between
these variables that

55
00:02:44,720 --> 00:02:47,960
live in the function
and the variables that

56
00:02:47,960 --> 00:02:50,800
live in the calling code.

57
00:02:50,800 --> 00:02:53,917
So in the function, they're
called H and R and P.

58
00:02:53,917 --> 00:02:55,750
And the only one other
thing I'm going to do

59
00:02:55,750 --> 00:02:59,870
is I want to put a return
statement in to return P

60
00:02:59,870 --> 00:03:02,450
as the result of the function.

61
00:03:02,450 --> 00:03:05,130
And so the Python will come in.

62
00:03:05,130 --> 00:03:06,050
It'll see the Def.

63
00:03:06,050 --> 00:03:07,133
It'll read all this stuff.

64
00:03:07,133 --> 00:03:08,070
It won't do it.

65
00:03:08,070 --> 00:03:10,160
Then the first
executables is try.

66
00:03:10,160 --> 00:03:12,250
It still works the same way.

67
00:03:12,250 --> 00:03:18,340
And then change this
to be in the main code.

68
00:03:18,340 --> 00:03:20,910

69
00:03:20,910 --> 00:03:22,510
Rate and hours.

70
00:03:22,510 --> 00:03:24,510
And then I'm going to put
a print statement just

71
00:03:24,510 --> 00:03:25,260
for yucky doodles.

72
00:03:25,260 --> 00:03:29,400

73
00:03:29,400 --> 00:03:34,750
Print in compute pay.

74
00:03:34,750 --> 00:03:41,520

75
00:03:41,520 --> 00:03:47,830
And print out H and R. And then
before I do my return here,

76
00:03:47,830 --> 00:04:04,580
I'm going to say--
I'm going to print out

77
00:04:04,580 --> 00:04:06,190
what I am sending back.

78
00:04:06,190 --> 00:04:08,660
And print out the computed pay.

79
00:04:08,660 --> 00:04:11,830
And then the only
thing I have to do left

80
00:04:11,830 --> 00:04:13,940
is I got the rate and
the hours, and I'm

81
00:04:13,940 --> 00:04:15,600
going to call my function.

82
00:04:15,600 --> 00:04:19,519
So I'm going to say pay
equals compute pay, or invoke

83
00:04:19,519 --> 00:04:26,400
the function and pass in rate
and hours as my arguments.

84
00:04:26,400 --> 00:04:27,960
And then print it out.

85
00:04:27,960 --> 00:04:28,980
So here's the main code.

86
00:04:28,980 --> 00:04:35,810
Oop, well, I'll just
say we are back.

87
00:04:35,810 --> 00:04:37,590
And then print out pay.

88
00:04:37,590 --> 00:04:41,550
So I have a print before and
after the call to compute pay.

89
00:04:41,550 --> 00:04:45,190
And I have a print
once compute pay starts

90
00:04:45,190 --> 00:04:46,960
and when compute pay finishes.

91
00:04:46,960 --> 00:04:50,710

92
00:04:50,710 --> 00:04:53,300
I have to reorganize my
screen a little bit here.

93
00:04:53,300 --> 00:04:57,970

94
00:04:57,970 --> 00:04:58,980
We can see them all.

95
00:04:58,980 --> 00:05:02,340

96
00:05:02,340 --> 00:05:06,249
I got to save this as something
else so I don't ruin ours too.

97
00:05:06,249 --> 00:05:07,290
I'll call this Hours4.py.

98
00:05:07,290 --> 00:05:10,176

99
00:05:10,176 --> 00:05:11,980
And I'm going to save Python.

100
00:05:11,980 --> 00:05:14,970
Hours before .py.

101
00:05:14,970 --> 00:05:26,376

102
00:05:26,376 --> 00:05:27,850
OK.

103
00:05:27,850 --> 00:05:28,430
So I'll type.

104
00:05:28,430 --> 00:05:31,370
So what's happened here is
it's typing in our hours

105
00:05:31,370 --> 00:05:33,870
so it's on this
line here, line 11.

106
00:05:33,870 --> 00:05:37,300
It's already made it all
the way through here.

107
00:05:37,300 --> 00:05:38,306
OK?

108
00:05:38,306 --> 00:05:41,910
I'm going to print
statement in a second here.

109
00:05:41,910 --> 00:05:43,065
So there we go.

110
00:05:43,065 --> 00:05:43,940
It's made it through.

111
00:05:43,940 --> 00:05:46,170
It hasn't done any work
but it remembered this code

112
00:05:46,170 --> 00:05:48,120
and stored it under
the name compute pay.

113
00:05:48,120 --> 00:05:49,160
And it's here.

114
00:05:49,160 --> 00:05:50,890
So now I'll do hours.

115
00:05:50,890 --> 00:05:52,700
40 hours and $10.

116
00:05:52,700 --> 00:05:54,940
So I'm running through
this code right here.

117
00:05:54,940 --> 00:05:57,180
And then I want it here
next, because we're not

118
00:05:57,180 --> 00:05:59,420
going to put bad hours in.

119
00:05:59,420 --> 00:06:03,710
So the next line that
happened is in the main code,

120
00:06:03,710 --> 00:06:05,230
which is here.

121
00:06:05,230 --> 00:06:08,790
Then it called compute
pay right there.

122
00:06:08,790 --> 00:06:10,550
[? Sewed ?] it up here.

123
00:06:10,550 --> 00:06:18,130
And h is 10, and r is 40.

124
00:06:18,130 --> 00:06:20,780
It doesn't quite look right.

125
00:06:20,780 --> 00:06:23,280
But the compute pay,
we're done, and that's 400

126
00:06:23,280 --> 00:06:24,380
and everything is cool.

127
00:06:24,380 --> 00:06:26,022
So it's back, right?

128
00:06:26,022 --> 00:06:34,700

129
00:06:34,700 --> 00:06:36,420
So let's do this.

130
00:06:36,420 --> 00:06:39,210
Let's do another one.

131
00:06:39,210 --> 00:06:45,410
And I'll put in 50
hours and $10 an hour.

132
00:06:45,410 --> 00:06:48,360
That one should have overtime
because we put in 50 hours,

133
00:06:48,360 --> 00:06:49,970
but it's not.

134
00:06:49,970 --> 00:06:51,790
So what is the problem here?

135
00:06:51,790 --> 00:06:54,460

136
00:06:54,460 --> 00:06:55,830
10 and 50 are coming in.

137
00:06:55,830 --> 00:06:59,497

138
00:06:59,497 --> 00:07:00,830
We're getting the numbers right.

139
00:07:00,830 --> 00:07:02,990
We're going into compute
pay and it's 10 and 50.

140
00:07:02,990 --> 00:07:03,990
Then we're coming back.

141
00:07:03,990 --> 00:07:07,350

142
00:07:07,350 --> 00:07:10,795
So we're printing out the
hours, the H and the R variable.

143
00:07:10,795 --> 00:07:15,480

144
00:07:15,480 --> 00:07:16,960
Oh, ooh, I see it.

145
00:07:16,960 --> 00:07:18,730
I see it.

146
00:07:18,730 --> 00:07:26,110
The mistake is right
here and right here.

147
00:07:26,110 --> 00:07:29,210
Can you see it?

148
00:07:29,210 --> 00:07:32,640
We have user parameters.

149
00:07:32,640 --> 00:07:35,150
And these are arguments, these
are the real variables, rate

150
00:07:35,150 --> 00:07:36,842
and hours.

151
00:07:36,842 --> 00:07:41,830
The parameters are H and
R. We got two parameters

152
00:07:41,830 --> 00:07:45,630
but we've got the order wrong.

153
00:07:45,630 --> 00:07:48,700
So here I have rate first.

154
00:07:48,700 --> 00:07:53,620
So H here is rate.

155
00:07:53,620 --> 00:07:56,260
And look, if we look at what we
print out here in compute pay,

156
00:07:56,260 --> 00:07:59,300
the first thing
we print out is H.

157
00:07:59,300 --> 00:08:02,350
But it's really 10, which
is supposed to be rate.

158
00:08:02,350 --> 00:08:03,180
Oops.

159
00:08:03,180 --> 00:08:04,310
So I got to fix this.

160
00:08:04,310 --> 00:08:07,304
That should be R to correspond
to the first parameter.

161
00:08:07,304 --> 00:08:08,720
And that should
be H to correspond

162
00:08:08,720 --> 00:08:10,100
to the second parameter.

163
00:08:10,100 --> 00:08:13,065
And just to keep my sanity, I'm
going to print out R comma H,

164
00:08:13,065 --> 00:08:17,460
so I'll say rate hours,
just to be consistent.

165
00:08:17,460 --> 00:08:19,020
No, no, no.

166
00:08:19,020 --> 00:08:22,860
Since I'm prompting for
hours and rate, h comma r,

167
00:08:22,860 --> 00:08:29,170
I change this to be h comma r.

168
00:08:29,170 --> 00:08:32,330
And then make this
be hours comma rate.

169
00:08:32,330 --> 00:08:35,240
Because I think it makes more
sense for hours to be first.

170
00:08:35,240 --> 00:08:37,049
I don't know why that
makes more sense.

171
00:08:37,049 --> 00:08:40,059
But now we're corresponding
our mnemonic variables inside

172
00:08:40,059 --> 00:08:44,109
of our function, or h and r,
that allude to hours and rate.

173
00:08:44,109 --> 00:08:45,900
But they're not the
same as hours and rate.

174
00:08:45,900 --> 00:08:50,620
So h is an alias to hours
when this is called.

175
00:08:50,620 --> 00:08:51,460
OK?

176
00:08:51,460 --> 00:08:53,418
So now let's run it again
and see if she works.

177
00:08:53,418 --> 00:08:55,640

178
00:08:55,640 --> 00:08:59,729
So I'll do 50 hours.

179
00:08:59,729 --> 00:09:00,270
$10 an hours.

180
00:09:00,270 --> 00:09:03,220

181
00:09:03,220 --> 00:09:05,430
Oh, I'll bet I didn't save it.

182
00:09:05,430 --> 00:09:08,950

183
00:09:08,950 --> 00:09:11,470
50 hours, $10 an hour.

184
00:09:11,470 --> 00:09:12,261
Yay, it works.

185
00:09:12,261 --> 00:09:12,760
It works.

186
00:09:12,760 --> 00:09:13,060
It works.

187
00:09:13,060 --> 00:09:13,559
It works.

188
00:09:13,559 --> 00:09:15,420
We got ourselves our overtime.

189
00:09:15,420 --> 00:09:17,920
OK.

190
00:09:17,920 --> 00:09:24,080
So let me say, H equals
and then I'm going to add R

191
00:09:24,080 --> 00:09:27,510
equals here, just so
we know which rate

192
00:09:27,510 --> 00:09:29,660
and what H and R are.

193
00:09:29,660 --> 00:09:32,650
Just add some strings there.

194
00:09:32,650 --> 00:09:33,400
Run it again.

195
00:09:33,400 --> 00:09:34,900
If I'd done that
in the first place,

196
00:09:34,900 --> 00:09:36,816
I probably would not
have made that-- I'd have

197
00:09:36,816 --> 00:09:38,820
seen that mistake much faster.

198
00:09:38,820 --> 00:09:42,660
So we've got 50 hours
and $10 per hour.

199
00:09:42,660 --> 00:09:43,900
And so it's working.

200
00:09:43,900 --> 00:09:49,770
So just to continue on here
on this, I could do this.

201
00:09:49,770 --> 00:09:52,500
I could call this
function again.

202
00:09:52,500 --> 00:09:56,260
And I could say, just to show
you I'm reusing this code,

203
00:09:56,260 --> 00:09:58,990
I'm going to make
a variable named Z.

204
00:09:58,990 --> 00:10:03,630
And I'm going to say
12.2 is my parameter.

205
00:10:03,630 --> 00:10:07,120
My second parameter
is $10 an hour.

206
00:10:07,120 --> 00:10:09,910
And so now I'm using constants
instead of variables.

207
00:10:09,910 --> 00:10:12,900
And you'll see that it's
going to call compute pay once

208
00:10:12,900 --> 00:10:15,140
this time and H
and R going to be

209
00:10:15,140 --> 00:10:16,730
hours and rate the first time.

210
00:10:16,730 --> 00:10:18,110
In the second time, they're
going to be called again,

211
00:10:18,110 --> 00:10:20,010
but 12 and 10 are
going to be what

212
00:10:20,010 --> 00:10:22,010
H and R are the second time.

213
00:10:22,010 --> 00:10:28,080
And then print ZZZZ comma z.

214
00:10:28,080 --> 00:10:31,110
That's just a silly message.

215
00:10:31,110 --> 00:10:33,260
OK?

216
00:10:33,260 --> 00:10:36,525
So we're going to--
this stuff is unchanged.

217
00:10:36,525 --> 00:10:38,380
It just prompts and
gets us the rate.

218
00:10:38,380 --> 00:10:40,629
We're going to call compute
pay twice this time.

219
00:10:40,629 --> 00:10:42,670
One time with hours and
rate, and the second time

220
00:10:42,670 --> 00:10:48,620
with 12.2 and 10.0 Let's
take a look at how that runs.

221
00:10:48,620 --> 00:10:50,250
I mean maybe a little longer.

222
00:10:50,250 --> 00:10:51,420
Let's see.

223
00:10:51,420 --> 00:10:55,920
50 hours, $10 an hour.

224
00:10:55,920 --> 00:10:59,400
Oh, yeah, it would
help for me to save.

225
00:10:59,400 --> 00:11:00,870
Help for me to save.

226
00:11:00,870 --> 00:11:02,690
Don't make that mistake.

227
00:11:02,690 --> 00:11:05,030
50 hours, $10 an hour.

228
00:11:05,030 --> 00:11:06,170
OK.

229
00:11:06,170 --> 00:11:10,950
So in the main code,
then it calls compute pay

230
00:11:10,950 --> 00:11:13,130
and does one computation.

231
00:11:13,130 --> 00:11:17,480
And then it's here, it's back
in the main code right there.

232
00:11:17,480 --> 00:11:19,070
And then it calls
compute pay again.

233
00:11:19,070 --> 00:11:23,770

234
00:11:23,770 --> 00:11:27,386
This time the variables
H and R are 12.2 and 10.0

235
00:11:27,386 --> 00:11:30,530
The last time, H and
R were 50 and 10.

236
00:11:30,530 --> 00:11:31,220
OK?

237
00:11:31,220 --> 00:11:36,130
The key is this H and R, the
parameters in the function

238
00:11:36,130 --> 00:11:37,430
are ephemeral.

239
00:11:37,430 --> 00:11:39,160
They come and they go.

240
00:11:39,160 --> 00:11:42,730
Compute pay works with
different values each time,

241
00:11:42,730 --> 00:11:45,280
but it uses H and R
internally as kind

242
00:11:45,280 --> 00:11:47,546
of its scratch area for this.

243
00:11:47,546 --> 00:11:50,410
See if I can get this all
on one screen, yes, I can.

244
00:11:50,410 --> 00:11:51,060
OK.

245
00:11:51,060 --> 00:11:53,820
So this is just showing
that we're running it twice,

246
00:11:53,820 --> 00:11:57,720
once H is 50 and the next
time is 12 because it's simply

247
00:11:57,720 --> 00:11:58,750
the first parameter.

248
00:11:58,750 --> 00:12:00,490
And the first time
the parameter was 50.

249
00:12:00,490 --> 00:12:02,590
The second time is was 12.2.

250
00:12:02,590 --> 00:12:04,170
OK?

251
00:12:04,170 --> 00:12:08,690
So let's just walk
through, scribbling

252
00:12:08,690 --> 00:12:09,860
what's going on here.

253
00:12:09,860 --> 00:12:12,204
We'll just kind of
go through this.

254
00:12:12,204 --> 00:12:13,620
So Python starts
at the beginning.

255
00:12:13,620 --> 00:12:16,490
It sees Def, and it says,
oh, don't run this code.

256
00:12:16,490 --> 00:12:17,630
Remember it.

257
00:12:17,630 --> 00:12:20,210
Name it compute pay.

258
00:12:20,210 --> 00:12:21,860
So H and R don't exist.

259
00:12:21,860 --> 00:12:24,900
They don't exist until
a function is invoked.

260
00:12:24,900 --> 00:12:27,300
Then we get to try.

261
00:12:27,300 --> 00:12:29,180
We've got some insurance
on these four lines.

262
00:12:29,180 --> 00:12:31,440
We read our-- and
convert our input

263
00:12:31,440 --> 00:12:33,230
and I write our
hours and our rate.

264
00:12:33,230 --> 00:12:36,076
Good, so we don't
run the accept.

265
00:12:36,076 --> 00:12:38,450
Then we print in the main code.

266
00:12:38,450 --> 00:12:40,010
OK.

267
00:12:40,010 --> 00:12:42,370
And then we come to this line.

268
00:12:42,370 --> 00:12:43,700
We see compute pay.

269
00:12:43,700 --> 00:12:46,640
And so that goes up here.

270
00:12:46,640 --> 00:12:48,830
And H and R are hours and rate.

271
00:12:48,830 --> 00:12:50,810
And it runs this code.

272
00:12:50,810 --> 00:12:54,860
It returns P, and that P
comes back as the value

273
00:12:54,860 --> 00:12:57,600
here and end being put into pay.

274
00:12:57,600 --> 00:12:59,790
Then we print we are back.

275
00:12:59,790 --> 00:13:01,540
Then we run into this statement.

276
00:13:01,540 --> 00:13:03,420
And we have to call compute pay.

277
00:13:03,420 --> 00:13:05,000
So it goes up again.

278
00:13:05,000 --> 00:13:08,440
This time h and r are 12 and 10.

279
00:13:08,440 --> 00:13:10,990
Run through the code,
blah, blah, blah, blah.

280
00:13:10,990 --> 00:13:13,220
And then returns 122.

281
00:13:13,220 --> 00:13:16,500
And that returns to this
call, not the previous one.

282
00:13:16,500 --> 00:13:19,100
And then that puts 122 into z.

283
00:13:19,100 --> 00:13:21,470
And then the program
continues on.

284
00:13:21,470 --> 00:13:24,980
So again, this does nothing.

285
00:13:24,980 --> 00:13:28,740
And it calls it twice and
has two sets of arguments.

286
00:13:28,740 --> 00:13:31,350
And the parameters represent
different arguments

287
00:13:31,350 --> 00:13:32,980
in the different call.

288
00:13:32,980 --> 00:13:33,950
OK?

289
00:13:33,950 --> 00:13:36,100
So let me just clean
this up one last time

290
00:13:36,100 --> 00:13:41,720
and get rid of a-- oops, get rid
of the debug print statements.

291
00:13:41,720 --> 00:13:45,030
Get rid of that.

292
00:13:45,030 --> 00:13:47,780
Get rid of this.

293
00:13:47,780 --> 00:13:50,720
So you can see what it's
really supposed to look like.

294
00:13:50,720 --> 00:13:51,900
We don't need that.

295
00:13:51,900 --> 00:13:56,600
Well, I'll just comment that
one out to keep in case later.

296
00:13:56,600 --> 00:13:57,780
This is debug print.

297
00:13:57,780 --> 00:14:00,590
So I'll keep that,
get rid of those two.

298
00:14:00,590 --> 00:14:03,380
So now it doesn't
do any printing.

299
00:14:03,380 --> 00:14:06,720
So let's run it one more time.

300
00:14:06,720 --> 00:14:10,800
40, 10, good stuff.

301
00:14:10,800 --> 00:14:13,340
50, 10, good stuff.

302
00:14:13,340 --> 00:14:14,400
So it works.

303
00:14:14,400 --> 00:14:21,740
So there's the ultimate
program and looks pretty good.