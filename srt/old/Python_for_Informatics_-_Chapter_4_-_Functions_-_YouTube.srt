1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:04,910
Hello, and welcome to Chapter
4, Functions, in my book Python

3
00:00:04,910 --> 00:00:06,920
for Informatics.

4
00:00:06,920 --> 00:00:10,260
As always, these slides and
this audio and this video

5
00:00:10,260 --> 00:00:14,590
are copyright Creative
Commons attribution.

6
00:00:14,590 --> 00:00:17,370
Now, we are to the point--
you know, in Chapter 4,

7
00:00:17,370 --> 00:00:19,260
we're sort of well
into the class--

8
00:00:19,260 --> 00:00:22,680
so I figure I should
introduce myself a little bit,

9
00:00:22,680 --> 00:00:24,870
let you know a little bit.

10
00:00:24,870 --> 00:00:29,770
As I said before, I
think in the beginning

11
00:00:29,770 --> 00:00:32,400
I'm taping this in
a wonderful building

12
00:00:32,400 --> 00:00:35,710
at the University of
Michigan called North Quad.

13
00:00:35,710 --> 00:00:37,600
It's a relatively new building.

14
00:00:37,600 --> 00:00:41,000
It's got some
residential sections

15
00:00:41,000 --> 00:00:43,710
and some academic sections
and some classrooms.

16
00:00:43,710 --> 00:00:45,910
And one of the classrooms
that I typically teach in

17
00:00:45,910 --> 00:00:49,185
is actually 2255 North Quad.

18
00:00:49,185 --> 00:00:51,570
It's a really beautiful
room with great ways

19
00:00:51,570 --> 00:00:53,180
for people to interact.

20
00:00:53,180 --> 00:00:57,170
And so sometimes I'm teaching,
you know, little tiny Dr. Chuck

21
00:00:57,170 --> 00:01:00,900
down here, with a
smile on the face.

22
00:01:00,900 --> 00:01:04,660
And sometimes, my students are
taking my classes on campus.

23
00:01:04,660 --> 00:01:11,310
And sometimes, students are
watching me through a lecture.

24
00:01:11,310 --> 00:01:13,569
And so this building
is really beautiful.

25
00:01:13,569 --> 00:01:15,610
And if you ever get a
chance to come to Ann Arbor

26
00:01:15,610 --> 00:01:17,484
and take a look at it,
maybe walk through it,

27
00:01:17,484 --> 00:01:19,130
it's really quite nice.

28
00:01:19,130 --> 00:01:20,770
One of the things
I like about it

29
00:01:20,770 --> 00:01:23,560
is that I think
it's really highly

30
00:01:23,560 --> 00:01:27,700
inspired by Harry Potter.

31
00:01:27,700 --> 00:01:30,930
Of course, Oxford and Cambridge
are the real inspiration

32
00:01:30,930 --> 00:01:31,690
for Harry Potter.

33
00:01:31,690 --> 00:01:36,140
But our cafeteria, for
example, it kind of

34
00:01:36,140 --> 00:01:39,550
looks like the four
tables in Hogwarts.

35
00:01:39,550 --> 00:01:42,330
And you can kind of imagine
a snowy owl flying around

36
00:01:42,330 --> 00:01:47,010
and a Sorting Hat at the
front sorting people.

37
00:01:47,010 --> 00:01:50,545
And so the nickname
for the place

38
00:01:50,545 --> 00:01:54,590
is Quad-warts, because
it's North Quad.

39
00:01:54,590 --> 00:01:59,210
Quad-warts, that's like
Hogwarts and North Quad kind of

40
00:01:59,210 --> 00:01:59,950
jammed together.

41
00:01:59,950 --> 00:02:02,630
And of course, given that we
sort of think of ourselves

42
00:02:02,630 --> 00:02:07,320
a little bit as Harry Potter,
people when they first

43
00:02:07,320 --> 00:02:12,870
come in September, often sort
of decide to sort themselves.

44
00:02:12,870 --> 00:02:17,070
And a few years back, when we
first started the building,

45
00:02:17,070 --> 00:02:21,684
the students decided that I did
not get to be in Gryffindor.

46
00:02:21,684 --> 00:02:23,600
As a matter of fact,
it's probably time for me

47
00:02:23,600 --> 00:02:27,930
to show you who I am and
who I've been sorted to be.

48
00:02:27,930 --> 00:02:31,630
So the students decided that
I couldn't be in Gryffindor,

49
00:02:31,630 --> 00:02:34,100
but I had to be in Slytherin.

50
00:02:34,100 --> 00:02:36,600
And that's because of my
name, Charles Severance,

51
00:02:36,600 --> 00:02:39,210
and Severus Snape.

52
00:02:39,210 --> 00:02:43,310
What's even cooler, of course,
is given that I teach Python,

53
00:02:43,310 --> 00:02:48,080
Slytherin's House is a snake.

54
00:02:48,080 --> 00:02:49,890
So it makes a lot of sense.

55
00:02:49,890 --> 00:02:53,860
They even have this really
fancy Slytherin teacup

56
00:02:53,860 --> 00:02:56,097
that I use to drink
tea during lectures.

57
00:02:56,097 --> 00:02:57,180
Sometimes, I drink coffee.

58
00:02:57,180 --> 00:02:59,000
Sometimes, I drink tea.

59
00:02:59,000 --> 00:02:59,500
Wow.

60
00:02:59,500 --> 00:03:00,250
This thing itches.

61
00:03:00,250 --> 00:03:02,164
So let me just get rid of it.

62
00:03:02,164 --> 00:03:04,080
If I had any hair, that
would mess my hair up.

63
00:03:04,080 --> 00:03:06,330
So let me get rid of this
for the rest of the lecture.

64
00:03:06,330 --> 00:03:08,838

65
00:03:08,838 --> 00:03:10,770
So there I am.

66
00:03:10,770 --> 00:03:11,270
OK.

67
00:03:11,270 --> 00:03:12,770
Enough of that.

68
00:03:12,770 --> 00:03:17,370
Back to Dr. Chuck.

69
00:03:17,370 --> 00:03:22,050
So with that sort
of brief interlude,

70
00:03:22,050 --> 00:03:27,610
the actual topic of this
lecture is functions.

71
00:03:27,610 --> 00:03:31,370
And so storing and
reusing is basically

72
00:03:31,370 --> 00:03:36,550
an idea that we will often
have a series of steps

73
00:03:36,550 --> 00:03:39,760
that we will want to use
over and over in a program,

74
00:03:39,760 --> 00:03:41,870
increasingly complex.

75
00:03:41,870 --> 00:03:43,370
The things we'll
use in this lecture

76
00:03:43,370 --> 00:03:45,660
are kind of silly,
because I have

77
00:03:45,660 --> 00:03:48,200
to keep them short so the
slides don't get too long.

78
00:03:48,200 --> 00:03:51,160
But a good example
of the kind of work

79
00:03:51,160 --> 00:03:56,290
is maybe I'm going to use
Google's geocoding service.

80
00:03:56,290 --> 00:04:00,440
And I'm going to send some
unstructured data back and get

81
00:04:00,440 --> 00:04:02,452
a GPS coordinate back.

82
00:04:02,452 --> 00:04:04,160
And that's a service
that I want to call.

83
00:04:04,160 --> 00:04:07,169
And it would maybe be about
this many lines of code.

84
00:04:07,169 --> 00:04:09,210
And I'm going to want to
that all over the place.

85
00:04:09,210 --> 00:04:11,790
So do I want to put
this many lines of code

86
00:04:11,790 --> 00:04:13,570
40 places in my program?

87
00:04:13,570 --> 00:04:15,610
Or do I want to put
it one place and then

88
00:04:15,610 --> 00:04:18,260
call it in the various
places that I need it?

89
00:04:18,260 --> 00:04:22,320
And so that's why I call it the
store and the reuse function.

90
00:04:22,320 --> 00:04:27,514
So if we take a look at
the simple syntax here,

91
00:04:27,514 --> 00:04:28,930
these things are
called functions.

92
00:04:28,930 --> 00:04:31,770
In some languages, they're
called subprograms.

93
00:04:31,770 --> 00:04:36,080
But we call them
functions in Python.

94
00:04:36,080 --> 00:04:38,910
And the keyword that we're
really going to focus on

95
00:04:38,910 --> 00:04:41,590
is def, which stands for define.

96
00:04:41,590 --> 00:04:47,380
And what happens here is when
Python sees this def keyword,

97
00:04:47,380 --> 00:04:50,230
it actually doesn't
run the code.

98
00:04:50,230 --> 00:04:52,430
It says, oh, you're
going to make a function.

99
00:04:52,430 --> 00:04:55,040
And you're going to
turn on a recorder

100
00:04:55,040 --> 00:04:57,170
and start recording this code.

101
00:04:57,170 --> 00:04:58,740
So it has a colon
at the end of it.

102
00:04:58,740 --> 00:05:01,030
So it has an indented
block afterwards.

103
00:05:01,030 --> 00:05:05,190
And so the indented
block becomes recorded.

104
00:05:05,190 --> 00:05:07,450
So instead of running
the code, like if we just

105
00:05:07,450 --> 00:05:09,850
put print "Hello" and print
find: Fun," it would run it.

106
00:05:09,850 --> 00:05:13,300
But instead says, hey,
don't run it right now.

107
00:05:13,300 --> 00:05:14,620
Name it, "hello."

108
00:05:14,620 --> 00:05:15,630
We give it a name.

109
00:05:15,630 --> 00:05:16,940
It's kind like a variable.

110
00:05:16,940 --> 00:05:18,210
We choose the name.

111
00:05:18,210 --> 00:05:21,310
We've chosen hello
as the name of this.

112
00:05:21,310 --> 00:05:22,910
Define it as hello.

113
00:05:22,910 --> 00:05:25,360
Have it have these two
lines of Python in it.

114
00:05:25,360 --> 00:05:27,880
And we'll use it later.

115
00:05:27,880 --> 00:05:29,770
And so that's the
function definition.

116
00:05:29,770 --> 00:05:32,020
That's the store phase.

117
00:05:32,020 --> 00:05:34,550
It's sort of like it doesn't
really run those lines.

118
00:05:34,550 --> 00:05:36,360
It sort of makes
a variable called

119
00:05:36,360 --> 00:05:40,080
hello that actually
contains Python code rather

120
00:05:40,080 --> 00:05:42,770
than containing 12 or
a string or something

121
00:05:42,770 --> 00:05:45,310
like that we've
worked with before.

122
00:05:45,310 --> 00:05:46,690
So this is the store part.

123
00:05:46,690 --> 00:05:50,260
And then, the reuse part is
we then have extended Python.

124
00:05:50,260 --> 00:05:53,740
We now can call our bit of code.

125
00:05:53,740 --> 00:05:56,240
So we say, hello--
hello name is what

126
00:05:56,240 --> 00:05:58,250
we came up with-- parentheses.

127
00:05:58,250 --> 00:06:00,270
And then, that says--
remember that code

128
00:06:00,270 --> 00:06:02,690
that I put in there
under the name hello?

129
00:06:02,690 --> 00:06:03,990
Run it now.

130
00:06:03,990 --> 00:06:07,030
And so if I start
looking at that and then

131
00:06:07,030 --> 00:06:08,630
it just continues.

132
00:06:08,630 --> 00:06:11,440
So let me clear this
and start over again.

133
00:06:11,440 --> 00:06:14,540
And so if I watch what Python
does from the beginning

134
00:06:14,540 --> 00:06:16,260
as it reads here
and goes, oh, you're

135
00:06:16,260 --> 00:06:18,130
defining a function named hello.

136
00:06:18,130 --> 00:06:18,750
Great.

137
00:06:18,750 --> 00:06:22,095
I will remember, remember.

138
00:06:22,095 --> 00:06:23,790
I've got that
remembered for you.

139
00:06:23,790 --> 00:06:24,680
Let's continue on.

140
00:06:24,680 --> 00:06:25,750
Oh, hello.

141
00:06:25,750 --> 00:06:28,260
You want me to run that
stuff that you just got done

142
00:06:28,260 --> 00:06:30,280
storing under the name hello.

143
00:06:30,280 --> 00:06:31,870
So then, it kind of
goes and runs it.

144
00:06:31,870 --> 00:06:34,310
And out comes Hello, Fun.

145
00:06:34,310 --> 00:06:36,640
Then after that, it
runs to this print,

146
00:06:36,640 --> 00:06:38,587
and then out comes print Zip.

147
00:06:38,587 --> 00:06:40,920
Then, we say, you know what,
I want to reuse that again.

148
00:06:40,920 --> 00:06:41,790
I stored it once.

149
00:06:41,790 --> 00:06:44,120
I can resue it as
many times as I want.

150
00:06:44,120 --> 00:06:45,440
And now, hello.

151
00:06:45,440 --> 00:06:48,790
And then, these two lines
of code run a second time.

152
00:06:48,790 --> 00:06:51,430
So we stored once,
gave them a name,

153
00:06:51,430 --> 00:06:54,490
and then ran them
twice in the context

154
00:06:54,490 --> 00:06:55,760
of wherever it is we wanted.

155
00:06:55,760 --> 00:07:02,220
Now, this is not sort
of a profound reason

156
00:07:02,220 --> 00:07:02,970
to use it in this.

157
00:07:02,970 --> 00:07:05,011
I'm just trying to give
you the notion that there

158
00:07:05,011 --> 00:07:07,750
is a way to store and
name code that then you

159
00:07:07,750 --> 00:07:08,980
can retrieve later.

160
00:07:08,980 --> 00:07:11,161
That's really what's
going on here.

161
00:07:11,161 --> 00:07:13,285
So there's two kinds of
functions inside of Python.

162
00:07:13,285 --> 00:07:15,140
And we've actually
been using them almost

163
00:07:15,140 --> 00:07:16,776
from the very first lecture.

164
00:07:16,776 --> 00:07:18,400
And that is, there
a built-in functions

165
00:07:18,400 --> 00:07:23,470
that Python provides to us
like float, raw input, int,

166
00:07:23,470 --> 00:07:24,890
those kinds of functions.

167
00:07:24,890 --> 00:07:28,170
Those are just part of Python,
but we call them as functions.

168
00:07:28,170 --> 00:07:29,840
The difference is
we don't write them.

169
00:07:29,840 --> 00:07:31,548
And then, there's
user-defined functions,

170
00:07:31,548 --> 00:07:33,290
functions that we
write, functions

171
00:07:33,290 --> 00:07:36,330
to create functionality
that we want

172
00:07:36,330 --> 00:07:39,310
to make use of like
encapsulating the ability

173
00:07:39,310 --> 00:07:42,790
to compute pay for time
and a half for overtime.

174
00:07:42,790 --> 00:07:46,130
And so we name these
things, and we treat them

175
00:07:46,130 --> 00:07:47,940
as new reserved words
that we've created.

176
00:07:47,940 --> 00:07:50,580
They're kind of an extension
to the language as it were.

177
00:07:50,580 --> 00:07:53,550

178
00:07:53,550 --> 00:07:57,370
So when we're coming
along, we define a function

179
00:07:57,370 --> 00:07:58,790
with the def keyword.

180
00:07:58,790 --> 00:08:02,039
The def keyword is
a reserved word.

181
00:08:02,039 --> 00:08:04,330
It's one of the many reserved
words back in chapter one

182
00:08:04,330 --> 00:08:05,320
that we talked about.

183
00:08:05,320 --> 00:08:08,630
And it indicates to Python
the beginning of a function.

184
00:08:08,630 --> 00:08:09,520
We define it.

185
00:08:09,520 --> 00:08:12,660
And then when we call
it, it's called invoking.

186
00:08:12,660 --> 00:08:15,600
It's like we're building
it and then we're invoking.

187
00:08:15,600 --> 00:08:17,540
And you can build it
once and then invoke it

188
00:08:17,540 --> 00:08:20,300
many, many times.

189
00:08:20,300 --> 00:08:23,450
So for example, here's
a built-in function

190
00:08:23,450 --> 00:08:26,180
called max that
finds the largest

191
00:08:26,180 --> 00:08:29,540
character-- the sort
of lexigraphically

192
00:08:29,540 --> 00:08:31,650
larger character-- in a string.

193
00:08:31,650 --> 00:08:35,690
And so it's like, OK, tell
me the maximum character.

194
00:08:35,690 --> 00:08:37,720
And so max is not some
code that we've written.

195
00:08:37,720 --> 00:08:40,380
But we are invoking
a function here.

196
00:08:40,380 --> 00:08:43,380
And we're passing in
an argument to that.

197
00:08:43,380 --> 00:08:47,900
So the argument is the stuff
in between the parentheses.

198
00:08:47,900 --> 00:08:49,970
So the max function
can find the maximum

199
00:08:49,970 --> 00:08:51,350
of many different things.

200
00:08:51,350 --> 00:08:52,740
At this moment,
we wanted to find

201
00:08:52,740 --> 00:08:56,360
the maximum of that particular
string, the highest character

202
00:08:56,360 --> 00:08:58,210
in that particular string.

203
00:08:58,210 --> 00:09:01,760
So this is a right-hand side
of an assignment statement

204
00:09:01,760 --> 00:09:06,382
too, so that has to be
evaluated to a value.

205
00:09:06,382 --> 00:09:08,590
So it goes into the function,
does whatever it thinks

206
00:09:08,590 --> 00:09:10,180
the function wants to do.

207
00:09:10,180 --> 00:09:12,500
And then, the function
gives us back a value

208
00:09:12,500 --> 00:09:17,130
that becomes the value for
max parentheses Hello world.

209
00:09:17,130 --> 00:09:20,540
And that value, in this
case, is the letter w.

210
00:09:20,540 --> 00:09:23,360
Because the letter w is decided
to be the highest letter,

211
00:09:23,360 --> 00:09:26,090
and that's what
max gives us back.

212
00:09:26,090 --> 00:09:28,370
And then, we're
done with that, then

213
00:09:28,370 --> 00:09:30,506
that w ends up being assigned.

214
00:09:30,506 --> 00:09:31,880
The assigned
statement completes.

215
00:09:31,880 --> 00:09:34,450
And so you can think of
the function evaluation

216
00:09:34,450 --> 00:09:38,180
as happening as part of the
right-hand side expression

217
00:09:38,180 --> 00:09:38,820
calculation.

218
00:09:38,820 --> 00:09:40,880
There could be a plus
here and other stuff.

219
00:09:40,880 --> 00:09:43,040
And it's just at some
point a big expression.

220
00:09:43,040 --> 00:09:45,740
And this one, it's a simple
expression with just one

221
00:09:45,740 --> 00:09:48,530
function call.

222
00:09:48,530 --> 00:09:50,890
Now, if we look at this,
there's some code somewhere.

223
00:09:50,890 --> 00:09:52,940
Somebody wrote some code.

224
00:09:52,940 --> 00:09:54,510
It's part of Python.

225
00:09:54,510 --> 00:09:55,710
You didn't write it.

226
00:09:55,710 --> 00:09:57,950
There's a max
function somewhere.

227
00:09:57,950 --> 00:10:00,210
And you can think of a
function as having some input.

228
00:10:00,210 --> 00:10:01,940
It's kind of like a program.

229
00:10:01,940 --> 00:10:04,930
That's why some languages
call these things subprograms.

230
00:10:04,930 --> 00:10:08,120
Because they have an input, they
do some kind of useful works--

231
00:10:08,120 --> 00:10:10,240
whatever that useful
work happens to be.

232
00:10:10,240 --> 00:10:13,260
And then, it produced
some kind of an output.

233
00:10:13,260 --> 00:10:16,420
So Hello world is the input,
the string, the arguments,

234
00:10:16,420 --> 00:10:17,890
the thing we're passing in.

235
00:10:17,890 --> 00:10:20,850
Hello world is what's being
passed into the function.

236
00:10:20,850 --> 00:10:22,610
The function is running.

237
00:10:22,610 --> 00:10:25,550
And then, something comes
back and is sent back.

238
00:10:25,550 --> 00:10:31,090
So it has input,
processing, and output.

239
00:10:31,090 --> 00:10:33,770
So that's how a function,
some stored code--

240
00:10:33,770 --> 00:10:37,030
whether we wrote it or
not-- they work the same

241
00:10:37,030 --> 00:10:38,930
when we call functions.

242
00:10:38,930 --> 00:10:43,110
So you could think of this as
somewhere inside of the Python

243
00:10:43,110 --> 00:10:46,640
library is some code that maybe
has a little def in there.

244
00:10:46,640 --> 00:10:49,400
And they named the function max.

245
00:10:49,400 --> 00:10:51,340
And it takes a single parameter.

246
00:10:51,340 --> 00:10:55,430
And it does some blah, blah,
blah, loopy, blah, blah, blah.

247
00:10:55,430 --> 00:10:56,550
A lot of stuff.

248
00:10:56,550 --> 00:10:58,960
Whatever max wants to do.

249
00:10:58,960 --> 00:11:01,750
Whatever we need max to do
based on the specifications

250
00:11:01,750 --> 00:11:03,480
that max is supposed to support.

251
00:11:03,480 --> 00:11:06,840
But somewhere there is
code inside of Python

252
00:11:06,840 --> 00:11:09,250
that actually represents
the function definition.

253
00:11:09,250 --> 00:11:12,000
It's a built-in function,
because it comes with Python

254
00:11:12,000 --> 00:11:14,820
and we didn't have to
do anything to add.

255
00:11:14,820 --> 00:11:17,000
So some common
built-in functions

256
00:11:17,000 --> 00:11:20,560
that we have been
using all along,

257
00:11:20,560 --> 00:11:24,100
good examples are the float,
which takes as input anything

258
00:11:24,100 --> 00:11:29,270
and returns you a floating
point number version of that;

259
00:11:29,270 --> 00:11:32,640
type, which takes a parameter
of a variable or a constant

260
00:11:32,640 --> 00:11:37,740
and says, what is the type of
this; float, again converting;

261
00:11:37,740 --> 00:11:38,755
type, again; and float.

262
00:11:38,755 --> 00:11:41,130
So these are all things that
we've been calling functions

263
00:11:41,130 --> 00:11:42,070
all along.

264
00:11:42,070 --> 00:11:45,610
And it passes the input
value into the function,

265
00:11:45,610 --> 00:11:47,780
the function runs and
then gives us back

266
00:11:47,780 --> 00:11:50,380
the return value,
which then participates

267
00:11:50,380 --> 00:11:54,060
in the rest of the expression
on the right-hand side.

268
00:11:54,060 --> 00:11:57,180
You can think of it's
pausing the calculation

269
00:11:57,180 --> 00:11:59,554
on the right-hand side,
calling the function,

270
00:11:59,554 --> 00:12:00,970
getting the result
of the function

271
00:12:00,970 --> 00:12:02,710
back, and then
continuing the evaluation

272
00:12:02,710 --> 00:12:05,970
on the right-hand side, then
coming up with whatever value,

273
00:12:05,970 --> 00:12:09,740
and then printing
that value out.

274
00:12:09,740 --> 00:12:13,200
Another thing that
we've done, is

275
00:12:13,200 --> 00:12:14,840
we've done string conversions.

276
00:12:14,840 --> 00:12:17,250
Right, so we've converted
in this case a string

277
00:12:17,250 --> 00:12:18,480
to an integer.

278
00:12:18,480 --> 00:12:20,170
And that's what type it is.

279
00:12:20,170 --> 00:12:21,940
We've converted a
string to an integer.

280
00:12:21,940 --> 00:12:25,500
So it converts its argument,
whatever that happens to be,

281
00:12:25,500 --> 00:12:26,580
into an integer.

282
00:12:26,580 --> 00:12:28,950
So that's just some of the
built in functions that we

283
00:12:28,950 --> 00:12:31,450
have talked about so far.

284
00:12:31,450 --> 00:12:36,970
Now this becomes
more interesting when

285
00:12:36,970 --> 00:12:39,240
we can make our own functions.

286
00:12:39,240 --> 00:12:41,800
There goes my tea bag.

287
00:12:41,800 --> 00:12:45,590
Right in the middle
of the thing.

288
00:12:45,590 --> 00:12:47,000
We take the tea bag out.

289
00:12:47,000 --> 00:12:48,982
I think it's -- whoa.

290
00:12:48,982 --> 00:12:50,391
I'll be right back.

291
00:12:50,391 --> 00:12:58,247

292
00:12:58,247 --> 00:13:00,211
OK, there's my tea.

293
00:13:00,211 --> 00:13:03,157
So, we want to make
a new function.

294
00:13:03,157 --> 00:13:08,580
As we said in the other
example, we use the Def keyword.

295
00:13:08,580 --> 00:13:12,200
The Def keyword here, and then
we have some indented bit.

296
00:13:12,200 --> 00:13:14,280
We create a name for it.

297
00:13:14,280 --> 00:13:16,170
And then have some parentheses.

298
00:13:16,170 --> 00:13:19,230
These parentheses will
later tell the inputs

299
00:13:19,230 --> 00:13:21,400
that we're going to pass
in but this function has

300
00:13:21,400 --> 00:13:23,520
no input so we just go
parentheses parentheses.

301
00:13:23,520 --> 00:13:25,670
And then the all
important colon character,

302
00:13:25,670 --> 00:13:29,670
which indicates the beginning
of an indented block of Python

303
00:13:29,670 --> 00:13:32,460
that then is just the
text of the function.

304
00:13:32,460 --> 00:13:36,670
So it's important to remember
that while this is executing,

305
00:13:36,670 --> 00:13:39,490
when Python first
looks this it doesn't

306
00:13:39,490 --> 00:13:40,890
run these lines of code.

307
00:13:40,890 --> 00:13:44,850
It just remembers them and
names them print lyrics.

308
00:13:44,850 --> 00:13:46,830
So it doesn't cause
any print out,

309
00:13:46,830 --> 00:13:49,732
it just causes Python
to remember them.

310
00:13:49,732 --> 00:13:53,430
I've said that a
few too many times.

311
00:13:53,430 --> 00:13:58,340
So here is a difficult
problem, I'll

312
00:13:58,340 --> 00:14:00,150
let you think about
it for awhile.

313
00:14:00,150 --> 00:14:02,466
I want you to kind of mentally
go through and execute

314
00:14:02,466 --> 00:14:02,965
this code.

315
00:14:02,965 --> 00:14:05,510

316
00:14:05,510 --> 00:14:09,880
Ask what, ask yourself what
the output of this program

317
00:14:09,880 --> 00:14:11,930
would produce.

318
00:14:11,930 --> 00:14:12,860
How many lines?

319
00:14:12,860 --> 00:14:16,030
How many lines of output
will this program produce?

320
00:14:16,030 --> 00:14:22,140

321
00:14:22,140 --> 00:14:25,555
So, how many of you said three?

322
00:14:25,555 --> 00:14:28,320

323
00:14:28,320 --> 00:14:31,370
How many of you said five?

324
00:14:31,370 --> 00:14:37,400
Well, the right answer
is actually three.

325
00:14:37,400 --> 00:14:41,730
You see five print statements
two, three, four, five.

326
00:14:41,730 --> 00:14:46,330
But to of the print statements
are sitting inside of this.

327
00:14:46,330 --> 00:14:50,330
And we never called, we never
invoked the function down here.

328
00:14:50,330 --> 00:14:51,240
OK?

329
00:14:51,240 --> 00:14:55,941
So this one --
let's clear this --

330
00:14:55,941 --> 00:14:58,980
this one prints these
two get skipped,

331
00:14:58,980 --> 00:15:01,270
this one prints and
this one prints.

332
00:15:01,270 --> 00:15:04,950
So that's why there are
three statements that print.

333
00:15:04,950 --> 00:15:08,340
There is, stored,
but we never used

334
00:15:08,340 --> 00:15:09,950
a function called print lyrics.

335
00:15:09,950 --> 00:15:13,500
And it's got two statements
in it, but we never used it.

336
00:15:13,500 --> 00:15:18,470
So the output of this
is hello yo seven.

337
00:15:18,470 --> 00:15:21,130
And that's because we
never actually invoked it.

338
00:15:21,130 --> 00:15:23,560
We had to say print
lyrics parentheses

339
00:15:23,560 --> 00:15:26,770
or whatever to cause
it to call this.

340
00:15:26,770 --> 00:15:30,320
OK, that's just to emphasize
that as it looks at it,

341
00:15:30,320 --> 00:15:34,000
it does not execute these lines.

342
00:15:34,000 --> 00:15:36,730
So once we defined
a function, once we

343
00:15:36,730 --> 00:15:40,730
have given it a name, given
it code that is part of it,

344
00:15:40,730 --> 00:15:44,500
then we can invoke or call
it as many times as we like.

345
00:15:44,500 --> 00:15:48,030
So now our little example works
a little better if we actually

346
00:15:48,030 --> 00:15:48,900
call our function.

347
00:15:48,900 --> 00:15:51,101

348
00:15:51,101 --> 00:15:53,600
Python really doesn't care if
you don't call your functions.

349
00:15:53,600 --> 00:15:56,750
Like, you told me to make one,
I made one, you didn't use it,

350
00:15:56,750 --> 00:15:57,830
there you go.

351
00:15:57,830 --> 00:15:59,750
But if you look at this one now.

352
00:15:59,750 --> 00:16:01,830
So here we go.

353
00:16:01,830 --> 00:16:06,320
X equals 5 print hello,
outcomes hello, define.

354
00:16:06,320 --> 00:16:07,210
Nothing happens here.

355
00:16:07,210 --> 00:16:10,580
Nothing happens here
it's just remembering.

356
00:16:10,580 --> 00:16:12,820
OK then it says print go.

357
00:16:12,820 --> 00:16:14,960
Then it calls the
function print lyrics,

358
00:16:14,960 --> 00:16:17,050
which sort of stops us here.

359
00:16:17,050 --> 00:16:18,630
Runs these two lines of code.

360
00:16:18,630 --> 00:16:20,730
So out comes that and that.

361
00:16:20,730 --> 00:16:23,820
Then it sort of finishes
this and it comes back,

362
00:16:23,820 --> 00:16:24,810
x equals x plus 2.

363
00:16:24,810 --> 00:16:26,640
Then it prints x.

364
00:16:26,640 --> 00:16:29,630
That must mean x is 7,
and so out that comes.

365
00:16:29,630 --> 00:16:35,580
And so, again it's on
the first time through --

366
00:16:35,580 --> 00:16:39,230
go back go back go back --
on the first time through,

367
00:16:39,230 --> 00:16:40,440
it doesn't print.

368
00:16:40,440 --> 00:16:42,646
But then when it
hits this, it prints.

369
00:16:42,646 --> 00:16:44,520
You could say print
lyrics several more times

370
00:16:44,520 --> 00:16:46,740
and it would run this
as many times as it did,

371
00:16:46,740 --> 00:16:49,180
and if it needed to as
many times as you want,

372
00:16:49,180 --> 00:16:50,650
and it would make
output for you.

373
00:16:50,650 --> 00:16:52,470
So you can invoke.

374
00:16:52,470 --> 00:16:56,330
This is the definition
-- let's clear this --

375
00:16:56,330 --> 00:17:03,980
this is the definition,
this is the call or invoke.

376
00:17:03,980 --> 00:17:07,520
So we're invoking the function,
we're calling the function,

377
00:17:07,520 --> 00:17:09,690
were causing the
function to execute.

378
00:17:09,690 --> 00:17:11,750
Here we are just
causing the function

379
00:17:11,750 --> 00:17:15,820
to be looked at and defined,
but not actually executed.

380
00:17:15,820 --> 00:17:17,440
I hope that's clear.

381
00:17:17,440 --> 00:17:23,450
Now, when we pass data into
a function, and functions

382
00:17:23,450 --> 00:17:26,359
they don't take data are not
as useful as they could be.

383
00:17:26,359 --> 00:17:28,020
There's plenty of
things that do,

384
00:17:28,020 --> 00:17:29,760
times that you build a
function it doesn't take data.

385
00:17:29,760 --> 00:17:31,200
But the most
interesting functions

386
00:17:31,200 --> 00:17:33,710
are the ones that you could
hand them something to work on

387
00:17:33,710 --> 00:17:36,740
and they can do their work and
then come back with whatever.

388
00:17:36,740 --> 00:17:39,660
So this Max function is
a good example of this.

389
00:17:39,660 --> 00:17:42,860
One that's taking an
argument, we call the things

390
00:17:42,860 --> 00:17:44,350
in between the parentheses.

391
00:17:44,350 --> 00:17:46,380
When we're invoking
the function,

392
00:17:46,380 --> 00:17:50,720
we call the things in between
the parentheses arguments.

393
00:17:50,720 --> 00:17:52,720
So that's passing
into the function,

394
00:17:52,720 --> 00:17:55,099
feeding data into the function.

395
00:17:55,099 --> 00:17:56,390
So we put arguments in between.

396
00:17:56,390 --> 00:17:59,010

397
00:17:59,010 --> 00:18:03,020
So for example here we
have a little program

398
00:18:03,020 --> 00:18:08,657
that, it's a
function named greet.

399
00:18:08,657 --> 00:18:10,490
And now we are going
to define this function

400
00:18:10,490 --> 00:18:12,270
and we're going to
say, you know what?

401
00:18:12,270 --> 00:18:14,180
I would like to
take a parameter.

402
00:18:14,180 --> 00:18:15,830
Let's take a parameter.

403
00:18:15,830 --> 00:18:17,814
Let's have one
parameter come in.

404
00:18:17,814 --> 00:18:19,980
And we need kind of a
placeholder for that parameter

405
00:18:19,980 --> 00:18:22,770
so within the function
we're going to use lang.

406
00:18:22,770 --> 00:18:24,680
Now this isn't actually
a real variable.

407
00:18:24,680 --> 00:18:28,140
It's kind of like a, it's
a placeholder variable.

408
00:18:28,140 --> 00:18:30,560
So this first
parameter, whatever

409
00:18:30,560 --> 00:18:33,000
it is, when it's called,
is going to be lang.

410
00:18:33,000 --> 00:18:35,970
And so if that first
parameter is equal to es

411
00:18:35,970 --> 00:18:38,730
we're going to print hola.

412
00:18:38,730 --> 00:18:42,740
And if, else if it's equal
to fr we'll print bonjour.

413
00:18:42,740 --> 00:18:44,490
And otherwise will print hello.

414
00:18:44,490 --> 00:18:47,150
So there's apparently three
languages in the world;

415
00:18:47,150 --> 00:18:48,940
Spanish, French, and English.

416
00:18:48,940 --> 00:18:51,740
And if it's not Spanish or
French then it must be English.

417
00:18:51,740 --> 00:18:54,380
But I have keep
this kind of small

418
00:18:54,380 --> 00:18:56,330
so my screen
doesn't get too big.

419
00:18:56,330 --> 00:18:58,362
So this is again
just the definition

420
00:18:58,362 --> 00:19:00,320
and if you type this into
the interactive thing

421
00:19:00,320 --> 00:19:02,160
it gives this dot
dot dot product.

422
00:19:02,160 --> 00:19:04,100
And so we now have this
thing called greet.

423
00:19:04,100 --> 00:19:08,210
And now we've extended Python to
add our own function to Python.

424
00:19:08,210 --> 00:19:11,000
And now we can say greet en.

425
00:19:11,000 --> 00:19:15,530
And so it runs this code,
except that en is lang.

426
00:19:15,530 --> 00:19:18,670
And so that comes and
then it prints hello.

427
00:19:18,670 --> 00:19:19,970
So out comes hello.

428
00:19:19,970 --> 00:19:23,430
Now later we can say oh I
would like to do a greeting,

429
00:19:23,430 --> 00:19:25,780
but this time I'm
going to pass es as it.

430
00:19:25,780 --> 00:19:30,720
So lang becomes, for this
execution, es and then

431
00:19:30,720 --> 00:19:32,270
it prints out hola.

432
00:19:32,270 --> 00:19:36,530
And then the next
execution lang is fr.

433
00:19:36,530 --> 00:19:40,070
So it executes this three
times, but lang is different

434
00:19:40,070 --> 00:19:44,307
each time because we passed in
different parameters each time.

435
00:19:44,307 --> 00:19:46,390
So that's how we can kind
of right general purpose

436
00:19:46,390 --> 00:19:49,090
code inside the
function and then

437
00:19:49,090 --> 00:19:53,310
reuse that general purpose
code in different ways.

438
00:19:53,310 --> 00:19:55,410
A real powerful
powerful mechanism the

439
00:19:55,410 --> 00:19:57,350
makes functions far more useful.

440
00:19:57,350 --> 00:20:00,070

441
00:20:00,070 --> 00:20:05,310
Now functions don't necessarily
just have to do stuff.

442
00:20:05,310 --> 00:20:07,020
Real powerful
mechanism in a function

443
00:20:07,020 --> 00:20:08,420
is what we call a return value.

444
00:20:08,420 --> 00:20:11,280

445
00:20:11,280 --> 00:20:13,040
So a function can
take its arguments,

446
00:20:13,040 --> 00:20:14,890
do some work we've seen that.

447
00:20:14,890 --> 00:20:17,730
And then, it can return a value.

448
00:20:17,730 --> 00:20:20,020
And the key to the
return value is

449
00:20:20,020 --> 00:20:22,850
when we call the function
like we were calling max,

450
00:20:22,850 --> 00:20:26,580
it gives us back some
value like the little w.

451
00:20:26,580 --> 00:20:29,920
So here we're going to
make a function called

452
00:20:29,920 --> 00:20:32,520
greet that takes no parameters.

453
00:20:32,520 --> 00:20:33,670
Don't take parameters.

454
00:20:33,670 --> 00:20:35,210
But it has another keyword.

455
00:20:35,210 --> 00:20:38,990
It's another reserved
word in Python

456
00:20:38,990 --> 00:20:43,260
and whatever we put on
this return statement

457
00:20:43,260 --> 00:20:47,240
shows up as the replacement
in this expression.

458
00:20:47,240 --> 00:20:50,470
So whatever greet
is, it runs greet,

459
00:20:50,470 --> 00:20:53,350
and then the return is
kind of a residual value.

460
00:20:53,350 --> 00:20:56,040
So if we say print
greet, Glenn and it

461
00:20:56,040 --> 00:20:57,870
says hello, Glenn
because the return

462
00:20:57,870 --> 00:21:01,060
value for the greet function
is the string hello.

463
00:21:01,060 --> 00:21:04,990
And if we say greet, Sally
it says hello, Sally.

464
00:21:04,990 --> 00:21:08,720
And so it runs the code twice;
and the return function,

465
00:21:08,720 --> 00:21:11,800
return value has been
put in here instead.

466
00:21:11,800 --> 00:21:14,050
And so the hello came
there and hello came there.

467
00:21:14,050 --> 00:21:15,530
So we get the two lines.

468
00:21:15,530 --> 00:21:18,590
So return is a statement
that both terminates

469
00:21:18,590 --> 00:21:22,760
the execution of the function
and defines the value of what

470
00:21:22,760 --> 00:21:26,270
will be replaced when the
function call comes back

471
00:21:26,270 --> 00:21:29,900
in the line that
function was called from.

472
00:21:29,900 --> 00:21:35,190
So, here is a little smarter
version of our greet function.

473
00:21:35,190 --> 00:21:38,180
It's very similar, it's
still called greet still.

474
00:21:38,180 --> 00:21:40,350
It takes lang as a parameter.

475
00:21:40,350 --> 00:21:42,820
And if the language
is the es then it

476
00:21:42,820 --> 00:21:44,470
returns the string hola.

477
00:21:44,470 --> 00:21:46,800
If the language is French
it returns bonjour.

478
00:21:46,800 --> 00:21:47,925
Otherwise it returns hello.

479
00:21:47,925 --> 00:21:49,508
So we're not actually
doing the print.

480
00:21:49,508 --> 00:21:51,560
If you go back another
slides we are printing

481
00:21:51,560 --> 00:21:54,650
but now we're just
returning a string.

482
00:21:54,650 --> 00:21:59,900
OK so now I can call
print greet and pass

483
00:21:59,900 --> 00:22:04,090
en in so then that runs the
code once with lang equal to en

484
00:22:04,090 --> 00:22:07,010
and I get back hello
and then comma blank.

485
00:22:07,010 --> 00:22:09,950
Then I call it again
and I pass es in,

486
00:22:09,950 --> 00:22:12,670
and then that time it
returns the return value here

487
00:22:12,670 --> 00:22:15,120
becomes hola, a string hola.

488
00:22:15,120 --> 00:22:16,440
Hola, Sally.

489
00:22:16,440 --> 00:22:18,110
And then Michael.

490
00:22:18,110 --> 00:22:19,860
I pass in one more time.

491
00:22:19,860 --> 00:22:26,030
Lang now is fr, the string
fr, and so it returns bonjour.

492
00:22:26,030 --> 00:22:29,330
So the residual
is here is bonjour

493
00:22:29,330 --> 00:22:32,742
and so out comes
bonjour, Michael.

494
00:22:32,742 --> 00:22:33,950
There's a lot to this, right?

495
00:22:33,950 --> 00:22:37,520
Passing stuff in , you have this
kind of placeholder variable,

496
00:22:37,520 --> 00:22:41,400
and you have this return that
sort of appears where it was

497
00:22:41,400 --> 00:22:42,120
called from.

498
00:22:42,120 --> 00:22:44,600
It goes in, does its
work, it comes back,

499
00:22:44,600 --> 00:22:47,460
and there's sort of this
residual value that sits here.

500
00:22:47,460 --> 00:22:49,810
You don't have to have
a return in a function,

501
00:22:49,810 --> 00:22:52,320
but if you want to do
something with a value

502
00:22:52,320 --> 00:22:55,140
then you have to have a
return in the function.

503
00:22:55,140 --> 00:22:59,520
We call the functions that
produce values fruitful,

504
00:22:59,520 --> 00:23:03,370
and the other ones
are called void.

505
00:23:03,370 --> 00:23:05,570
So that's a good name for them.

506
00:23:05,570 --> 00:23:07,830
So, to review sort
of this arguments

507
00:23:07,830 --> 00:23:09,940
parameters and
results, if we look

508
00:23:09,940 --> 00:23:11,730
at max, the original
thing where it's

509
00:23:11,730 --> 00:23:15,990
looking for the largest,
lexicographically

510
00:23:15,990 --> 00:23:19,340
largest letter, it
looks: hello, world

511
00:23:19,340 --> 00:23:22,060
is the argument
that's passed in.

512
00:23:22,060 --> 00:23:23,910
We have this sort
of formal parameter

513
00:23:23,910 --> 00:23:26,180
here called imp, which is
not really variable it just

514
00:23:26,180 --> 00:23:30,220
happens to refer to whatever
is the first argument

515
00:23:30,220 --> 00:23:32,260
in any particular call.

516
00:23:32,260 --> 00:23:34,520
And that does it's little
thing and runs loops

517
00:23:34,520 --> 00:23:39,100
and does all these things, and
at some point it returns w.

518
00:23:39,100 --> 00:23:42,220
So that the thing that comes
out when the function quits

519
00:23:42,220 --> 00:23:44,290
that becomes the
replacement value

520
00:23:44,290 --> 00:23:47,010
here is a lowercase w string.

521
00:23:47,010 --> 00:23:49,590
And then that is the
w goes over into big.

522
00:23:49,590 --> 00:23:54,900
So the return is what
defines what comes back here.

523
00:23:54,900 --> 00:23:57,070
Because you think of this
as; it's looking at this,

524
00:23:57,070 --> 00:24:00,920
it suspends for the
moment, it runs this code,

525
00:24:00,920 --> 00:24:03,740
its holding itself
here running this code

526
00:24:03,740 --> 00:24:06,184
and then it comes back to here.

527
00:24:06,184 --> 00:24:07,170
OK?

528
00:24:07,170 --> 00:24:11,250
And the return value is
what defines coming back.

529
00:24:11,250 --> 00:24:15,790
So, of course you can have
more than one parameter

530
00:24:15,790 --> 00:24:17,600
and they are in order.

531
00:24:17,600 --> 00:24:20,420
So here we have an a and a b.

532
00:24:20,420 --> 00:24:22,440
The name of these things
doesn't really matter.

533
00:24:22,440 --> 00:24:25,970
They're just relevant inside
of the function definition.

534
00:24:25,970 --> 00:24:28,190
So we are going to add
two numbers together

535
00:24:28,190 --> 00:24:31,860
by taking a plus b and
then returning the sum.

536
00:24:31,860 --> 00:24:34,760
The added variable's just
kind of local to this function

537
00:24:34,760 --> 00:24:39,270
and now we can say addtwo(3,5)
and then this will come back

538
00:24:39,270 --> 00:24:41,380
as eight and then eight
will get assigned into x,

539
00:24:41,380 --> 00:24:43,600
and so that'll print out eight.

540
00:24:43,600 --> 00:24:45,750
And so you can have as
many of these as you want,

541
00:24:45,750 --> 00:24:47,230
and the order
matters and there's

542
00:24:47,230 --> 00:24:49,240
a one to one correspondence.

543
00:24:49,240 --> 00:24:52,340
Three goes to a and five goes
to b when the thing is called,

544
00:24:52,340 --> 00:24:56,460
and then the return
value again comes back.

545
00:24:56,460 --> 00:24:57,400
OK?

546
00:24:57,400 --> 00:25:01,030
So, that's sort of arguments.

547
00:25:01,030 --> 00:25:03,780
And like I said,
not all functions

548
00:25:03,780 --> 00:25:04,940
have to return values.

549
00:25:04,940 --> 00:25:07,970
We call them void functions
when they don't return anything.

550
00:25:07,970 --> 00:25:12,580
It's totally fine for
that to be the case.

551
00:25:12,580 --> 00:25:15,850
So at this point you might be
thinking to yourself, OK great.

552
00:25:15,850 --> 00:25:18,320
I still don't quite get
why to use functions.

553
00:25:18,320 --> 00:25:21,800
In reality, in the
first 10, 11 chapters

554
00:25:21,800 --> 00:25:24,750
of this book other than
using lots of functions,

555
00:25:24,750 --> 00:25:28,525
we're not really going to spend
a lot of time making functions.

556
00:25:28,525 --> 00:25:31,150
Because most of our programs are
going to kind of be that long.

557
00:25:31,150 --> 00:25:33,660
And we're not going to do a
lot of reuse in the program.

558
00:25:33,660 --> 00:25:39,030
And there'll be a time when your
programs become complex enough,

559
00:25:39,030 --> 00:25:41,390
that you'll be like, oh
thank heaven for functions.

560
00:25:41,390 --> 00:25:43,960
I think it's premature to
say you must use functions,

561
00:25:43,960 --> 00:25:45,880
even though there are
some exercises that

562
00:25:45,880 --> 00:25:47,870
just say hey do this
with a function,

563
00:25:47,870 --> 00:25:50,900
just so you kind of get the
understanding of a function.

564
00:25:50,900 --> 00:25:54,900
You will find soon enough,
as your programs grow,

565
00:25:54,900 --> 00:25:56,990
you'll go like oh I keep
doing the same thing over

566
00:25:56,990 --> 00:25:57,730
and over again.

567
00:25:57,730 --> 00:25:59,188
Let me pull that
up into a function

568
00:25:59,188 --> 00:26:01,450
and pass the parameter
in, have a return value,

569
00:26:01,450 --> 00:26:02,470
and away you go.

570
00:26:02,470 --> 00:26:04,742
Or you might find that you're
moving from one program

571
00:26:04,742 --> 00:26:06,450
to another and you
have this common thing

572
00:26:06,450 --> 00:26:08,533
that you want to do so you
make yourself a library

573
00:26:08,533 --> 00:26:09,520
that you drag along.

574
00:26:09,520 --> 00:26:12,090
And we will do
lots of libraries.

575
00:26:12,090 --> 00:26:15,700
The book in the second half does
lots and lots of library stuff

576
00:26:15,700 --> 00:26:18,057
doing things like parsing
XML, and this, that,

577
00:26:18,057 --> 00:26:18,890
and the other thing.

578
00:26:18,890 --> 00:26:23,670
So, don't feel like you
need to use functions

579
00:26:23,670 --> 00:26:26,710
on every assignment because
they're a are natural thing

580
00:26:26,710 --> 00:26:29,670
when the program
gets big enough.

581
00:26:29,670 --> 00:26:32,360
So, just kind of understand
them on a mechanical level,

582
00:26:32,360 --> 00:26:35,060
but it'll come to you
at the right time when

583
00:26:35,060 --> 00:26:38,050
it's time to start building
your own functions.

584
00:26:38,050 --> 00:26:40,890
So in this class we kind
of talked about functions.

585
00:26:40,890 --> 00:26:42,930
Just got you started,
talked about parameters,

586
00:26:42,930 --> 00:26:48,110
talked about built in functions,
talked about return values,

587
00:26:48,110 --> 00:26:50,270
the store and reuse pattern.

588
00:26:50,270 --> 00:26:54,380
So, the problems at the end
the chapter for this particular

589
00:26:54,380 --> 00:26:58,490
chapter are relatively
straightforward in that --

590
00:26:58,490 --> 00:27:01,650
like I said, we don't have
a real strong need to do

591
00:27:01,650 --> 00:27:04,260
functions yet in this
class because the programs

592
00:27:04,260 --> 00:27:08,210
aren't large enough, but
I just said OK take one

593
00:27:08,210 --> 00:27:12,480
of your previous assignments
and refactor the code so that

594
00:27:12,480 --> 00:27:15,760
at the top there's
a DEF, compute pay,

595
00:27:15,760 --> 00:27:18,370
and you put like the if
and whatever in here.

596
00:27:18,370 --> 00:27:20,690
And then later on
you do your code,

597
00:27:20,690 --> 00:27:22,270
and then you call compute pay.

598
00:27:22,270 --> 00:27:24,140
So you took code
that you already had,

599
00:27:24,140 --> 00:27:27,090
you move it up into a
function, and make a function.

600
00:27:27,090 --> 00:27:29,890
And I've also online got
sort of a sample of this,

601
00:27:29,890 --> 00:27:31,830
because it's a little complex.

602
00:27:31,830 --> 00:27:35,140
And so you should be able
to find on Python learn

603
00:27:35,140 --> 00:27:39,770
or on the course site; should
be able to find a good example

604
00:27:39,770 --> 00:27:43,860
because I really
want to get this.

605
00:27:43,860 --> 00:27:45,320
Like I said, there
will come a time

606
00:27:45,320 --> 00:27:47,770
when functions will make
the most sense to you.

607
00:27:47,770 --> 00:27:49,800
But coming up
next, of course, is

608
00:27:49,800 --> 00:27:51,917
chapter five and that's loops.

609
00:27:51,917 --> 00:27:53,500
And loops are going
to rock the house.

610
00:27:53,500 --> 00:27:57,960
So we really; that's our
fourth major pattern is loops.

611
00:27:57,960 --> 00:28:00,670
And I'm looking forward to it.

612
00:28:00,670 --> 00:28:03,940
So we'll see you at
the next lecture.