1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:04,860
Hello, and welcome to chapter
3 of Python for Informatics.

3
00:00:04,860 --> 00:00:06,990
Chapter 1, chapter
2-- now we're going

4
00:00:06,990 --> 00:00:08,880
to get to something
kind of program-y.

5
00:00:08,880 --> 00:00:13,800
I mean, assignment statements
and reserved words--

6
00:00:13,800 --> 00:00:15,590
that's just kind of gurgling.

7
00:00:15,590 --> 00:00:18,010
Now we're going to start
seeing composition.

8
00:00:18,010 --> 00:00:21,230
We're going to start seeing
that conditional execution gets

9
00:00:21,230 --> 00:00:23,545
us started sort of seeing
the power of computers, where

10
00:00:23,545 --> 00:00:25,450
you're starting
to make decisions.

11
00:00:25,450 --> 00:00:29,930
So as always, this lecture--
and audio, video, and slides

12
00:00:29,930 --> 00:00:33,270
are also available-- are
copyright Creative Commons

13
00:00:33,270 --> 00:00:34,810
attribution.

14
00:00:34,810 --> 00:00:39,680
So conditional steps are
steps that may or may not

15
00:00:39,680 --> 00:00:40,310
be executed.

16
00:00:40,310 --> 00:00:43,560
So here's a bit of code.

17
00:00:43,560 --> 00:00:45,390
And I draw these pictures.

18
00:00:45,390 --> 00:00:48,100
I won't draw too many of these
pictures on the left-hand side.

19
00:00:48,100 --> 00:00:50,790
If you've taken a programming
class, you may have seen these.

20
00:00:50,790 --> 00:00:52,990
They're sometimes
called flow charts.

21
00:00:52,990 --> 00:00:55,690
Sometimes people really
think these are important.

22
00:00:55,690 --> 00:00:58,950
I don't think they're all that
important for understanding.

23
00:00:58,950 --> 00:01:01,160
The Python code is here
on the right-hand side.

24
00:01:01,160 --> 00:01:03,480
And there's pictures
on the left-hand side.

25
00:01:03,480 --> 00:01:06,760
And the reality
is that this may.

26
00:01:06,760 --> 00:01:10,300
Initially, make more sense
cognitively to you than this.

27
00:01:10,300 --> 00:01:13,710
But this part on the right-hand
side is what's important.

28
00:01:13,710 --> 00:01:15,840
I like to call these road
maps, so you can sort of

29
00:01:15,840 --> 00:01:19,610
trace where the code is going
by driving down a little road.

30
00:01:19,610 --> 00:01:22,490
That's kind of something
that you do once or twice.

31
00:01:22,490 --> 00:01:24,930
And then pretty soon, you
just start reading the code.

32
00:01:24,930 --> 00:01:26,763
So I'm going to start
on the right-hand side

33
00:01:26,763 --> 00:01:28,750
here and just walk
through the code.

34
00:01:28,750 --> 00:01:30,910
Remember, code
operates in sequence.

35
00:01:30,910 --> 00:01:36,657
Well, there is a if, which
is a special, reserved word.

36
00:01:36,657 --> 00:01:38,990
It's one of those things that
you can't-- you can't name

37
00:01:38,990 --> 00:01:41,150
a variable if.

38
00:01:41,150 --> 00:01:45,320
And it is our
indication to Python

39
00:01:45,320 --> 00:01:47,670
that the next statement
that we're going to do

40
00:01:47,670 --> 00:01:50,240
may or may not be executed-- if.

41
00:01:50,240 --> 00:01:52,080
And the thing that
comes on the same line

42
00:01:52,080 --> 00:01:57,120
as the if, up to including the
little colon is a question.

43
00:01:57,120 --> 00:01:58,950
This is a question.

44
00:01:58,950 --> 00:02:01,020
You're asking a question.

45
00:02:01,020 --> 00:02:05,320
So an assignment statement is
moving a value into a variable.

46
00:02:05,320 --> 00:02:08,120
And an if statement
is asking a question.

47
00:02:08,120 --> 00:02:10,440
In this case, we're asking
a question about a variable.

48
00:02:10,440 --> 00:02:13,700
So always think, when
you're sort of here,

49
00:02:13,700 --> 00:02:16,170
that this is a
question to be asked.

50
00:02:16,170 --> 00:02:18,890
And you'll notice when I'm
doing the same thing over here

51
00:02:18,890 --> 00:02:20,120
I put a question mark there.

52
00:02:20,120 --> 00:02:22,780
Is x less than 10, yes or no?

53
00:02:22,780 --> 00:02:24,740
It's a question that
has a yes or no.

54
00:02:24,740 --> 00:02:27,840
And so the way this
works is this statement

55
00:02:27,840 --> 00:02:31,010
that's indented after
the if is either

56
00:02:31,010 --> 00:02:34,450
executed or not executed, based
on the result of that question.

57
00:02:34,450 --> 00:02:38,090
So the way to sort of read
this in English is set x to 5.

58
00:02:38,090 --> 00:02:42,624
If x is less than 10, which
it is, because x is 5, then

59
00:02:42,624 --> 00:02:43,790
we're going to execute this.

60
00:02:43,790 --> 00:02:45,759
So print "Smaller" comes out.

61
00:02:45,759 --> 00:02:47,550
And then we come back
out, and we continue.

62
00:02:47,550 --> 00:02:50,460
Say, OK, now I have another
if statement and then a bit

63
00:02:50,460 --> 00:02:52,310
of a block of indented code.

64
00:02:52,310 --> 00:02:55,770
If x < 20-- that's the question.

65
00:02:55,770 --> 00:02:59,430
The answer to that is no, and
so it does not run that line,

66
00:02:59,430 --> 00:03:00,960
and sort runs finis.

67
00:03:00,960 --> 00:03:05,080
So the print out of this program
is smaller, followed by finis.

68
00:03:05,080 --> 00:03:08,910
What happens is this
line never executes,

69
00:03:08,910 --> 00:03:11,345
because the answer to
this question is false.

70
00:03:11,345 --> 00:03:15,010

71
00:03:15,010 --> 00:03:16,625
So let's go through
that a faster.

72
00:03:16,625 --> 00:03:17,970
Set x to 5.

73
00:03:17,970 --> 00:03:20,960
If x < 10, print "Smaller".

74
00:03:20,960 --> 00:03:24,460
Then, if x > 20, which
it's not, skip that,

75
00:03:24,460 --> 00:03:26,180
and then print "Finis".

76
00:03:26,180 --> 00:03:28,170
That's the short version of it.

77
00:03:28,170 --> 00:03:30,730
Conditional steps-- this
step is conditional.

78
00:03:30,730 --> 00:03:32,030
This step is conditional.

79
00:03:32,030 --> 00:03:34,400
They may or may not
be executed, based

80
00:03:34,400 --> 00:03:36,160
on the result of the question.

81
00:03:36,160 --> 00:03:38,810
Now, if we're thinking
of this as like a GPS

82
00:03:38,810 --> 00:03:41,820
roadmap or something, we can
look at this right-hand side.

83
00:03:41,820 --> 00:03:44,710
So the CPU comes
roaring down here.

84
00:03:44,710 --> 00:03:45,580
x equals 5.

85
00:03:45,580 --> 00:03:46,800
OK, I'll run that.

86
00:03:46,800 --> 00:03:49,710
Then it's faced with a choice.

87
00:03:49,710 --> 00:03:52,230
Is x less than 10, yes or no?

88
00:03:52,230 --> 00:03:55,690
If it is yes, and it
is, I will go this way.

89
00:03:55,690 --> 00:03:57,590
If it was no, I
would go that way.

90
00:03:57,590 --> 00:03:58,742
So if it's yes, I go here.

91
00:03:58,742 --> 00:04:00,950
And I run this little thing
and print smaller, great.

92
00:04:00,950 --> 00:04:02,250
And I follow the little road.

93
00:04:02,250 --> 00:04:04,060
And now the road
takes me to here.

94
00:04:04,060 --> 00:04:05,870
And it's asking
another question.

95
00:04:05,870 --> 00:04:07,470
Is x greater than 20?

96
00:04:07,470 --> 00:04:09,240
This time the answer is no.

97
00:04:09,240 --> 00:04:11,480
So I'd come down here, right?

98
00:04:11,480 --> 00:04:14,950
And so this bit of
code is never executed.

99
00:04:14,950 --> 00:04:18,050
Now, this is a very
simple example.

100
00:04:18,050 --> 00:04:20,600
But you get the basic idea.

101
00:04:20,600 --> 00:04:23,410
So that's conditional execution.

102
00:04:23,410 --> 00:04:26,000
Now, there's a number
of conditional operators

103
00:04:26,000 --> 00:04:28,860
that we want to use, just
like we had multiplication,

104
00:04:28,860 --> 00:04:30,160
division.

105
00:04:30,160 --> 00:04:33,239
Some of them are
pretty intuitive.

106
00:04:33,239 --> 00:04:35,280
And the others you just
kind of have to memorize.

107
00:04:35,280 --> 00:04:38,300
Like less than and greater
than make a lot of sense.

108
00:04:38,300 --> 00:04:40,819
The one that
probably-- the easy,

109
00:04:40,819 --> 00:04:43,110
like less than or equal to
or greater than or equal to,

110
00:04:43,110 --> 00:04:44,700
those kind of makes sense to.

111
00:04:44,700 --> 00:04:49,260
They're <=, just because we
don't have a less than or equal

112
00:04:49,260 --> 00:04:52,140
to sign on a symbol or a
greater than or equal to sign,

113
00:04:52,140 --> 00:04:54,450
which will we would
use in mathematics.

114
00:04:54,450 --> 00:04:57,700
Equality-- asking the question
of whether something is equal

115
00:04:57,700 --> 00:05:00,430
to something else
or not-- is ==.

116
00:05:00,430 --> 00:05:04,240
And that's because we're already
single equals as assignment.

117
00:05:04,240 --> 00:05:08,510
So when we say x=3, that is an
assignment and sticks a value

118
00:05:08,510 --> 00:05:10,090
into x.

119
00:05:10,090 --> 00:05:14,059
This is the question
is x equal to.

120
00:05:14,059 --> 00:05:15,600
If I was building
a language, I would

121
00:05:15,600 --> 00:05:18,830
make it be equal question
mark, or something like that.

122
00:05:18,830 --> 00:05:19,980
It'd be like, huh?

123
00:05:19,980 --> 00:05:20,940
Is it equal?

124
00:05:20,940 --> 00:05:23,370
Kind of a question mark,
but that's not what we do.

125
00:05:23,370 --> 00:05:24,350
I didn't invent this.

126
00:05:24,350 --> 00:05:29,970
So double equals is the question
is something equal to another.

127
00:05:29,970 --> 00:05:31,700
A single equals
changes something.

128
00:05:31,700 --> 00:05:35,180
x=5 changes x.

129
00:05:35,180 --> 00:05:38,760
OK, and then not
equal-- exclamation

130
00:05:38,760 --> 00:05:41,400
is commonly used to mean
not in computer context.

131
00:05:41,400 --> 00:05:43,740
So if something is not
equal to something,

132
00:05:43,740 --> 00:05:46,227
it is exclamation !=.

133
00:05:46,227 --> 00:05:47,185
Here are some examples.

134
00:05:47,185 --> 00:05:50,480

135
00:05:50,480 --> 00:05:52,760
Just kind of running
through them,

136
00:05:52,760 --> 00:05:55,630
they all turn out to be
true because I set x to 5.

137
00:05:55,630 --> 00:05:58,540
If x = 5, print "Equals 4."

138
00:05:58,540 --> 00:06:02,110
I'm out here if x > 4, which is
true, print "Greater than 4."

139
00:06:02,110 --> 00:06:07,590
If x >= 5, if x < 6,
print "Less than 6."

140
00:06:07,590 --> 00:06:11,500
Now, there are two sort of
syntaxes to the if statement.

141
00:06:11,500 --> 00:06:14,640
One is where the if statement
is down here on a separate line,

142
00:06:14,640 --> 00:06:16,140
and it's indented.

143
00:06:16,140 --> 00:06:18,490
And the other is where
there's a single line,

144
00:06:18,490 --> 00:06:20,020
and it's right on the same line.

145
00:06:20,020 --> 00:06:23,360
If x < 6, print "Less than 6."

146
00:06:23,360 --> 00:06:26,330
This is true, so this
whole thing executes.

147
00:06:26,330 --> 00:06:29,302
Then it continues
down, if x <= 5,

148
00:06:29,302 --> 00:06:30,510
print "Less than or Equal 5."

149
00:06:30,510 --> 00:06:35,270
If x != 6, which is true because
it's 5, then "Not equal to 6 ."

150
00:06:35,270 --> 00:06:38,020
So all those will
turn out to be true,

151
00:06:38,020 --> 00:06:42,320
and all those will execute,
and so the tricky bit here

152
00:06:42,320 --> 00:06:48,730
is seeing this syntax for an if
statement, where it's all one

153
00:06:48,730 --> 00:06:52,040
line, and this syntax where you
end the first line with a colon

154
00:06:52,040 --> 00:06:54,410
and then indent the second line.

155
00:06:54,410 --> 00:06:55,660
This you can only do one line.

156
00:06:55,660 --> 00:06:57,770
We will soon see that you
can put more than one line an

157
00:06:57,770 --> 00:06:58,743
the indented block.

158
00:06:58,743 --> 00:07:03,410

159
00:07:03,410 --> 00:07:06,850
Here we have more than one
line in the indented block.

160
00:07:06,850 --> 00:07:09,100
These are called
one-way decisions.

161
00:07:09,100 --> 00:07:11,300
And so we say x = 5.

162
00:07:11,300 --> 00:07:12,550
We print out Before 5.

163
00:07:12,550 --> 00:07:13,980
So that prints out.

164
00:07:13,980 --> 00:07:17,560
If x == 5, remember the double
equals is the question mark

165
00:07:17,560 --> 00:07:20,700
version of equality--
single equals assignment--

166
00:07:20,700 --> 00:07:21,870
it says yes.

167
00:07:21,870 --> 00:07:22,940
So we indent.

168
00:07:22,940 --> 00:07:24,984
And the convention is
to indent four spaces.

169
00:07:24,984 --> 00:07:26,400
Although it doesn't
really matter,

170
00:07:26,400 --> 00:07:27,720
as long as you're consistent.

171
00:07:27,720 --> 00:07:29,470
Then it's going to run
all three of those.

172
00:07:29,470 --> 00:07:31,560
Is 5 still 5, Third 5.

173
00:07:31,560 --> 00:07:33,200
These lines all come out.

174
00:07:33,200 --> 00:07:35,440
And then it comes
out and prints.

175
00:07:35,440 --> 00:07:37,870
And the de-indenting--
the fact that this print

176
00:07:37,870 --> 00:07:40,569
has been moved to line
up with the if-- that's

177
00:07:40,569 --> 00:07:42,110
what indicates that
this little block

178
00:07:42,110 --> 00:07:47,590
of conditional executed
code is finished.

179
00:07:47,590 --> 00:07:49,150
So then it prints
out "Afterwards 5".

180
00:07:49,150 --> 00:07:52,240
Comes some more Before 6.

181
00:07:52,240 --> 00:07:54,960
Then it asks another
question-- if x == 6.

182
00:07:54,960 --> 00:07:58,040
Again, that's the question
mark version of it.

183
00:07:58,040 --> 00:08:01,000
And if this is false
now, because x happens

184
00:08:01,000 --> 00:08:03,150
to be 5, so the answer
to this expression--

185
00:08:03,150 --> 00:08:05,980
the logical
expression-- is false,

186
00:08:05,980 --> 00:08:07,990
then it skips all of
the indented bits.

187
00:08:07,990 --> 00:08:10,710
So none of this executes.

188
00:08:10,710 --> 00:08:13,460
So since it's false, it skips
all of the indented bit.

189
00:08:13,460 --> 00:08:16,370
But then this print lines up,
and so then it picks back up

190
00:08:16,370 --> 00:08:18,010
with Afterwards 6.

191
00:08:18,010 --> 00:08:19,720
So we call this a
one-way decision,

192
00:08:19,720 --> 00:08:20,910
where you have the
question and then you

193
00:08:20,910 --> 00:08:22,368
have a couple of
things that you're

194
00:08:22,368 --> 00:08:24,040
going to do on this true thing.

195
00:08:24,040 --> 00:08:26,160
Or if it turns out
that you're false,

196
00:08:26,160 --> 00:08:30,070
you're going to skip
all those things.

197
00:08:30,070 --> 00:08:34,340
So Python is actually
one of the few languages

198
00:08:34,340 --> 00:08:39,700
that uses indentation as
syntactically significant.

199
00:08:39,700 --> 00:08:43,289
We like to indent code to
for ifs, and in a moment

200
00:08:43,289 --> 00:08:44,770
we'll learn about loops.

201
00:08:44,770 --> 00:08:48,440
We like to indent code as a
way to make sense of stuff.

202
00:08:48,440 --> 00:08:51,130
It makes it easier to read.

203
00:08:51,130 --> 00:08:53,040
You know if this thing's inside.

204
00:08:53,040 --> 00:08:54,830
And so you it's
really quite nice.

205
00:08:54,830 --> 00:08:56,760
And then we sort of
use it as a matching

206
00:08:56,760 --> 00:08:58,340
to help us
cognitively understand

207
00:08:58,340 --> 00:09:02,636
what's inside of a program.

208
00:09:02,636 --> 00:09:04,510
But in Python, it's
really, really important.

209
00:09:04,510 --> 00:09:07,390

210
00:09:07,390 --> 00:09:09,130
You have to think
of like when you

211
00:09:09,130 --> 00:09:10,910
are moving in you
mean something,

212
00:09:10,910 --> 00:09:13,280
and when you move back
out you mean something.

213
00:09:13,280 --> 00:09:15,390
So you can increase
the indent, which

214
00:09:15,390 --> 00:09:17,764
you do after an if statement
or any other statement that

215
00:09:17,764 --> 00:09:18,430
ends in a colon.

216
00:09:18,430 --> 00:09:21,670
You increase the indent,
and then when you're done,

217
00:09:21,670 --> 00:09:22,760
you decrease the indent.

218
00:09:22,760 --> 00:09:26,460
You maintain the indent,
sort of for sequential code.

219
00:09:26,460 --> 00:09:28,650
Blank lines and
comments are ignored.

220
00:09:28,650 --> 00:09:31,789
So you can have a blank line,
and the indentation just

221
00:09:31,789 --> 00:09:32,580
goes right past it.

222
00:09:32,580 --> 00:09:34,430
And the comments
don't affect it.

223
00:09:34,430 --> 00:09:38,730
And so while we're
here we'll interrupt us

224
00:09:38,730 --> 00:09:41,403
for a recommendation.

225
00:09:41,403 --> 00:09:44,140

226
00:09:44,140 --> 00:09:49,440
In your text editor, Notepad+,
TextEdit, or TextWrangler,

227
00:09:49,440 --> 00:09:54,240
or whatever you're using, it may
be set when you hit the tab key

228
00:09:54,240 --> 00:09:56,600
to move in four spaces.

229
00:09:56,600 --> 00:09:58,670
Sometimes you also might
move in four spaces

230
00:09:58,670 --> 00:10:01,170
by hitting space bar four times.

231
00:10:01,170 --> 00:10:03,520
Python will see
that as different.

232
00:10:03,520 --> 00:10:07,100
And it is possible in all
of these word processors

233
00:10:07,100 --> 00:10:11,180
to say, hey, don't actually
put tabs in my document.

234
00:10:11,180 --> 00:10:13,720
When I hit the tab,
put in four spaces.

235
00:10:13,720 --> 00:10:16,864
Then, whether you're hitting the
space bar or hitting the tab,

236
00:10:16,864 --> 00:10:19,280
at least you are putting the
same thing into your document

237
00:10:19,280 --> 00:10:22,730
and not freaking Python out.

238
00:10:22,730 --> 00:10:25,580
If you don't, you may
get indentation errors.

239
00:10:25,580 --> 00:10:29,190
Indentation errors are
syntax errors to Python.

240
00:10:29,190 --> 00:10:31,460
And what's really
frustrating is it

241
00:10:31,460 --> 00:10:33,140
looks good to you
in your text editor.

242
00:10:33,140 --> 00:10:36,020
You have an if, and the block
goes in, and it comes back out.

243
00:10:36,020 --> 00:10:38,810
But one of them is four spaces,
and one of them is a tab,

244
00:10:38,810 --> 00:10:40,530
then Python will yell at you.

245
00:10:40,530 --> 00:10:42,260
And this is really
frustrating, when

246
00:10:42,260 --> 00:10:45,090
Python yells at you about that.

247
00:10:45,090 --> 00:10:48,630
So what I'd like you to do
is go into your text editor--

248
00:10:48,630 --> 00:10:53,430
whatever it is-- into the
properties or the settings.

249
00:10:53,430 --> 00:10:58,770
And yours may be different,
but here is where

250
00:10:58,770 --> 00:11:03,300
you set this Auto-expand Tabs.

251
00:11:03,300 --> 00:11:05,850
That is on the Mac
in TextWrangler.

252
00:11:05,850 --> 00:11:09,620
And then in Notepad++ there
is Replace Tabs with Spaces.

253
00:11:09,620 --> 00:11:11,270
And that's underneath
preferences.

254
00:11:11,270 --> 00:11:12,580
So you have to find it.

255
00:11:12,580 --> 00:11:16,160
Stop right now and go
set this, so you're not

256
00:11:16,160 --> 00:11:18,830
going to make yourself crazy.

257
00:11:18,830 --> 00:11:21,172
OK, so this is kind
of a busy slide,

258
00:11:21,172 --> 00:11:22,630
but it gives you
the sense that you

259
00:11:22,630 --> 00:11:28,270
have to explicitly think about
indenting and de-indenting.

260
00:11:28,270 --> 00:11:30,330
And so I'm just going
to walk through this.

261
00:11:30,330 --> 00:11:33,910
So when you have
two lines lining up,

262
00:11:33,910 --> 00:11:36,290
that means they're going
to run sequentially.

263
00:11:36,290 --> 00:11:39,580
If you see an if, or later
here we'll see a for--

264
00:11:39,580 --> 00:11:44,470
we haven't talked about for
yet, but it's like if-- the fact

265
00:11:44,470 --> 00:11:46,610
that we go from this second
line to this third line

266
00:11:46,610 --> 00:11:48,360
and move the indent
in, we're actually

267
00:11:48,360 --> 00:11:51,270
creating a block that
has to do with this if.

268
00:11:51,270 --> 00:11:53,430
And you can also kind
of tell the if and the

269
00:11:53,430 --> 00:11:55,980
for end in a colon character.

270
00:11:55,980 --> 00:11:58,760
Now, we could pull
this print back out,

271
00:11:58,760 --> 00:12:02,440
but we want it to be part of the
if, so we maintain the indent.

272
00:12:02,440 --> 00:12:05,200
And then we're done with
the if by pulling out.

273
00:12:05,200 --> 00:12:08,390
So we line the p with
the i, and that means

274
00:12:08,390 --> 00:12:11,090
this is outside of the if.

275
00:12:11,090 --> 00:12:14,290
This for, which we haven't
learned about for yet,

276
00:12:14,290 --> 00:12:16,530
is another statement
that ends in colon.

277
00:12:16,530 --> 00:12:19,000
And afterwards,
you have to indent.

278
00:12:19,000 --> 00:12:21,130
Then you maintain the indent.

279
00:12:21,130 --> 00:12:22,220
Here's an if.

280
00:12:22,220 --> 00:12:25,060
But now we have an if,
and we're already in.

281
00:12:25,060 --> 00:12:28,540
But it ends in a colon,
so we go in farther.

282
00:12:28,540 --> 00:12:29,910
And now this is the block.

283
00:12:29,910 --> 00:12:32,660
Now, we come back
out, and we line

284
00:12:32,660 --> 00:12:35,670
up with that if right there.

285
00:12:35,670 --> 00:12:38,780
And now at the end
of this indent,

286
00:12:38,780 --> 00:12:41,170
this x here comes
all the way back out.

287
00:12:41,170 --> 00:12:42,280
So it lines up.

288
00:12:42,280 --> 00:12:43,780
The rest of these
are kind of weird,

289
00:12:43,780 --> 00:12:46,620
in that comments don't matter.

290
00:12:46,620 --> 00:12:48,280
Blank lines don't matter.

291
00:12:48,280 --> 00:12:50,670
And so it just is
sort of you have

292
00:12:50,670 --> 00:12:54,650
to get mentally get used to the
notion that these don't count.

293
00:12:54,650 --> 00:12:57,340
They can really,
cognitively mess you up.

294
00:12:57,340 --> 00:12:59,540
So these don't count.

295
00:12:59,540 --> 00:13:03,010
And now if I look through
it with the comments hidden,

296
00:13:03,010 --> 00:13:06,310
it starts in column
one, ignore, ignore.

297
00:13:06,310 --> 00:13:12,250
It goes in, stays in, ignore,
ignore, ignore, comes out.

298
00:13:12,250 --> 00:13:14,240
So it all makes sense.

299
00:13:14,240 --> 00:13:19,330
Those comments and blank lines
are just kind of confusion.

300
00:13:19,330 --> 00:13:23,980
So increasing and decreasing
indent has meaning in Python.

301
00:13:23,980 --> 00:13:26,370
We'll learn more
about this in a bit.

302
00:13:26,370 --> 00:13:28,620
Our programs won't get
this complex right away,

303
00:13:28,620 --> 00:13:31,600
but it's important to
think these indents aren't

304
00:13:31,600 --> 00:13:34,000
just pretty, they actually
are communicating something

305
00:13:34,000 --> 00:13:35,210
to Python.

306
00:13:35,210 --> 00:13:39,420
And what they're communicating
is basically what's in a block.

307
00:13:39,420 --> 00:13:41,060
And it shouldn't
take you very long

308
00:13:41,060 --> 00:13:43,950
when you start looking at
Python to sort of visualize

309
00:13:43,950 --> 00:13:45,280
these blocks.

310
00:13:45,280 --> 00:13:48,480
So here's a big
block, this block here

311
00:13:48,480 --> 00:13:50,630
that's got these three things.

312
00:13:50,630 --> 00:13:52,380
And then this is
a block as well.

313
00:13:52,380 --> 00:13:54,690
And you can kind of say,
well, here's an if statement.

314
00:13:54,690 --> 00:13:56,280
And then these are the
two statements that

315
00:13:56,280 --> 00:13:57,530
are part of that if statement.

316
00:13:57,530 --> 00:14:00,830
So mentally you kind of
make these block pictures.

317
00:14:00,830 --> 00:14:01,830
So here's another block.

318
00:14:01,830 --> 00:14:03,402
This is that for loop.

319
00:14:03,402 --> 00:14:05,360
This part's the indented
part, but then there's

320
00:14:05,360 --> 00:14:06,769
a block inside of the block.

321
00:14:06,769 --> 00:14:08,560
So you've got to start
seeing that as well.

322
00:14:08,560 --> 00:14:10,360
So this is a block
that has to do--

323
00:14:10,360 --> 00:14:15,450
this green block is the one
that has to do with the if.

324
00:14:15,450 --> 00:14:16,700
And then there's a block here.

325
00:14:16,700 --> 00:14:18,170
And then this is
a great big block,

326
00:14:18,170 --> 00:14:20,720
because this is where
it finally de-indents.

327
00:14:20,720 --> 00:14:22,480
So don't worry about it yet.

328
00:14:22,480 --> 00:14:25,470
But at some point, you're going
to start seeing this indenting

329
00:14:25,470 --> 00:14:30,430
and de-indenting as
defining blocks of code

330
00:14:30,430 --> 00:14:31,514
for various purposes.

331
00:14:31,514 --> 00:14:33,180
Now, we don't have
all the purposes yet,

332
00:14:33,180 --> 00:14:34,550
but we'll get there.

333
00:14:34,550 --> 00:14:39,860
So we saw in that previous
thing one block within a block.

334
00:14:39,860 --> 00:14:41,600
And we're going to do that.

335
00:14:41,600 --> 00:14:42,370
We can have ifs.

336
00:14:42,370 --> 00:14:44,980
We can have loops
that get indented.

337
00:14:44,980 --> 00:14:46,370
But then we can
indent even more.

338
00:14:46,370 --> 00:14:48,290
We call that nested,
where there is

339
00:14:48,290 --> 00:14:52,700
an indented area that's in an
area that's already indented.

340
00:14:52,700 --> 00:14:54,470
So here's a nested decision.

341
00:14:54,470 --> 00:14:56,380
And it might be easier
start on this side,

342
00:14:56,380 --> 00:15:01,030
where I'm going to have a first
choice is x > 1, yes or no?

343
00:15:01,030 --> 00:15:02,789
And if it's yes,
I'll do some work.

344
00:15:02,789 --> 00:15:04,580
And then I'm going to
ask another question,

345
00:15:04,580 --> 00:15:07,170
and if that's yes, then
I'm going to do this.

346
00:15:07,170 --> 00:15:09,250
Then I'll come all
the way back in.

347
00:15:09,250 --> 00:15:13,980
And the way we encode
this in Python is x = 42.

348
00:15:13,980 --> 00:15:16,460
If x > 1, it's true.

349
00:15:16,460 --> 00:15:18,810
So we continue
working in the indent.

350
00:15:18,810 --> 00:15:22,480
And now we say, oh, if x <
100, which is still true.

351
00:15:22,480 --> 00:15:23,610
So we go in farther.

352
00:15:23,610 --> 00:15:24,760
And we do this.

353
00:15:24,760 --> 00:15:26,080
And now we come out.

354
00:15:26,080 --> 00:15:27,580
We don't come out to here.

355
00:15:27,580 --> 00:15:29,730
We actually keep going
all the way to here.

356
00:15:29,730 --> 00:15:31,970
So that ends both blocks.

357
00:15:31,970 --> 00:15:34,970
And so if you sort of
think about this-- again,

358
00:15:34,970 --> 00:15:38,490
this is where I want you to
start seeing what's in a block

359
00:15:38,490 --> 00:15:41,410
of code, and what's
not in a block of code,

360
00:15:41,410 --> 00:15:45,650
and how the indents put
a boundary on the blocks

361
00:15:45,650 --> 00:15:51,000
of code-- the first thing you
should see is that purple part,

362
00:15:51,000 --> 00:15:52,910
the x < 100 print.

363
00:15:52,910 --> 00:15:54,030
That's kind of a box.

364
00:15:54,030 --> 00:15:57,680
And you can see the box on
the flow diagram, as well.

365
00:15:57,680 --> 00:15:59,070
The boxes are there.

366
00:15:59,070 --> 00:16:00,640
The boxes on the
flow diagram are

367
00:16:00,640 --> 00:16:03,475
places where there's one
entrance and one exit.

368
00:16:03,475 --> 00:16:08,670

369
00:16:08,670 --> 00:16:11,240
And then, there's also sort
of a larger box, right?

370
00:16:11,240 --> 00:16:14,020
There's this if box that
includes the smaller box.

371
00:16:14,020 --> 00:16:17,480
So there's this nesting,
which is boxes within boxes

372
00:16:17,480 --> 00:16:20,470
or indented areas
within indented areas.

373
00:16:20,470 --> 00:16:26,060

374
00:16:26,060 --> 00:16:28,480
Now, that was what we call
a one-way decision, where

375
00:16:28,480 --> 00:16:32,160
you're doing if, and this code
either runs or doesn't run.

376
00:16:32,160 --> 00:16:36,150
It is extremely common to want
to basically say, look, I'm

377
00:16:36,150 --> 00:16:37,580
going to do one of two things.

378
00:16:37,580 --> 00:16:38,865
I'm going to ask a question.

379
00:16:38,865 --> 00:16:40,990
If the question is true,
I'm going to do one thing.

380
00:16:40,990 --> 00:16:43,281
If the question's false, I'm
going to do another thing.

381
00:16:43,281 --> 00:16:45,570
So that's what we
have shown here.

382
00:16:45,570 --> 00:16:47,570
We say is x = 4.

383
00:16:47,570 --> 00:16:49,120
Is x equal to question mark?

384
00:16:49,120 --> 00:16:50,980
If it's yes, we're
going to go here.

385
00:16:50,980 --> 00:16:52,894
If it's no, we're
going to go here,

386
00:16:52,894 --> 00:16:54,310
going to execute
one or the other,

387
00:16:54,310 --> 00:16:56,360
and then we're
going to continue.

388
00:16:56,360 --> 00:16:58,600
So we're really at a
fork in the road here.

389
00:16:58,600 --> 00:17:01,710
We're are at a fork in the road,
going to make a choice, and one

390
00:17:01,710 --> 00:17:04,970
or the other, but never both.

391
00:17:04,970 --> 00:17:06,670
So we're going to do one thing.

392
00:17:06,670 --> 00:17:08,410
Or we're going to
do another thing.

393
00:17:08,410 --> 00:17:10,089
We're going to do
one of the two.

394
00:17:10,089 --> 00:17:14,089
And depending on the
question that we ask

395
00:17:14,089 --> 00:17:17,869
is which one that
we're going to do.

396
00:17:17,869 --> 00:17:21,550
So here's a little bit of code.

397
00:17:21,550 --> 00:17:23,170
x = 4 .

398
00:17:23,170 --> 00:17:24,420
Is x > 2?

399
00:17:24,420 --> 00:17:25,960
The answer is yes.

400
00:17:25,960 --> 00:17:27,970
Then we come out
and hit this else.

401
00:17:27,970 --> 00:17:30,490
And we automatically
skip, because we're only

402
00:17:30,490 --> 00:17:32,972
going to do one of the two.

403
00:17:32,972 --> 00:17:33,930
And here's the picture.

404
00:17:33,930 --> 00:17:35,590
x = 4.

405
00:17:35,590 --> 00:17:39,250
Is x equal to, yes,
print, done, which

406
00:17:39,250 --> 00:17:41,780
means we'll never do
both this and that.

407
00:17:41,780 --> 00:17:43,200
Never do both, both sides.

408
00:17:43,200 --> 00:17:46,230
We're going to do one or
the other of the sides.

409
00:17:46,230 --> 00:17:55,180
And just sort of going with the
box, this is our box, right?

410
00:17:55,180 --> 00:17:58,110
It's sort of the indent,
followed by the final indent.

411
00:17:58,110 --> 00:18:00,037
The else is really
kind of part of it.

412
00:18:00,037 --> 00:18:01,620
And then we can draw
the picture here.

413
00:18:01,620 --> 00:18:06,160
It has one entry and one exit.

414
00:18:06,160 --> 00:18:09,670
OK, so we have one-way ifs.

415
00:18:09,670 --> 00:18:10,950
And we have two-way ifs.

416
00:18:10,950 --> 00:18:13,463
And now we have multi-way ifs.

417
00:18:13,463 --> 00:18:16,110

418
00:18:16,110 --> 00:18:23,540
So here is a multi-way if.

419
00:18:23,540 --> 00:18:29,430
And it introduces a
new reserved word--

420
00:18:29,430 --> 00:18:33,240
elif, which is a
combination of else and if.

421
00:18:33,240 --> 00:18:37,020
And this one probably just as
easy to talk about the picture

422
00:18:37,020 --> 00:18:37,950
here.

423
00:18:37,950 --> 00:18:39,670
The first question is asked.

424
00:18:39,670 --> 00:18:42,650
There's still going
to only be one.

425
00:18:42,650 --> 00:18:45,870
One, and only one, of these
three choices are going to run.

426
00:18:45,870 --> 00:18:49,500
Once it's run one,
then it's done.

427
00:18:49,500 --> 00:18:54,410
So the way to think about
this, if x is less than two,

428
00:18:54,410 --> 00:18:55,577
we're going to run this one.

429
00:18:55,577 --> 00:18:57,785
And then we're going to kind
of flush all the way out

430
00:18:57,785 --> 00:18:58,760
to the bottom.

431
00:18:58,760 --> 00:19:01,340
If x is not less than two,
and it's less than 10,

432
00:19:01,340 --> 00:19:04,300
we're going to run this one
and flush out the bottom.

433
00:19:04,300 --> 00:19:08,330
And if x is not less than two,
and x is not less than 10,

434
00:19:08,330 --> 00:19:11,660
we're going to run this one
and flush out the bottom.

435
00:19:11,660 --> 00:19:18,590
So one of these three-- one,
two, three-- is going to run.

436
00:19:18,590 --> 00:19:21,490
And it's going to run
based on the questions that

437
00:19:21,490 --> 00:19:22,570
are being asked.

438
00:19:22,570 --> 00:19:24,690
The questions do get
asked in an order.

439
00:19:24,690 --> 00:19:27,010
And the order does matter.

440
00:19:27,010 --> 00:19:29,530
So that is a multi-way if.

441
00:19:29,530 --> 00:19:34,690
If elif else-- so this is
kind of like an otherwise.

442
00:19:34,690 --> 00:19:37,429
The else is like an otherwise.

443
00:19:37,429 --> 00:19:39,470
One way or another, we're
going to run something.

444
00:19:39,470 --> 00:19:43,080
And if none of these first two
have run, we will run this one.

445
00:19:43,080 --> 00:19:44,450
We call it a multi-way if.

446
00:19:44,450 --> 00:19:48,260

447
00:19:48,260 --> 00:19:51,650
So here's a example
of our multi-way if.

448
00:19:51,650 --> 00:19:56,070
If we say x equals 0-- x
= 0-- is it less than two?

449
00:19:56,070 --> 00:19:57,130
Yes, it is.

450
00:19:57,130 --> 00:19:59,480
So we run small, print "Small."

451
00:19:59,480 --> 00:20:02,150
And then we flush
out the bottom.

452
00:20:02,150 --> 00:20:08,140
If we switch instead x to 5--
x is 5-- is it less than 2?

453
00:20:08,140 --> 00:20:09,480
No, it is not less than 2.

454
00:20:09,480 --> 00:20:10,410
Is it less than 10?

455
00:20:10,410 --> 00:20:12,740
Well, 5 is less than 10,
so the answer is yes.

456
00:20:12,740 --> 00:20:17,060
So we print "Medium," then
we flush out the bottom.

457
00:20:17,060 --> 00:20:20,090
One, and only one,
are going to execute.

458
00:20:20,090 --> 00:20:23,290
Now, in this case,
we got x is 20.

459
00:20:23,290 --> 00:20:24,470
And so we come through here.

460
00:20:24,470 --> 00:20:25,430
Is it less than two?

461
00:20:25,430 --> 00:20:26,630
No, it is not.

462
00:20:26,630 --> 00:20:27,620
It is less than 10.

463
00:20:27,620 --> 00:20:28,630
No, it is not.

464
00:20:28,630 --> 00:20:31,300
So we're going to do this one,
and then flush out the bottom.

465
00:20:31,300 --> 00:20:35,440
If we go here,
it's false, false.

466
00:20:35,440 --> 00:20:38,379
Go here-- all else being
equal, we run that one.

467
00:20:38,379 --> 00:20:39,920
So this one doesn't
run, and that one

468
00:20:39,920 --> 00:20:43,530
doesn't run, because
these are like gateways.

469
00:20:43,530 --> 00:20:45,630
If it were true,
it would run it.

470
00:20:45,630 --> 00:20:47,890
But it's false, so
we're going to skip.

471
00:20:47,890 --> 00:20:50,580
This one is false, so
we're going to skip it.

472
00:20:50,580 --> 00:20:52,040
But then we hit the else.

473
00:20:52,040 --> 00:20:53,460
That's like a catch-all.

474
00:20:53,460 --> 00:20:55,010
And then if none
of these were true,

475
00:20:55,010 --> 00:20:57,388
then it will run the else.

476
00:20:57,388 --> 00:20:58,535
Any questions?

477
00:20:58,535 --> 00:21:01,740

478
00:21:01,740 --> 00:21:08,647
OK, well, I'm going to ask
you a question in a second.

479
00:21:08,647 --> 00:21:11,570

480
00:21:11,570 --> 00:21:14,220
OK, so just a couple of
things that probably you're

481
00:21:14,220 --> 00:21:16,050
wondering about.

482
00:21:16,050 --> 00:21:18,240
You don't actually need an else.

483
00:21:18,240 --> 00:21:20,680
You can have a multi-way.

484
00:21:20,680 --> 00:21:23,610
X = 5, if x < 2,
there is no else here.

485
00:21:23,610 --> 00:21:26,380
You'll notice that this
print just comes back.

486
00:21:26,380 --> 00:21:29,702
And so this way it could,
if both of these are false,

487
00:21:29,702 --> 00:21:31,660
skip them both and just
run right through here,

488
00:21:31,660 --> 00:21:33,800
and there's no else clause.

489
00:21:33,800 --> 00:21:39,150
OK, so in this case, the
way this one's going to run

490
00:21:39,150 --> 00:21:40,620
is x = 5.

491
00:21:40,620 --> 00:21:43,410
If x < 2, it's not.

492
00:21:43,410 --> 00:21:44,910
And it skips to here.

493
00:21:44,910 --> 00:21:48,620
Else if x < 10, which it is,
it will run that one and come

494
00:21:48,620 --> 00:21:49,160
here.

495
00:21:49,160 --> 00:22:00,050
But for a different value
of x, like 95, if x was 59,

496
00:22:00,050 --> 00:22:00,920
this would be false.

497
00:22:00,920 --> 00:22:01,690
It would skip it.

498
00:22:01,690 --> 00:22:03,572
This elif would still be false.

499
00:22:03,572 --> 00:22:04,280
It would skip it.

500
00:22:04,280 --> 00:22:08,970
And the only thing that would
print out would be "All done."

501
00:22:08,970 --> 00:22:14,190
OK, you can also
have many elifs.

502
00:22:14,190 --> 00:22:18,059
So better change to green.

503
00:22:18,059 --> 00:22:18,850
It checks this one.

504
00:22:18,850 --> 00:22:20,060
If it's true, it
runs the first one.

505
00:22:20,060 --> 00:22:21,476
If it's false it,
checks this one.

506
00:22:21,476 --> 00:22:25,160
If that's true, it runs
this one, and then it skips.

507
00:22:25,160 --> 00:22:27,130
And so the way to
think about this

508
00:22:27,130 --> 00:22:30,500
is it just goes through
and checks this one false,

509
00:22:30,500 --> 00:22:32,210
this one false, false, false.

510
00:22:32,210 --> 00:22:33,930
Oh, I finally found one.

511
00:22:33,930 --> 00:22:35,150
And now I'm done.

512
00:22:35,150 --> 00:22:39,470
It still is going to do
one, and only one, of these.

513
00:22:39,470 --> 00:22:43,330
This one has an else, so sooner
or later it is going to do one.

514
00:22:43,330 --> 00:22:47,450
And it only will do the else
if all of these are false.

515
00:22:47,450 --> 00:22:49,920
All have to be false.

516
00:22:49,920 --> 00:22:53,094
Then it will actually come
and hit the else clause.

517
00:22:53,094 --> 00:22:55,635
It's great, because there are
lots of situations where you're

518
00:22:55,635 --> 00:22:58,280
like, oh, is it before
8:00 in the morning,

519
00:22:58,280 --> 00:23:01,890
or is it between 8:00 and noon,
or is it between noon and 5:00,

520
00:23:01,890 --> 00:23:06,940
or after 5:00, after midnight?

521
00:23:06,940 --> 00:23:12,350
So here coming up is a question.

522
00:23:12,350 --> 00:23:14,354
And there's two puzzles.

523
00:23:14,354 --> 00:23:16,770
And I'm going to stop so you
can look at them for a while.

524
00:23:16,770 --> 00:23:21,200
And I want you to figure
out, in both sides of this,

525
00:23:21,200 --> 00:23:24,580
which of the lines
will not execute,

526
00:23:24,580 --> 00:23:26,660
regardless of the value for x.

527
00:23:26,660 --> 00:23:28,830
So on both sides,
there is a line

528
00:23:28,830 --> 00:23:31,990
that won't execute, regardless
of the value of the x.

529
00:23:31,990 --> 00:23:33,200
Which will never print?

530
00:23:33,200 --> 00:23:38,650
There's two problems--
problem A problem B. OK, I'll

531
00:23:38,650 --> 00:23:40,284
have some coffee
while you think.

532
00:23:40,284 --> 00:23:55,000

533
00:23:55,000 --> 00:23:57,620
OK, hopefully you paused it,
so that you could actually

534
00:23:57,620 --> 00:24:00,064
think for a bit.

535
00:24:00,064 --> 00:24:01,480
So I'm going to
guess you probably

536
00:24:01,480 --> 00:24:02,470
got the first one right.

537
00:24:02,470 --> 00:24:03,720
That's pretty straightforward.

538
00:24:03,720 --> 00:24:06,304
I mean, actually you're in great
shape if you got both of them

539
00:24:06,304 --> 00:24:06,803
right.

540
00:24:06,803 --> 00:24:09,040
If you got any of them
right, you're in great shape,

541
00:24:09,040 --> 00:24:10,430
because that means you're
starting to get it.

542
00:24:10,430 --> 00:24:12,013
It's starting to
like, oh, I am seeing

543
00:24:12,013 --> 00:24:14,230
kind of this flow picture.

544
00:24:14,230 --> 00:24:15,380
There's a picture.

545
00:24:15,380 --> 00:24:17,570
I look at these characters
that seemingly looked

546
00:24:17,570 --> 00:24:19,600
like gibberish and
a picture arises,

547
00:24:19,600 --> 00:24:23,730
or a pattern of
execution arises.

548
00:24:23,730 --> 00:24:25,220
That's what we want to see.

549
00:24:25,220 --> 00:24:29,025
So in the first one,
which will never print?

550
00:24:29,025 --> 00:24:30,650
Well, we're looking
for kind of a value

551
00:24:30,650 --> 00:24:32,860
for x which will be defective.

552
00:24:32,860 --> 00:24:35,374
So if x is less than two,
we're going to do this else.

553
00:24:35,374 --> 00:24:38,040
If x is greater than or equal to
2, we're going to do this else,

554
00:24:38,040 --> 00:24:38,950
we'll do that.

555
00:24:38,950 --> 00:24:41,390
Well, here's the
problem with this one.

556
00:24:41,390 --> 00:24:45,860
For all values of x, x < 2
is either going to be true,

557
00:24:45,860 --> 00:24:53,949
or for x >= 2 is
going to be true.

558
00:24:53,949 --> 00:24:56,490
So it's going to run this one,
or it's going to run that one.

559
00:24:56,490 --> 00:24:59,056
So for big numbers--
numbers above 2--

560
00:24:59,056 --> 00:25:00,180
it's going to run this one.

561
00:25:00,180 --> 00:25:01,680
Below 2, it's going
to run that one.

562
00:25:01,680 --> 00:25:05,060
So this one is
never going to run,

563
00:25:05,060 --> 00:25:08,190
because one of the first
two is going to be true.

564
00:25:08,190 --> 00:25:11,300
And so the third else
situation is not going to run.

565
00:25:11,300 --> 00:25:13,520
Hope you got that right.

566
00:25:13,520 --> 00:25:16,500
OK, so let's take a
look at the next one.

567
00:25:16,500 --> 00:25:18,951
So the question is, is x < 2 2?

568
00:25:18,951 --> 00:25:19,450
Do this.

569
00:25:19,450 --> 00:25:21,290
If x <20, do that.

570
00:25:21,290 --> 00:25:25,260
And if x < 10, do this,
and otherwise do that.

571
00:25:25,260 --> 00:25:29,210
Well, the one that will
never execute is this one.

572
00:25:29,210 --> 00:25:35,400

573
00:25:35,400 --> 00:25:41,200
x = 15 is a bad one. x = 5 is
the one that will sort of cause

574
00:25:41,200 --> 00:25:44,190
it to behave badly.

575
00:25:44,190 --> 00:25:48,800
And so if x is
five, this is false.

576
00:25:48,800 --> 00:25:52,060
If x is less than
20, this is true.

577
00:25:52,060 --> 00:25:53,580
And then it's done.

578
00:25:53,580 --> 00:25:58,130
So the problem is this is the
one that will never execute,

579
00:25:58,130 --> 00:26:02,750
because if a value is less than
10, it's also less than 20.

580
00:26:02,750 --> 00:26:04,270
So this will be true.

581
00:26:04,270 --> 00:26:07,260
So for a value like 5, which
happens to be less than 10,

582
00:26:07,260 --> 00:26:10,130
which you would think would
cause that line to execute,

583
00:26:10,130 --> 00:26:11,540
does not.

584
00:26:11,540 --> 00:26:14,150
This one executes because
it's checked first.

585
00:26:14,150 --> 00:26:17,290
Now, if we just moved
this code, took this code,

586
00:26:17,290 --> 00:26:21,695
and we moved it down here,
then it would make more sense.

587
00:26:21,695 --> 00:26:23,940
If we moved it down there,
it would make more sense.

588
00:26:23,940 --> 00:26:26,640
But basically, the
answer to these

589
00:26:26,640 --> 00:26:32,140
is this one won't execute.

590
00:26:32,140 --> 00:26:35,130
And this one will never
execute for any value.

591
00:26:35,130 --> 00:26:37,400
So there's the answer.

592
00:26:37,400 --> 00:26:39,890
OK, so we're almost
done with conditionals.

593
00:26:39,890 --> 00:26:43,730
I want to show you one
more kind of conditional.

594
00:26:43,730 --> 00:26:46,100
It's a little bit different.

595
00:26:46,100 --> 00:26:50,580
It's not a bit of code
structure that you make.

596
00:26:50,580 --> 00:26:56,890
It is dealing with the fact
that some things may blow up.

597
00:26:56,890 --> 00:27:00,597
Like, if you read a
number from a user,

598
00:27:00,597 --> 00:27:02,680
and you try to convert to
a floating point number,

599
00:27:02,680 --> 00:27:06,070
as you may have already done
in some of your homework,

600
00:27:06,070 --> 00:27:06,960
it can blow up.

601
00:27:06,960 --> 00:27:09,800
You know it's going to blow
up, but you don't exactly

602
00:27:09,800 --> 00:27:12,000
want to kill your program.

603
00:27:12,000 --> 00:27:16,180
So the concept of try
and except are, hey,

604
00:27:16,180 --> 00:27:17,430
this is a dangerous thing.

605
00:27:17,430 --> 00:27:18,480
I know it might blow up.

606
00:27:18,480 --> 00:27:19,990
I know exactly why
it might blow up.

607
00:27:19,990 --> 00:27:21,100
But I don't want to die.

608
00:27:21,100 --> 00:27:23,141
I don't want to stop my
program when it blows up.

609
00:27:23,141 --> 00:27:24,210
I want to continue.

610
00:27:24,210 --> 00:27:26,660
And that's the purpose
of the except block.

611
00:27:26,660 --> 00:27:29,110
So here's a little bit of code.

612
00:27:29,110 --> 00:27:31,270
And you'll notice we've
done this code before.

613
00:27:31,270 --> 00:27:34,720
This is code that's kind of
similar to your rate and pay

614
00:27:34,720 --> 00:27:38,200
homework, where you read
a string using raw input.

615
00:27:38,200 --> 00:27:40,860
You converted it
using float, but then

616
00:27:40,860 --> 00:27:43,900
if you typed in "Fred,"
the thing blows up.

617
00:27:43,900 --> 00:27:46,130
So we're kind of
simulating that right here.

618
00:27:46,130 --> 00:27:49,490
So here we have a variable
a string called Hello Bob.

619
00:27:49,490 --> 00:27:51,385
And then we try to turn
it into an integer.

620
00:27:51,385 --> 00:27:53,010
And then we're going
to print that out.

621
00:27:53,010 --> 00:27:56,910
And then we have another string
that has the letters 1 2 3.

622
00:27:56,910 --> 00:27:58,650
We convert that to an integer.

623
00:27:58,650 --> 00:28:00,570
And then we print that one out.

624
00:28:00,570 --> 00:28:07,010
The problem is that when this
runs, this is going to fail.

625
00:28:07,010 --> 00:28:10,410
It's going to fail
with this traceback.

626
00:28:10,410 --> 00:28:14,830
And the problem is when
the traceback happens,

627
00:28:14,830 --> 00:28:17,220
the program stops executing.

628
00:28:17,220 --> 00:28:22,140
The traceback is Python's
way of asking you, hey,

629
00:28:22,140 --> 00:28:22,990
this would be bad.

630
00:28:22,990 --> 00:28:24,130
I don't know what to do.

631
00:28:24,130 --> 00:28:25,310
I'm stopping.

632
00:28:25,310 --> 00:28:30,880
So that means that the rest
of your program is gone.

633
00:28:30,880 --> 00:28:33,670
The fact that we had stuff
down here doesn't matter.

634
00:28:33,670 --> 00:28:36,690
This line died
with the traceback.

635
00:28:36,690 --> 00:28:37,780
It stopped.

636
00:28:37,780 --> 00:28:40,537
It doesn't give you a
traceback and then keep going.

637
00:28:40,537 --> 00:28:41,620
It gives you a trace back.

638
00:28:41,620 --> 00:28:43,659
And that's the end.

639
00:28:43,659 --> 00:28:45,950
Now, this might be something
instead of just the string

640
00:28:45,950 --> 00:28:48,020
"Hello Bob," which is insane.

641
00:28:48,020 --> 00:28:50,210
Data might have come
from a raw input, where

642
00:28:50,210 --> 00:28:52,670
the user was typing, and
you're saying give me a number.

643
00:28:52,670 --> 00:28:54,792
And they type something
that's not a number.

644
00:28:54,792 --> 00:28:55,750
And this would blow up.

645
00:28:55,750 --> 00:28:58,270
It's like, hey, I know
it's going to blow up.

646
00:28:58,270 --> 00:29:00,670
The problem with this
is that you don't

647
00:29:00,670 --> 00:29:03,820
know-- oops, clear the thing.

648
00:29:03,820 --> 00:29:06,550
Now we have to start
it on fire again.

649
00:29:06,550 --> 00:29:10,540
OK, it's on fire-- the
problem is that in a sense,

650
00:29:10,540 --> 00:29:12,550
this program is you.

651
00:29:12,550 --> 00:29:16,990
If you recall, we have you
as typing these commands

652
00:29:16,990 --> 00:29:20,060
into these scripts, feeding
the central processing unit,

653
00:29:20,060 --> 00:29:22,370
answering the
question what next?

654
00:29:22,370 --> 00:29:24,620
So you should take it
a little personally

655
00:29:24,620 --> 00:29:28,980
when your program gets a
traceback, because that means

656
00:29:28,980 --> 00:29:32,620
you, in the form of your
program, have been vaporized,

657
00:29:32,620 --> 00:29:35,850
and you're not present to
give any more instructions.

658
00:29:35,850 --> 00:29:36,600
It stops.

659
00:29:36,600 --> 00:29:38,380
It stops dead in its tracks.

660
00:29:38,380 --> 00:29:40,380
You are gone.

661
00:29:40,380 --> 00:29:44,270
So we want to make sure
we control this behavior.

662
00:29:44,270 --> 00:29:46,780
We know it might blow up.

663
00:29:46,780 --> 00:29:49,930
And we want to capture the
situation where it does

664
00:29:49,930 --> 00:29:52,570
and execute alternate code.

665
00:29:52,570 --> 00:29:55,100
OK, so here it goes.

666
00:29:55,100 --> 00:29:56,730
It's a bit of syntax.

667
00:29:56,730 --> 00:30:00,250
I mentioned that it uses
the try and except keywords.

668
00:30:00,250 --> 00:30:02,957
These are reserved
words in Python.

669
00:30:02,957 --> 00:30:04,540
And then it's a
little indented block.

670
00:30:04,540 --> 00:30:07,570
So astr = "Hello Bob".

671
00:30:07,570 --> 00:30:08,390
Great.

672
00:30:08,390 --> 00:30:10,820
Try means we're about to
do something dangerous.

673
00:30:10,820 --> 00:30:13,440
Let's take out some
insurance policy on it.

674
00:30:13,440 --> 00:30:16,420
And that is we are going to
convert this to an integer.

675
00:30:16,420 --> 00:30:20,831
Take astr, convert to
an integer, put in istr.

676
00:30:20,831 --> 00:30:23,330
If that works, great, we'll
just continue on and ignore this

677
00:30:23,330 --> 00:30:24,410
except.

678
00:30:24,410 --> 00:30:28,590
If it blows up, we're going
to jump into the except block.

679
00:30:28,590 --> 00:30:31,210
And then we'll have
alternate substitute code.

680
00:30:31,210 --> 00:30:33,810
In this case, I'm going to set
the variable to negative one

681
00:30:33,810 --> 00:30:35,340
as an indicator.

682
00:30:35,340 --> 00:30:36,580
Then I'll print it out.

683
00:30:36,580 --> 00:30:37,810
I'll do it again.

684
00:30:37,810 --> 00:30:40,840
Try this code, and away we go.

685
00:30:40,840 --> 00:30:45,640
So when this runs, you know
exactly how it's going to run.

686
00:30:45,640 --> 00:30:51,690

687
00:30:51,690 --> 00:30:53,260
Set to string.

688
00:30:53,260 --> 00:30:55,380
The try takes out the insurance.

689
00:30:55,380 --> 00:30:57,110
This blows up.

690
00:30:57,110 --> 00:31:00,530
So it runs down to here
and runs this part.

691
00:31:00,530 --> 00:31:04,800
And then it will print First -1.

692
00:31:04,800 --> 00:31:08,610
Then it sets the string to
1 2 3-- not 123, but 1 2 3

693
00:31:08,610 --> 00:31:09,730
is a string.

694
00:31:09,730 --> 00:31:11,950
It takes out an
insurance policy.

695
00:31:11,950 --> 00:31:13,430
This time it works.

696
00:31:13,430 --> 00:31:20,400
And istr is going to be 123, so
we don't run the except code.

697
00:31:20,400 --> 00:31:25,020
And so out comes
the second 1 2 3.

698
00:31:25,020 --> 00:31:30,500
So the try is take out insurance
on this little bit of code.

699
00:31:30,500 --> 00:31:33,010
And if it fails, run
this alternate code.

700
00:31:33,010 --> 00:31:35,770
If not, skip the alternate code.

701
00:31:35,770 --> 00:31:37,400
So it's kind of conditional.

702
00:31:37,400 --> 00:31:40,260
If you put multiple
lines in the block

703
00:31:40,260 --> 00:31:44,490
between the try and the
except, it runs until one dies.

704
00:31:44,490 --> 00:31:46,140
So it doesn't come back.

705
00:31:46,140 --> 00:31:49,420
It's not taking
insurance out separately

706
00:31:49,420 --> 00:31:50,460
on all three statements.

707
00:31:50,460 --> 00:31:51,876
It's like here's
a block of stuff,

708
00:31:51,876 --> 00:31:54,780
and if anything blows up stop.

709
00:31:54,780 --> 00:31:58,520
And the things that run do run.

710
00:31:58,520 --> 00:32:00,650
This is really kind of bad
code, because you really

711
00:32:00,650 --> 00:32:01,858
don't want the print in here.

712
00:32:01,858 --> 00:32:04,980
It's actually a good idea on
the try/except to have as little

713
00:32:04,980 --> 00:32:07,390
in the try block as
you possibly can,

714
00:32:07,390 --> 00:32:11,550
so you're real clear on
what's going to fail.

715
00:32:11,550 --> 00:32:13,610
But so here we come in.

716
00:32:13,610 --> 00:32:15,490
It's Bob, so it's going to fail.

717
00:32:15,490 --> 00:32:16,390
We run this.

718
00:32:16,390 --> 00:32:18,110
That runs successfully.

719
00:32:18,110 --> 00:32:19,570
This blows up.

720
00:32:19,570 --> 00:32:23,540
So it quits and jumps into the
except blocks and continues.

721
00:32:23,540 --> 00:32:27,290
The point is that this
code never executes--

722
00:32:27,290 --> 00:32:28,550
never executes.

723
00:32:28,550 --> 00:32:31,370
The other point is
this code does execute.

724
00:32:31,370 --> 00:32:33,590
Just because this blew up,
this is already executed.

725
00:32:33,590 --> 00:32:37,460
It might have done something
more complex than print hello.

726
00:32:37,460 --> 00:32:40,240
OK, there you go.

727
00:32:40,240 --> 00:32:42,420
So if we look at this
kind of in a picture,

728
00:32:42,420 --> 00:32:44,270
we set the try block.

729
00:32:44,270 --> 00:32:44,870
It runs.

730
00:32:44,870 --> 00:32:45,860
It runs.

731
00:32:45,860 --> 00:32:48,960
And the try/except kind
of has this escape patch

732
00:32:48,960 --> 00:32:54,290
that says if there is
a explosion somehow,

733
00:32:54,290 --> 00:32:57,544
then it runs this alternate
code, and then comes out

734
00:32:57,544 --> 00:32:58,085
and finishes.

735
00:32:58,085 --> 00:32:59,890

736
00:32:59,890 --> 00:33:03,460
And again, it doesn't go
back and finish the block.

737
00:33:03,460 --> 00:33:06,980
And it doesn't undo the
work that is done by that.

738
00:33:06,980 --> 00:33:09,150
So it doesn't un-execute it.

739
00:33:09,150 --> 00:33:11,710
If it executes and works,
it just keeps on going.

740
00:33:11,710 --> 00:33:16,780
Then it blows up, and then it
sort of flushes its way out.

741
00:33:16,780 --> 00:33:18,870
So here's an example
of how you might

742
00:33:18,870 --> 00:33:21,694
do this in a running program,
like the programs that you're

743
00:33:21,694 --> 00:33:23,110
about to be assigned,
where you're

744
00:33:23,110 --> 00:33:26,850
supposed to check for
user input having errors.

745
00:33:26,850 --> 00:33:29,866
So here is a little
conversion of a number.

746
00:33:29,866 --> 00:33:32,880

747
00:33:32,880 --> 00:33:35,060
And so we're saying
enter a number.

748
00:33:35,060 --> 00:33:38,390
And we're putting a
string into roster.

749
00:33:38,390 --> 00:33:39,560
It's a string.

750
00:33:39,560 --> 00:33:41,731
And so we don't know.

751
00:33:41,731 --> 00:33:43,980
And here's where we're going
to convert to an integer,

752
00:33:43,980 --> 00:33:46,550
and we're just not sure if
it's going to work or not.

753
00:33:46,550 --> 00:33:49,240
So we know how int works.

754
00:33:49,240 --> 00:33:51,676
It either converts
it, or it blows up.

755
00:33:51,676 --> 00:33:53,050
So we know it's
going to do that.

756
00:33:53,050 --> 00:33:55,133
We just don't know what
the user is going to type.

757
00:33:55,133 --> 00:33:55,850
We don't know.

758
00:33:55,850 --> 00:33:57,474
So we have to take
out insurance on it.

759
00:33:57,474 --> 00:33:59,570
So this runs, and
then we do try.

760
00:33:59,570 --> 00:34:00,940
And we try to convert it.

761
00:34:00,940 --> 00:34:03,130
And if it works, it's great.

762
00:34:03,130 --> 00:34:07,380
And if it fails, it runs this
and sets it to negative 1.

763
00:34:07,380 --> 00:34:11,820
And afterwards, we either have
the number or a negative 1.

764
00:34:11,820 --> 00:34:17,409
And so, if the person enters
42, it says nice work.

765
00:34:17,409 --> 00:34:19,409
Let's show you where it runs.

766
00:34:19,409 --> 00:34:22,989
If the person says 42,
it runs through here,

767
00:34:22,989 --> 00:34:25,340
gets the string 42,
converts that to an integer,

768
00:34:25,340 --> 00:34:28,030
skips here, and
then says nice work.

769
00:34:28,030 --> 00:34:29,639
And that's how it runs.

770
00:34:29,639 --> 00:34:32,710
If on the other hand,
they type fortytwo--

771
00:34:32,710 --> 00:34:37,040
the words-- this gets to
be the string fortytwo.

772
00:34:37,040 --> 00:34:38,370
It runs here.

773
00:34:38,370 --> 00:34:43,100
This blows up, so it comes
and runs this part here.

774
00:34:43,100 --> 00:34:46,500
And then it says if ival
> 0, which is not true.

775
00:34:46,500 --> 00:34:50,500
So it runs this part
and says not a number.

776
00:34:50,500 --> 00:34:54,370
So this is our way of
compensating for user input

777
00:34:54,370 --> 00:34:56,630
that might have errors in it.

778
00:34:56,630 --> 00:35:00,800
Errors that we're anticipating,
because you'd rather

779
00:35:00,800 --> 00:35:03,580
at least put up some
kind of a message,

780
00:35:03,580 --> 00:35:05,080
rather than just
have a traceback,

781
00:35:05,080 --> 00:35:06,810
if you're writing code
for somebody else.

782
00:35:06,810 --> 00:35:08,950
It just kind of is
not very classy.

783
00:35:08,950 --> 00:35:16,100

784
00:35:16,100 --> 00:35:19,090
The classic program
to do this is a time

785
00:35:19,090 --> 00:35:20,590
and a half for overtime pay.

786
00:35:20,590 --> 00:35:23,200

787
00:35:23,200 --> 00:35:26,050
So you get some pay
rate, like $10 an hour

788
00:35:26,050 --> 00:35:27,320
for your first 40 hours.

789
00:35:27,320 --> 00:35:30,190
And then you get 15 hours
for any hours above it.

790
00:35:30,190 --> 00:35:33,700
So you have to sort of
say, OK, if this ends up

791
00:35:33,700 --> 00:35:37,040
being some kind
of a thing where--

792
00:35:37,040 --> 00:35:40,460
let me draw that picture
a little better--

793
00:35:40,460 --> 00:35:45,019
hours greater than 40,
you're going to do one thing.

794
00:35:45,019 --> 00:35:46,560
And if hours are
less than 40, you're

795
00:35:46,560 --> 00:35:47,760
going to do another thing.

796
00:35:47,760 --> 00:35:49,800
So you have two
payout calculations.

797
00:35:49,800 --> 00:35:51,630
If the hours are
greater than 40,

798
00:35:51,630 --> 00:35:55,180
then you're going to do
overtime calculation, which

799
00:35:55,180 --> 00:35:58,870
is kind of like 40
times the regular rate,

800
00:35:58,870 --> 00:36:02,650
and then the number of excess
hours, like 5 overtime hours,

801
00:36:02,650 --> 00:36:05,620
times the rate times 1 and 1/2.

802
00:36:05,620 --> 00:36:07,370
So this is kind
of the calculation

803
00:36:07,370 --> 00:36:10,530
that happens if the hours
are greater than 40.

804
00:36:10,530 --> 00:36:13,260
And then if the hours
are less than 40,

805
00:36:13,260 --> 00:36:18,660
it's just pay equals
rate times hours.

806
00:36:18,660 --> 00:36:22,500
So you're going to do
one of two calculations,

807
00:36:22,500 --> 00:36:23,950
depending on how it works.

808
00:36:23,950 --> 00:36:27,710
So that's one of the programming
problems for this chapter.

809
00:36:27,710 --> 00:36:29,300
That's a classic.

810
00:36:29,300 --> 00:36:30,892
Is the classic if then else.

811
00:36:30,892 --> 00:36:33,100
You can actually do it with
if then if you're tricky.

812
00:36:33,100 --> 00:36:34,650
There's a lot of
ways to do this.

813
00:36:34,650 --> 00:36:36,840
So pick one and do it.

814
00:36:36,840 --> 00:36:39,630
Now, the next thing
I want you to do

815
00:36:39,630 --> 00:36:43,810
is I want you to take
that same program,

816
00:36:43,810 --> 00:36:48,730
do it again in another
assignment, or another problem

817
00:36:48,730 --> 00:36:53,500
in the chapter, and have some
kind of a non-numeric input

818
00:36:53,500 --> 00:36:54,470
and have it blow up.

819
00:36:54,470 --> 00:36:59,900
So if they type something
like nine, put out an error.

820
00:36:59,900 --> 00:37:02,490
Or if they type something
here put out an error.

821
00:37:02,490 --> 00:37:07,100
Now, don't write
a loop-- no loop.

822
00:37:07,100 --> 00:37:09,160
This is one execution
of the program.

823
00:37:09,160 --> 00:37:11,107
And this is another
execution program.

824
00:37:11,107 --> 00:37:12,190
Later, we can write loops.

825
00:37:12,190 --> 00:37:13,648
We haven't even
talked about loops.

826
00:37:13,648 --> 00:37:15,220
So this is running it twice.

827
00:37:15,220 --> 00:37:17,700
All I want you to do is exit.

828
00:37:17,700 --> 00:37:20,240
So take a look in the book
as to how to just get out.

829
00:37:20,240 --> 00:37:22,750
So I don't want
you to try to say,

830
00:37:22,750 --> 00:37:25,810
I'm going to prompt for these
numbers until I get a good one.

831
00:37:25,810 --> 00:37:26,880
We'll do that later.

832
00:37:26,880 --> 00:37:30,060
I just want you to deal with
the fact that you read a thing.

833
00:37:30,060 --> 00:37:34,827
You use the try to convert to
a float and see if it works.

834
00:37:34,827 --> 00:37:36,160
And if you don't, you just quit.

835
00:37:36,160 --> 00:37:40,410
Don't try to be tricky
and repeatedly prompt.

836
00:37:40,410 --> 00:37:42,230
So don't repeatedly prompt.

837
00:37:42,230 --> 00:37:47,676
One prompt, and then quit.

838
00:37:47,676 --> 00:37:50,750

839
00:37:50,750 --> 00:37:55,800
So this is conditional
execution-- if, if then else,

840
00:37:55,800 --> 00:37:58,340
and then I added a
little bit with the try

841
00:37:58,340 --> 00:37:59,780
and except as well.

842
00:37:59,780 --> 00:38:04,230
And the try/except is really
a limited kind of a problem.

843
00:38:04,230 --> 00:38:07,130
It really is to compensate
for errors that you

844
00:38:07,130 --> 00:38:08,720
anticipate are going to happen.

845
00:38:08,720 --> 00:38:10,180
And you can imagine
what you want

846
00:38:10,180 --> 00:38:14,770
to do as a replacement
for what those errors are.

847
00:38:14,770 --> 00:38:16,620
See you next lecture.