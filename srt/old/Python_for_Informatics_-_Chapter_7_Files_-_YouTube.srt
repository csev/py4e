1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:03,110
Welcome to chapter 7, Python
for Informatics Exploring

3
00:00:03,110 --> 00:00:03,780
Information.

4
00:00:03,780 --> 00:00:05,321
I'm Charles Severance,
I'm the author

5
00:00:05,321 --> 00:00:06,490
of the book and your host.

6
00:00:06,490 --> 00:00:09,760
And as always this
is brought to you by,

7
00:00:09,760 --> 00:00:13,410
no I'm sorry it is all creative
copyright Creative Commons

8
00:00:13,410 --> 00:00:17,700
attribution, the audio, the
video, the slides, and even

9
00:00:17,700 --> 00:00:18,730
the book.

10
00:00:18,730 --> 00:00:24,350
So here we go, oh
and so frankly where

11
00:00:24,350 --> 00:00:31,140
we've been working
all along, is we

12
00:00:31,140 --> 00:00:34,290
have been writing code
and talking to the CPU,

13
00:00:34,290 --> 00:00:39,260
hang on let me go get my CPU and
stuff hang on, be right back.

14
00:00:39,260 --> 00:00:44,376

15
00:00:44,376 --> 00:00:44,875
Ah.

16
00:00:44,875 --> 00:00:49,542

17
00:00:49,542 --> 00:00:53,760
OK here we go, here we go.

18
00:00:53,760 --> 00:00:55,000
Here's all that stuff.

19
00:00:55,000 --> 00:01:00,880
Remember that stuff
from the first lecture?

20
00:01:00,880 --> 00:01:03,070
There we go with that.

21
00:01:03,070 --> 00:01:05,860
Remember the mother board
from the first lecture?

22
00:01:05,860 --> 00:01:07,380
This is kind of a
picture of what's

23
00:01:07,380 --> 00:01:11,140
on the screen, the motherboard,
the CPU plugs in here,

24
00:01:11,140 --> 00:01:12,930
memory plugs in here.

25
00:01:12,930 --> 00:01:18,020
And remember how the CPU
is sort of the brains,

26
00:01:18,020 --> 00:01:20,840
as much brains as there
is for the operation.

27
00:01:20,840 --> 00:01:24,240
The CPU is asking what
next, the instructions

28
00:01:24,240 --> 00:01:26,270
come in through
these little pins.

29
00:01:26,270 --> 00:01:28,550
There's data inside
and it stores

30
00:01:28,550 --> 00:01:30,030
sort of semi permanent data.

31
00:01:30,030 --> 00:01:34,810
Variables are all stored
pretty much here in RAM.

32
00:01:34,810 --> 00:01:37,209
And we write our programs,
and so your Python programs

33
00:01:37,209 --> 00:01:39,000
they're sitting here
in this RAM in they're

34
00:01:39,000 --> 00:01:44,200
being fed to this CPU,
through those chips,

35
00:01:44,200 --> 00:01:46,019
through those pins
right the pins,

36
00:01:46,019 --> 00:01:47,810
I mean it doesn't really
connect like that,

37
00:01:47,810 --> 00:01:50,260
and so frankly up
to now everything

38
00:01:50,260 --> 00:01:53,480
that we've been doing is
just the Python programming

39
00:01:53,480 --> 00:01:54,510
language.

40
00:01:54,510 --> 00:01:59,660
And so the only place we've
really been operating is here.

41
00:01:59,660 --> 00:02:02,800
We have been putting
Python into the main memory

42
00:02:02,800 --> 00:02:07,610
and-- the main memory, and we
have been effectively feeding

43
00:02:07,610 --> 00:02:11,390
instructions to the CPU, the
central processing unit as it

44
00:02:11,390 --> 00:02:14,050
needed them and the
program would stop.

45
00:02:14,050 --> 00:02:15,560
And everything
we've done so far,

46
00:02:15,560 --> 00:02:20,480
everything is just sort
of fiddling around here.

47
00:02:20,480 --> 00:02:22,290
We have never escaped it.

48
00:02:22,290 --> 00:02:25,560
So now we are finally
going to escape

49
00:02:25,560 --> 00:02:29,190
from the central processing
unit and the memory.

50
00:02:29,190 --> 00:02:32,930
We'll still write programs
and have variables in here,

51
00:02:32,930 --> 00:02:38,530
but now we're going to use a
disk, the secondary storage,

52
00:02:38,530 --> 00:02:41,040
the permanent media.

53
00:02:41,040 --> 00:02:46,110
So if I go grab my Raspberry
Pi, that just goes right there,

54
00:02:46,110 --> 00:02:48,010
here's my Raspberry Pi.

55
00:02:48,010 --> 00:02:49,870
So here we've got
Raspberry Pi which

56
00:02:49,870 --> 00:02:55,900
is the small version, which
of course has a CPU, memory.

57
00:02:55,900 --> 00:02:58,810
and graphics processor all on
this little chip right here,

58
00:02:58,810 --> 00:03:01,690
but the secondary
memory for the,

59
00:03:01,690 --> 00:03:05,070
is this little SD card that
is the secondary memory

60
00:03:05,070 --> 00:03:06,066
for Raspberry Pi.

61
00:03:06,066 --> 00:03:07,440
So the structure
the Raspberry Pi

62
00:03:07,440 --> 00:03:10,610
is exactly the same structure
any other personal computer,

63
00:03:10,610 --> 00:03:13,141
it's just smaller
and less expensive.

64
00:03:13,141 --> 00:03:14,640
And so in the
Raspberry Pi if you're

65
00:03:14,640 --> 00:03:16,400
programming the
Raspberry Pi, you're

66
00:03:16,400 --> 00:03:17,790
sort of finally escaping.

67
00:03:17,790 --> 00:03:21,170
All your programs are in
here your CPU's in here,

68
00:03:21,170 --> 00:03:24,370
and that's pretty much
how far you've got to run.

69
00:03:24,370 --> 00:03:27,530
But now, of course when
you save your files you

70
00:03:27,530 --> 00:03:29,150
save them to here.

71
00:03:29,150 --> 00:03:30,800
But now we're going
to start looking

72
00:03:30,800 --> 00:03:32,760
at data on the disk drive.

73
00:03:32,760 --> 00:03:38,160
And so it's time to escape
to the secondary memory.

74
00:03:38,160 --> 00:03:40,915
OK time to escape to
the secondary memory.

75
00:03:40,915 --> 00:03:43,130
Oh Raspberry Pi you
can go right there.

76
00:03:43,130 --> 00:03:43,940
OK?

77
00:03:43,940 --> 00:03:45,860
So it's time to find
some data to mess with.

78
00:03:45,860 --> 00:03:48,410
So a lot of what we've
been doing so far

79
00:03:48,410 --> 00:03:51,110
is just kind of the pre
work to get to the point

80
00:03:51,110 --> 00:03:52,780
where we can do this.

81
00:03:52,780 --> 00:03:54,572
And in here we're going
to have data files.

82
00:03:54,572 --> 00:03:55,946
Now we've been
making data files,

83
00:03:55,946 --> 00:03:58,440
you've been writing-- every
Python program that you write

84
00:03:58,440 --> 00:04:00,970
on your computer
gets saved as a file,

85
00:04:00,970 --> 00:04:04,390
then Python reads
the file and runs it.

86
00:04:04,390 --> 00:04:08,980
But, now we're actually going
to start messing with some data.

87
00:04:08,980 --> 00:04:11,610
And so files are where we're
going to be working with.

88
00:04:11,610 --> 00:04:15,440
And so, one of the things
about secondary memory,

89
00:04:15,440 --> 00:04:18,790
is it's much larger.

90
00:04:18,790 --> 00:04:21,085
And this main memory of
computer is pretty large,

91
00:04:21,085 --> 00:04:23,630
it's just not large
enough to hold everything

92
00:04:23,630 --> 00:04:26,020
that the computer is
capable of holding.

93
00:04:26,020 --> 00:04:28,740
So the files that we're going to
work with, no we're not talking

94
00:04:28,740 --> 00:04:31,390
about image files or
Quicktime movies or things

95
00:04:31,390 --> 00:04:33,950
like that, we're going
to work with text files.

96
00:04:33,950 --> 00:04:37,422
Because the theme of this
course is digging through text.

97
00:04:37,422 --> 00:04:39,130
Sometimes we'll pull
it off the internet,

98
00:04:39,130 --> 00:04:41,155
sometimes we'll
read files, but it's

99
00:04:41,155 --> 00:04:43,280
digging through and using
all the things that we've

100
00:04:43,280 --> 00:04:46,050
learned so far looping and
strings and all those things

101
00:04:46,050 --> 00:04:50,600
to make sense of a
sequence of information.

102
00:04:50,600 --> 00:04:51,550
OK?

103
00:04:51,550 --> 00:04:55,410
Now to access file
information we

104
00:04:55,410 --> 00:04:57,680
have to do this thing
called opening the file.

105
00:04:57,680 --> 00:04:59,620
We can't just say,
yo the information

106
00:04:59,620 --> 00:05:02,290
is just omnipresent,
because there

107
00:05:02,290 --> 00:05:05,470
are so much data that you
can't have Python sort of know

108
00:05:05,470 --> 00:05:06,180
all the data.

109
00:05:06,180 --> 00:05:07,980
You literally have
hundreds of thousands

110
00:05:07,980 --> 00:05:11,890
of files on your
computer's hard drive

111
00:05:11,890 --> 00:05:13,460
and which one are
you going to read.

112
00:05:13,460 --> 00:05:15,790
So there's a step
that you have to do,

113
00:05:15,790 --> 00:05:19,860
but you call this built
in function, called open,

114
00:05:19,860 --> 00:05:21,860
and say oh this is the
file I want to work with,

115
00:05:21,860 --> 00:05:23,570
of the hundreds of
thousands, and then

116
00:05:23,570 --> 00:05:27,510
once you do you've kind of got
this little connector into it.

117
00:05:27,510 --> 00:05:31,820
And the open is a built
in function inside Python

118
00:05:31,820 --> 00:05:33,930
so let's say goodbye to that.

119
00:05:33,930 --> 00:05:37,780
The open function is built
in function in Python

120
00:05:37,780 --> 00:05:39,820
and it takes two parameters.

121
00:05:39,820 --> 00:05:45,810
The first parameter is the name
of the file, like M box dot txt

122
00:05:45,810 --> 00:05:47,947
and then the second is how
you're going to read it.

123
00:05:47,947 --> 00:05:49,530
Are you going to
read it are you going

124
00:05:49,530 --> 00:05:51,710
to write it, et cetera,
now most the time we'll

125
00:05:51,710 --> 00:05:53,170
be reading our files.

126
00:05:53,170 --> 00:05:55,350
So we call the open
function, and pass it

127
00:05:55,350 --> 00:05:57,810
in the name of the
file we want to open,

128
00:05:57,810 --> 00:05:59,330
and then how we want to read it.

129
00:05:59,330 --> 00:06:02,050
Now you can leave this
second parameter off

130
00:06:02,050 --> 00:06:04,650
and it assumes that you're
going to want to read the file.

131
00:06:04,650 --> 00:06:10,490
Now, when the open
is successful,

132
00:06:10,490 --> 00:06:12,970
it doesn't actually
read all of the data,

133
00:06:12,970 --> 00:06:17,720
because the memory is small,
small compared to a hard drive

134
00:06:17,720 --> 00:06:21,470
so you have to sort of step
through the data you'll tell it

135
00:06:21,470 --> 00:06:22,610
when to read it.

136
00:06:22,610 --> 00:06:26,670
So the act of opening it is not
actually reading all the data

137
00:06:26,670 --> 00:06:31,190
it is creating kind of like a
connection between the memory

138
00:06:31,190 --> 00:06:32,940
and the data that's
on the hard drive,

139
00:06:32,940 --> 00:06:39,975
right, it's connecting between--
that's going to fall down.

140
00:06:39,975 --> 00:06:41,915
Are you going to
stand up that way?

141
00:06:41,915 --> 00:06:43,790
Should come up with a
way to make that stand.

142
00:06:43,790 --> 00:06:46,490

143
00:06:46,490 --> 00:06:49,230
So it's a connection,
so that your programs

144
00:06:49,230 --> 00:06:53,380
kind of running in here and the
file handle is just sort of a,

145
00:06:53,380 --> 00:06:57,290
it's like a phone call between
your memory and your disk

146
00:06:57,290 --> 00:06:57,790
drive.

147
00:06:57,790 --> 00:06:59,498
It's not the actual
data, the actual data

148
00:06:59,498 --> 00:07:01,920
is still sitting
on the disk drive.

149
00:07:01,920 --> 00:07:06,030
OK, so a graphical way
to take a look at this,

150
00:07:06,030 --> 00:07:10,420
is this file handle, the
thing that comes back

151
00:07:10,420 --> 00:07:14,070
from the open request, the open
goes and finds the file out

152
00:07:14,070 --> 00:07:16,500
on the disk drive
yada yada yada,

153
00:07:16,500 --> 00:07:18,710
and then the handle
is something that

154
00:07:18,710 --> 00:07:22,160
lives in the memory that is
sort of like the thing that

155
00:07:22,160 --> 00:07:25,820
maintains its connection
to where all the data is

156
00:07:25,820 --> 00:07:28,890
on the disk or on the
SD RAM that's in it.

157
00:07:28,890 --> 00:07:30,430
So the handle is
not all the data,

158
00:07:30,430 --> 00:07:34,170
but it is a mechanism that you
can use to get at the data.

159
00:07:34,170 --> 00:07:35,780
So if you print
it out, it doesn't

160
00:07:35,780 --> 00:07:40,110
have all the data from the file,
it says I am a file handle,

161
00:07:40,110 --> 00:07:44,100
that's opened this file
and we're in read mode.

162
00:07:44,100 --> 00:07:45,790
So it doesn't
actually have the data

163
00:07:45,790 --> 00:07:48,402
even though this is the
data that's in the file.

164
00:07:48,402 --> 00:07:49,860
And then we have
operations that we

165
00:07:49,860 --> 00:07:52,380
do to the handle like open
it, close it, read it, write

166
00:07:52,380 --> 00:07:53,779
it, so we do things to those.

167
00:07:53,779 --> 00:07:55,570
So the handle, and then
through the handle,

168
00:07:55,570 --> 00:07:57,180
it actually changes
what's on the disk

169
00:07:57,180 --> 00:07:59,480
or reads what's on the
disk, so the handle

170
00:07:59,480 --> 00:08:02,910
is kind of a thing
that's not there.

171
00:08:02,910 --> 00:08:06,182
If you attempt to open a file,
and the name of the file--

172
00:08:06,182 --> 00:08:07,640
now the way we're
going to do these

173
00:08:07,640 --> 00:08:11,550
is, these need to be in the
same folder on your computer

174
00:08:11,550 --> 00:08:14,159
as your Python code.

175
00:08:14,159 --> 00:08:15,700
Now there are trickier
ways to do it,

176
00:08:15,700 --> 00:08:17,210
but we're going
to keep it simple.

177
00:08:17,210 --> 00:08:19,620
This is the name of a
file in the same folder,

178
00:08:19,620 --> 00:08:22,760
as the Python code
that you're running.

179
00:08:22,760 --> 00:08:27,320
And if it's not, then we
get of course a trace back

180
00:08:27,320 --> 00:08:30,000
and we're used to using
reading trace backs by now,

181
00:08:30,000 --> 00:08:32,929
no such file directory
stuff dot txt oh of course

182
00:08:32,929 --> 00:08:34,789
I forgot to save it
or I typed it wrong.

183
00:08:34,789 --> 00:08:37,799

184
00:08:37,799 --> 00:08:40,750
So the next thing
we have to learn

185
00:08:40,750 --> 00:08:42,610
is the notion of the
newline character.

186
00:08:42,610 --> 00:08:45,360
We haven't seen this
so far, but there's

187
00:08:45,360 --> 00:08:47,990
a special character
in files that

188
00:08:47,990 --> 00:08:51,739
is used to indicate
the end of a line,

189
00:08:51,739 --> 00:08:53,780
because these text files
that we've been writing,

190
00:08:53,780 --> 00:08:55,620
including the Python
programs that you have,

191
00:08:55,620 --> 00:08:57,720
are organized into lines.

192
00:08:57,720 --> 00:08:59,610
Each line has a variable
length and there's

193
00:08:59,610 --> 00:09:02,890
a special non printing character
that you just don't see.

194
00:09:02,890 --> 00:09:06,440
Now you see it, because you
see a line, multiple lines,

195
00:09:06,440 --> 00:09:09,990
but you don't see
the character itself.

196
00:09:09,990 --> 00:09:14,160
So it turns out that this
character is very important,

197
00:09:14,160 --> 00:09:16,630
because the data is just a
stream of characters on disk

198
00:09:16,630 --> 00:09:18,810
and then it's
punctuated by new lines,

199
00:09:18,810 --> 00:09:22,200
to tell it when it's
time to end a line.

200
00:09:22,200 --> 00:09:25,800
So, if we are building
a string constant

201
00:09:25,800 --> 00:09:30,040
for new line is backslash n.

202
00:09:30,040 --> 00:09:33,671
And so when we make
a string that we

203
00:09:33,671 --> 00:09:35,170
want to have a new
line in it, we'll

204
00:09:35,170 --> 00:09:38,320
say hello back slash n world.

205
00:09:38,320 --> 00:09:40,020
And then if you
print it out one way

206
00:09:40,020 --> 00:09:41,400
you actually see
the backslash n,

207
00:09:41,400 --> 00:09:43,550
but then if use the
print to print it out

208
00:09:43,550 --> 00:09:47,520
you see sort of like
the-- it moves back down

209
00:09:47,520 --> 00:09:49,590
to the left margin and down.

210
00:09:49,590 --> 00:09:53,510
So sometimes you see the
slash n and sometimes it's

211
00:09:53,510 --> 00:09:58,332
shown as movement
right, it moves it.

212
00:09:58,332 --> 00:09:59,790
The other thing
that's important is

213
00:09:59,790 --> 00:10:02,860
even though we represent this as
two characters, the backslash n

214
00:10:02,860 --> 00:10:05,180
is represented as two
characters in a string,

215
00:10:05,180 --> 00:10:06,360
it's actually one character.

216
00:10:06,360 --> 00:10:10,690
So if we print it out
we see x new line y,

217
00:10:10,690 --> 00:10:13,510
and if we ask how many
characters are in stuff, which

218
00:10:13,510 --> 00:10:15,780
is this string, it says three.

219
00:10:15,780 --> 00:10:17,530
That's important.

220
00:10:17,530 --> 00:10:22,190
OK there is one, two, three, the
new line is a single character.

221
00:10:22,190 --> 00:10:25,620
This is just a syntax that
we used to sort of encode

222
00:10:25,620 --> 00:10:27,870
a new line in a string.

223
00:10:27,870 --> 00:10:29,460
OK.

224
00:10:29,460 --> 00:10:35,380
So even though these are just
a long sequence of characters

225
00:10:35,380 --> 00:10:37,610
punctuated by new
lines visually,

226
00:10:37,610 --> 00:10:39,820
text editors and
operating systems

227
00:10:39,820 --> 00:10:43,980
show these files to us
as a sequence of lines.

228
00:10:43,980 --> 00:10:46,850
And it doesn't take very long to
just start thinking about them

229
00:10:46,850 --> 00:10:48,350
as a sequence of lines.

230
00:10:48,350 --> 00:10:49,850
As a matter of fact,
maybe you never

231
00:10:49,850 --> 00:10:51,537
wish I never told
you about new lines.

232
00:10:51,537 --> 00:10:53,120
But when we start
reading files, we're

233
00:10:53,120 --> 00:10:54,980
going to have to deal
with these new lines,

234
00:10:54,980 --> 00:10:58,130
so the way that we sort of
have to mentally visualize

235
00:10:58,130 --> 00:11:00,420
of what these text
files look like,

236
00:11:00,420 --> 00:11:03,990
is they have a new line that
punctuates the end of the line.

237
00:11:03,990 --> 00:11:06,080
Now in reality if
we look at this,

238
00:11:06,080 --> 00:11:09,134
this r really comes
right after it.

239
00:11:09,134 --> 00:11:10,800
Right, this is all a
bunch of characters

240
00:11:10,800 --> 00:11:13,180
and the new lines
are punctuation.

241
00:11:13,180 --> 00:11:15,840
OK to say this is first line,
second line, third line,

242
00:11:15,840 --> 00:11:16,700
fourth line.

243
00:11:16,700 --> 00:11:18,750
So you've got to think
that each of these things

244
00:11:18,750 --> 00:11:21,675
is here sitting at
the end of the line.

245
00:11:21,675 --> 00:11:23,880
And so the number of
characters in this line

246
00:11:23,880 --> 00:11:25,050
include that new line.

247
00:11:25,050 --> 00:11:27,000
Now the new line
is one character.

248
00:11:27,000 --> 00:11:28,560
OK?

249
00:11:28,560 --> 00:11:31,880
So, how do we read these files?

250
00:11:31,880 --> 00:11:36,090
Well we've already talked
about doing an open x file.

251
00:11:36,090 --> 00:11:37,860
And I'm just--
this x file, again,

252
00:11:37,860 --> 00:11:40,450
that's just an mnemonic
name that I made up.

253
00:11:40,450 --> 00:11:43,710
This is a handle, remember
it's not all the data,

254
00:11:43,710 --> 00:11:46,060
but the handle is the way
that we can read the data,

255
00:11:46,060 --> 00:11:48,710
we can use it as
an access point.

256
00:11:48,710 --> 00:11:50,770
The coolest way to
read a file if it's

257
00:11:50,770 --> 00:11:53,160
a text file in
multiple lines, is

258
00:11:53,160 --> 00:11:58,810
to use a determinant loop, a
for loop, for cheese in x files.

259
00:11:58,810 --> 00:12:02,390
So this-- remember we would
put a list of numbers or string

260
00:12:02,390 --> 00:12:03,210
here.

261
00:12:03,210 --> 00:12:05,230
Now we've put a
file handle here.

262
00:12:05,230 --> 00:12:08,550
Python knows automatically
that each time

263
00:12:08,550 --> 00:12:10,500
we're going to run this
loop, is going to go

264
00:12:10,500 --> 00:12:11,990
to the next line of the file.

265
00:12:11,990 --> 00:12:13,120
Automatically.

266
00:12:13,120 --> 00:12:15,930
For, a cheese is just a stupid
name that I came up with,

267
00:12:15,930 --> 00:12:18,290
it probably would be better
to call it line rather

268
00:12:18,290 --> 00:12:23,030
than cheese, but for
cheese in and then it goes,

269
00:12:23,030 --> 00:12:25,760
each file and then stops
when it reads the whole file.

270
00:12:25,760 --> 00:12:30,280
So this line will print
out every line in the file.

271
00:12:30,280 --> 00:12:31,460
That's how you do it.

272
00:12:31,460 --> 00:12:39,420
These three lines open a file
read every line in the file.

273
00:12:39,420 --> 00:12:43,080
So a file handle itself, is
a special kind of a sequence,

274
00:12:43,080 --> 00:12:45,340
much like a list of
numbers or a string

275
00:12:45,340 --> 00:12:47,190
is a sequence of characters.

276
00:12:47,190 --> 00:12:49,830
So one of the things we can do,
to combine one of our counting

277
00:12:49,830 --> 00:12:53,360
idioms, is count the
number of lines in a file.

278
00:12:53,360 --> 00:12:56,990
OK and so how we would do that
as we would open the file, set

279
00:12:56,990 --> 00:12:58,410
a counter to zero,
this time I'll

280
00:12:58,410 --> 00:13:01,690
use a mnemonic variable called
count, for line in f hand

281
00:13:01,690 --> 00:13:04,010
that says, run this
indented text once

282
00:13:04,010 --> 00:13:06,540
for each line in the file,
free time in the file

283
00:13:06,540 --> 00:13:10,240
add count equals count plus
1, when the for loop is done,

284
00:13:10,240 --> 00:13:13,020
print the count.

285
00:13:13,020 --> 00:13:15,850
Pretty straightforward,
very few other languages

286
00:13:15,850 --> 00:13:18,000
are capable of
writing that program

287
00:13:18,000 --> 00:13:22,290
in as quick and as dense, as
to sync the way as Python is.

288
00:13:22,290 --> 00:13:25,100
Python does a really,
really nice job of this.

289
00:13:25,100 --> 00:13:28,130
OK so that's how
you count the lines.

290
00:13:28,130 --> 00:13:31,260
Open it write a for
loop and then add one.

291
00:13:31,260 --> 00:13:35,030
Now we can't just say, so what
you can't and this gives you

292
00:13:35,030 --> 00:13:40,620
a sense, you can't
say Len f hand.

293
00:13:40,620 --> 00:13:42,650
And that's because this
isn't really the data,

294
00:13:42,650 --> 00:13:45,980
that's sort of you have to
like pull, pull it and read

295
00:13:45,980 --> 00:13:48,580
it to get the data out of
it, but though we'll see

296
00:13:48,580 --> 00:13:51,050
another way reading it later.

297
00:13:51,050 --> 00:13:55,110
OK so that's counting
the lines in a file.

298
00:13:55,110 --> 00:13:59,000
It turns out you can also
read the entire file.

299
00:13:59,000 --> 00:14:02,110
Now if you read the entire file
it's not broken into lines.

300
00:14:02,110 --> 00:14:04,030
You're getting all the
characters punctuated

301
00:14:04,030 --> 00:14:06,350
by new lines and
you get everything.

302
00:14:06,350 --> 00:14:09,360
Now you don't want to
read this if it's too big.

303
00:14:09,360 --> 00:14:12,750
So it's going to all try to read
into the memory of the computer

304
00:14:12,750 --> 00:14:14,205
and if the memory's
not big enough

305
00:14:14,205 --> 00:14:16,100
you just slow down to a crawl.

306
00:14:16,100 --> 00:14:19,580
But it's a real tiny file,
this works just fine.

307
00:14:19,580 --> 00:14:23,100
And so we have sort of
real-- we open a file

308
00:14:23,100 --> 00:14:25,460
and we say f hand dot read.

309
00:14:25,460 --> 00:14:28,630
This is basically saying
hey, dear fhand, read it all

310
00:14:28,630 --> 00:14:32,050
and return it to me as a string.

311
00:14:32,050 --> 00:14:34,730
So that's a string with all the
lines of the file concatenated

312
00:14:34,730 --> 00:14:37,150
together with new
lines, which is actually

313
00:14:37,150 --> 00:14:38,800
exactly what's in the file.

314
00:14:38,800 --> 00:14:40,180
It's the raw data.

315
00:14:40,180 --> 00:14:42,530
That for loop sort of
looks for the new line

316
00:14:42,530 --> 00:14:44,030
and does all the
stuff automatically

317
00:14:44,030 --> 00:14:46,400
for us that's quite nice.

318
00:14:46,400 --> 00:14:49,410
So then we can like because
imp is a string at this point,

319
00:14:49,410 --> 00:14:50,940
we can just print
the length of it,

320
00:14:50,940 --> 00:14:55,680
we can say oh, there's
94,626 characters that

321
00:14:55,680 --> 00:14:56,780
came from that file.

322
00:14:56,780 --> 00:15:02,010
It reads the whole thing, whole
file, reads the whole file.

323
00:15:02,010 --> 00:15:04,380
We can also do things
like slice it now

324
00:15:04,380 --> 00:15:08,395
and so this is the first
20 characters from zero

325
00:15:08,395 --> 00:15:10,670
up to but not including 20.

326
00:15:10,670 --> 00:15:12,630
So this is our file.

327
00:15:12,630 --> 00:15:13,470
OK.

328
00:15:13,470 --> 00:15:15,660
So that's reading
through the whole file.

329
00:15:15,660 --> 00:15:17,670
So let me go back a little bit.

330
00:15:17,670 --> 00:15:20,380
This is the file that
we're going to play with,

331
00:15:20,380 --> 00:15:23,550
this file here that we're going
to play with in this class is

332
00:15:23,550 --> 00:15:24,920
a mailbox file.

333
00:15:24,920 --> 00:15:27,170
And this is actual real data
and these are real people

334
00:15:27,170 --> 00:15:29,586
and these are real dates,
having to do with an open source

335
00:15:29,586 --> 00:15:31,815
project that I worked
on called Sakai.

336
00:15:31,815 --> 00:15:36,060
I actually have a tattoo of
Sakai here on my shoulder.

337
00:15:36,060 --> 00:15:39,330
Maybe in an upcoming lecture
I'll have a short sleeve shirt

338
00:15:39,330 --> 00:15:42,470
and show you my tattoo but
for now I can't because I've

339
00:15:42,470 --> 00:15:43,740
got clothes on.

340
00:15:43,740 --> 00:15:52,020
So but this is real data, it's
the mbox dot txt and mbox dot

341
00:15:52,020 --> 00:15:52,520
txt file.

342
00:15:52,520 --> 00:15:54,030
So, so that's the
file that we're

343
00:15:54,030 --> 00:15:56,300
going to use for most of
the next few assignments.

344
00:15:56,300 --> 00:15:58,330
It'll be the same file,
you'll get tired of it,

345
00:15:58,330 --> 00:16:00,889
and you get to know all these
people Steven and Chen Wen

346
00:16:00,889 --> 00:16:02,180
and all the people in the file.

347
00:16:02,180 --> 00:16:05,720

348
00:16:05,720 --> 00:16:10,480
So we can search for
lines that have a prefix.

349
00:16:10,480 --> 00:16:14,390
This is kind of find pattern
from the looping lecture.

350
00:16:14,390 --> 00:16:17,412
So we're going to go through
a list of lines in a file

351
00:16:17,412 --> 00:16:19,370
and we're going to only
print out the ones that

352
00:16:19,370 --> 00:16:20,900
match a certain thing.

353
00:16:20,900 --> 00:16:22,636
So again, we open
the file up, we're

354
00:16:22,636 --> 00:16:24,510
going to write a for
loop that's going to say

355
00:16:24,510 --> 00:16:26,610
for each line in the file.

356
00:16:26,610 --> 00:16:30,460
If the line, and then we
can call a utility function

357
00:16:30,460 --> 00:16:32,660
inside of string because
line is a string,

358
00:16:32,660 --> 00:16:35,210
if line starts with
from, print it out.

359
00:16:35,210 --> 00:16:37,220
So this means it's going
to loop through all

360
00:16:37,220 --> 00:16:39,050
of the lines of
the file and it's

361
00:16:39,050 --> 00:16:40,690
going to print the
ones that start

362
00:16:40,690 --> 00:16:44,540
with the string from colon.

363
00:16:44,540 --> 00:16:48,710
OK again four lines
complete Python program

364
00:16:48,710 --> 00:16:51,410
to read this file and
print the lines that

365
00:16:51,410 --> 00:16:54,990
have a prefix of from.

366
00:16:54,990 --> 00:17:01,060
So if you run this program,
and I suggest that you do,

367
00:17:01,060 --> 00:17:03,830
this is what the output's
going to look like.

368
00:17:03,830 --> 00:17:05,810
And it's like wait a second.

369
00:17:05,810 --> 00:17:12,254
I'm seeing the lines, seeing
the lines, that have the froms

370
00:17:12,254 --> 00:17:13,800
but then I get
these blank lines.

371
00:17:13,800 --> 00:17:16,550

372
00:17:16,550 --> 00:17:17,780
And why is that?

373
00:17:17,780 --> 00:17:20,069
Why this blank lines there?

374
00:17:20,069 --> 00:17:24,440
If I look at the program, I mean
I'm not printing blank lines,

375
00:17:24,440 --> 00:17:26,430
I'm only printing lines
that start with from.

376
00:17:26,430 --> 00:17:27,690
I'm not doing that, so why?

377
00:17:27,690 --> 00:17:30,470

378
00:17:30,470 --> 00:17:31,220
What do you think?

379
00:17:31,220 --> 00:17:34,408
Give you a second.

380
00:17:34,408 --> 00:17:38,100
I've certainly done enough
foreshadowing in this lecture.

381
00:17:38,100 --> 00:17:41,100
Well it turns out these
new lines are the problem.

382
00:17:41,100 --> 00:17:43,380
So it turns out that
the print, we've

383
00:17:43,380 --> 00:17:45,270
been doing this all
along you just didn't, we

384
00:17:45,270 --> 00:17:46,600
didn't make a fuss about it.

385
00:17:46,600 --> 00:17:49,060
The print adds a new line
at the end of everything

386
00:17:49,060 --> 00:17:50,180
that it prints.

387
00:17:50,180 --> 00:17:51,680
So these yellow new
lines are coming

388
00:17:51,680 --> 00:17:53,280
from the print statement.

389
00:17:53,280 --> 00:17:58,110
But when we read the file,
each line ends in a new line.

390
00:17:58,110 --> 00:18:00,560
So these green new lines
are actually from the file.

391
00:18:00,560 --> 00:18:03,180

392
00:18:03,180 --> 00:18:06,300
They're the ones from the file.

393
00:18:06,300 --> 00:18:08,560
So what's happening is
we're seeing two lines,

394
00:18:08,560 --> 00:18:11,880
and so that turns
into a blank line.

395
00:18:11,880 --> 00:18:14,065
So how do we deal with that?

396
00:18:14,065 --> 00:18:15,440
Well, we've got
a string function

397
00:18:15,440 --> 00:18:18,130
that conveniently
solves that problem.

398
00:18:18,130 --> 00:18:19,100
OK.

399
00:18:19,100 --> 00:18:21,600
And that is we're going
to call our strip.

400
00:18:21,600 --> 00:18:24,460
If you recall we had
strip, l strip and r strip

401
00:18:24,460 --> 00:18:27,150
to strip white space on
one side, on the other side

402
00:18:27,150 --> 00:18:28,440
or on both sides.

403
00:18:28,440 --> 00:18:30,425
So in this one we're
going to use r strip.

404
00:18:30,425 --> 00:18:32,050
We're going to say,
we're going to read

405
00:18:32,050 --> 00:18:35,530
the line that this line is
going to have a new line in it.

406
00:18:35,530 --> 00:18:38,510
Our strip says pull white space
and the new lines are also

407
00:18:38,510 --> 00:18:40,230
comma'd as white space.

408
00:18:40,230 --> 00:18:42,830
Blanks or new lines
are white space.

409
00:18:42,830 --> 00:18:46,630
And then we're going to replace
this with no new line in it,

410
00:18:46,630 --> 00:18:48,740
then we're going to ask
if it starts with a from

411
00:18:48,740 --> 00:18:50,380
and then we're
going to print out.

412
00:18:50,380 --> 00:18:52,900
And then we go and we're going
to see exactly what we're

413
00:18:52,900 --> 00:18:55,100
looking for in this file.

414
00:18:55,100 --> 00:18:56,170
And there's no new lines.

415
00:18:56,170 --> 00:18:59,410
Now they're, so the new
line that's coming out here,

416
00:18:59,410 --> 00:19:03,230
is the one from the print,
not the one from the file

417
00:19:03,230 --> 00:19:04,640
because the one
from the file got

418
00:19:04,640 --> 00:19:07,960
wiped out by that
particular line.

419
00:19:07,960 --> 00:19:09,730
OK.

420
00:19:09,730 --> 00:19:13,380
So another general pattern
of these file based loops

421
00:19:13,380 --> 00:19:17,520
that we have done this,
is a skipping pattern.

422
00:19:17,520 --> 00:19:19,962
Now you can do--
the non skipping

423
00:19:19,962 --> 00:19:21,420
pattern is where
you're saying, I'm

424
00:19:21,420 --> 00:19:23,800
going to look for lines
that start with from

425
00:19:23,800 --> 00:19:25,640
and do something to them.

426
00:19:25,640 --> 00:19:29,619
Sometimes you want to
do something to all,

427
00:19:29,619 --> 00:19:31,910
you want to say here's a
bunch lines I'm going to skip,

428
00:19:31,910 --> 00:19:33,368
and then I'm going
to do something.

429
00:19:33,368 --> 00:19:36,470
So the skipping
pattern uses continue.

430
00:19:36,470 --> 00:19:38,870
And so the first few
lines here are the same.

431
00:19:38,870 --> 00:19:41,790
We open a file, we read
each line in the file

432
00:19:41,790 --> 00:19:43,800
then we're going to strip
off the white space.

433
00:19:43,800 --> 00:19:45,660
You're going to get tired
typing these three lines,

434
00:19:45,660 --> 00:19:47,290
because you're going
to do it a lot.

435
00:19:47,290 --> 00:19:49,690
Open the file, start
reading the file,

436
00:19:49,690 --> 00:19:51,870
strip the white
space for each line.

437
00:19:51,870 --> 00:19:57,770
And you can make it so that
you can look for some fact.

438
00:19:57,770 --> 00:20:01,260
In this case, I'm going to say
if not line starts with from,

439
00:20:01,260 --> 00:20:05,240
means this is true for all the
lines this don't start from,

440
00:20:05,240 --> 00:20:06,030
continue.

441
00:20:06,030 --> 00:20:08,600
If you remember
continue goes up.

442
00:20:08,600 --> 00:20:11,740
So the continue says, I'm
done, it finishes the iteration

443
00:20:11,740 --> 00:20:15,210
and it doesn't do
anything down here.

444
00:20:15,210 --> 00:20:18,137
And so this is-- and
then we can do something.

445
00:20:18,137 --> 00:20:19,595
So I've kind of
flipped this, where

446
00:20:19,595 --> 00:20:23,307
I said, these are the
things I'm interested in,

447
00:20:23,307 --> 00:20:25,015
that's lines that
start with from, so I'm

448
00:20:25,015 --> 00:20:26,764
going to skip the lines
that don't, so I'm

449
00:20:26,764 --> 00:20:27,880
going to use continue.

450
00:20:27,880 --> 00:20:31,620
Either way you can do it,
depending on the complexity

451
00:20:31,620 --> 00:20:34,010
or how much-- often when
you're-- this is a good pattern

452
00:20:34,010 --> 00:20:36,300
when you have lots of
lines of code down here,

453
00:20:36,300 --> 00:20:39,300
that you're going to do
a lot of cool stuff with.

454
00:20:39,300 --> 00:20:43,430
You can also use things like
in, to select lines, right?

455
00:20:43,430 --> 00:20:47,170
So I'm going to look
for lines that have

456
00:20:47,170 --> 00:20:51,280
at uct dot ac dot za in them.

457
00:20:51,280 --> 00:20:54,417
So again I'm going to
open it up, open these, go

458
00:20:54,417 --> 00:20:55,833
through each line
in the file, I'm

459
00:20:55,833 --> 00:20:57,990
going to strip their
white space out

460
00:20:57,990 --> 00:21:06,540
and if not uct if this, if
this string is not in line,

461
00:21:06,540 --> 00:21:07,940
then I'm going to continue.

462
00:21:07,940 --> 00:21:10,660
So it's a way for me to
skip all of the lines that

463
00:21:10,660 --> 00:21:14,010
don't have this string in it.

464
00:21:14,010 --> 00:21:17,199
So these lines dupes,
that one has it too,

465
00:21:17,199 --> 00:21:18,740
and then we're going
to print it out.

466
00:21:18,740 --> 00:21:23,180
Then we'll print out the
ones that make it past here.

467
00:21:23,180 --> 00:21:23,780
OK.

468
00:21:23,780 --> 00:21:27,550
So, but in is another
way to do searching.

469
00:21:27,550 --> 00:21:30,620
Like it starts with et cetera.

470
00:21:30,620 --> 00:21:33,390
So one more thing that
you might want to try

471
00:21:33,390 --> 00:21:37,600
is, so we can count right?

472
00:21:37,600 --> 00:21:41,910
Now and this is a pattern for
prompting for a file name.

473
00:21:41,910 --> 00:21:46,370
And so you'll get tired
of sort of changing

474
00:21:46,370 --> 00:21:48,730
your code every time you want
to open a different file,

475
00:21:48,730 --> 00:21:51,460
because you probably want to
run the program with mbox one,

476
00:21:51,460 --> 00:21:54,920
sandbox short, because it
just, just so you can test it

477
00:21:54,920 --> 00:21:56,599
with different things of data.

478
00:21:56,599 --> 00:21:57,890
So here's just another pattern.

479
00:21:57,890 --> 00:22:01,910
We add this line to say raw
input enter the file name,

480
00:22:01,910 --> 00:22:04,660
and there you go, we'll
type in the file name,

481
00:22:04,660 --> 00:22:07,010
and then the thing that we
open is whatever we entered

482
00:22:07,010 --> 00:22:09,115
as the file name, and
then the rest of it

483
00:22:09,115 --> 00:22:11,270
is pretty much yada yada.

484
00:22:11,270 --> 00:22:14,090
So here I'm, reading
the whole file,

485
00:22:14,090 --> 00:22:17,190
if the line starts with subject,
count equals count plus one,

486
00:22:17,190 --> 00:22:21,860
and then there were 1797
subject lines in inbox dot txt.

487
00:22:21,860 --> 00:22:25,900
There were 27 subject lines
and mbox short dot txt.

488
00:22:25,900 --> 00:22:26,490
OK.

489
00:22:26,490 --> 00:22:29,030
So that's prompting
for the file names.

490
00:22:29,030 --> 00:22:33,540
Now open-- the open
statement fails

491
00:22:33,540 --> 00:22:37,070
if the file name doesn't exist,
so you might want to add a try

492
00:22:37,070 --> 00:22:38,190
and except around that.

493
00:22:38,190 --> 00:22:40,620
If you want to, if you're
just writing code for yourself

494
00:22:40,620 --> 00:22:43,820
and you it is OK, then you
don't have to write try except,

495
00:22:43,820 --> 00:22:50,630
but if you want to catch it,
and catch a bad file name,

496
00:22:50,630 --> 00:22:55,880
then you take the open and
turn into these four lines.

497
00:22:55,880 --> 00:22:59,047
So this is the code that
we think might blow up

498
00:22:59,047 --> 00:23:01,380
and it's going to blow up we
know it's going to blow up.

499
00:23:01,380 --> 00:23:04,470
If they enter a bad file
name like nana booboo,

500
00:23:04,470 --> 00:23:06,520
right, this is going to blow up.

501
00:23:06,520 --> 00:23:07,750
So what do we do?

502
00:23:07,750 --> 00:23:08,960
We use try and except.

503
00:23:08,960 --> 00:23:11,530
We put try around that,
we're going to take out

504
00:23:11,530 --> 00:23:14,170
some insurance on
that particular line,

505
00:23:14,170 --> 00:23:17,260
and then if it fails we're
going to print this message

506
00:23:17,260 --> 00:23:20,510
and then say exit, to get out.

507
00:23:20,510 --> 00:23:27,520
So if you get a good file, if
you get a good file it works,

508
00:23:27,520 --> 00:23:31,650
skips the except then runs the
thing, prints out the count.

509
00:23:31,650 --> 00:23:33,480
That's what's happening here.

510
00:23:33,480 --> 00:23:38,100
If on the other hand you
get a bad file, comes here,

511
00:23:38,100 --> 00:23:43,310
open blows up, runs the except
prints this out and then quits.

512
00:23:43,310 --> 00:23:46,790
So that's how this one
works with a bad file

513
00:23:46,790 --> 00:23:48,370
and now no trace back.

514
00:23:48,370 --> 00:23:48,870
Right.

515
00:23:48,870 --> 00:23:53,820

516
00:23:53,820 --> 00:23:58,630
So we are, it's kind
of a short lecture.

517
00:23:58,630 --> 00:24:01,470
Were done with Chapter Seven .

518
00:24:01,470 --> 00:24:05,690
We open a file,
we read the file,

519
00:24:05,690 --> 00:24:09,370
we take out white space
at the end with r strip,

520
00:24:09,370 --> 00:24:11,670
we used string functions.

521
00:24:11,670 --> 00:24:14,640
So this is kind of
putting it all together

522
00:24:14,640 --> 00:24:18,360
and it's kind of short little
programs now, so it's not--

523
00:24:18,360 --> 00:24:22,137
and you know,
starting now, we're

524
00:24:22,137 --> 00:24:23,970
going to start putting
these things together

525
00:24:23,970 --> 00:24:26,140
and start actually
doing work because now

526
00:24:26,140 --> 00:24:28,100
we have from the
first few chapters

527
00:24:28,100 --> 00:24:30,370
we have basic
capabilities of Python,

528
00:24:30,370 --> 00:24:32,494
now we have some
data to work with.

529
00:24:32,494 --> 00:24:34,910
Going forward we're going to
do increasingly sophisticated

530
00:24:34,910 --> 00:24:36,510
things with that data.

531
00:24:36,510 --> 00:24:39,520
So I can't wait to see
you in the next lecture.