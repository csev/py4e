1
00:00:00,000 --> 00:00:01,710

2
00:00:01,710 --> 00:00:06,160
Hello and welcome to yet another
worked exercise for Python

3
00:00:06,160 --> 00:00:08,710
for Informatics,
Exploring Information.

4
00:00:08,710 --> 00:00:10,100
I'm Charles Severance.

5
00:00:10,100 --> 00:00:14,360
I am your tour guide to this
particular worked example.

6
00:00:14,360 --> 00:00:17,450
And this material is
Creative Commons attribution.

7
00:00:17,450 --> 00:00:19,720
And I hope to see the
clever and cool things

8
00:00:19,720 --> 00:00:21,240
that you can do with it.

9
00:00:21,240 --> 00:00:24,880
This is part of my
www.PythonLearn.com website

10
00:00:24,880 --> 00:00:29,600
that helps you to learn Python,
from the very beginning,

11
00:00:29,600 --> 00:00:33,077
with videos and other
materials to help you go along

12
00:00:33,077 --> 00:00:33,660
with the book.

13
00:00:33,660 --> 00:00:35,826
Of course, the book is
Creative Commons attribution.

14
00:00:35,826 --> 00:00:39,380
So pretty much everything
here is free for you

15
00:00:39,380 --> 00:00:43,490
to use and adapt as you see fit.

16
00:00:43,490 --> 00:00:46,200
So we're taking a sort
of a working example

17
00:00:46,200 --> 00:00:49,710
from the tuples chapter.

18
00:00:49,710 --> 00:00:56,330
And the task that we're given
is find the 10 most common words

19
00:00:56,330 --> 00:00:58,630
in a file.

20
00:00:58,630 --> 00:01:01,210
And we will do that.

21
00:01:01,210 --> 00:01:03,890
So if we take a look at the
basic overall structure,

22
00:01:03,890 --> 00:01:06,070
we're going to read a file.

23
00:01:06,070 --> 00:01:07,740
We're going to
make a dictionary--

24
00:01:07,740 --> 00:01:10,890
an empty dictionary--
and we're going

25
00:01:10,890 --> 00:01:13,070
to read the file line by line.

26
00:01:13,070 --> 00:01:14,480
We're going to split each line.

27
00:01:14,480 --> 00:01:17,430
Then we're going to
loop through the line,

28
00:01:17,430 --> 00:01:20,630
using the dictionary pattern
from the dictionaries chapter

29
00:01:20,630 --> 00:01:23,410
using get, so that
we can both access

30
00:01:23,410 --> 00:01:29,370
and initialize new words that we
haven't seen at the same time.

31
00:01:29,370 --> 00:01:32,160
And then we need to sort.

32
00:01:32,160 --> 00:01:35,360
But we need to sort by the
value instead of the key.

33
00:01:35,360 --> 00:01:38,230
So we're going to make a list.

34
00:01:38,230 --> 00:01:40,540
And then we're going to
loop through the results

35
00:01:40,540 --> 00:01:41,800
of the dictionary.

36
00:01:41,800 --> 00:01:45,540
And we're going to
make a new tuple.

37
00:01:45,540 --> 00:01:47,150
But instead of being
key-value-- which

38
00:01:47,150 --> 00:01:50,390
is what you get from items--
we're going to do value-key.

39
00:01:50,390 --> 00:01:53,800
And then we'll sort
that in reverse order.

40
00:01:53,800 --> 00:01:58,560
And then we'll simply print
the first 10 elements of that

41
00:01:58,560 --> 00:01:59,970
sorted in reverse order.

42
00:01:59,970 --> 00:02:03,470
And because we're constructing
carefully this new tuple--

43
00:02:03,470 --> 00:02:07,440
value-key-- in the
right order, value

44
00:02:07,440 --> 00:02:09,000
will be what's sorted on first.

45
00:02:09,000 --> 00:02:11,730
And then in cases where value
matches, it will sort on key.

46
00:02:11,730 --> 00:02:14,890
Whereas if we just took items--
which is key-value tuples--

47
00:02:14,890 --> 00:02:16,810
then it would sort on the key.

48
00:02:16,810 --> 00:02:17,920
And that's quite easy.

49
00:02:17,920 --> 00:02:20,690
So that's the basic idea.

50
00:02:20,690 --> 00:02:23,395
So let's go ahead
and get started.

51
00:02:23,395 --> 00:02:28,770

52
00:02:28,770 --> 00:02:30,960
So I'm going to
grab some of this

53
00:02:30,960 --> 00:02:37,936
and save myself a little bit
of time and paste that in.

54
00:02:37,936 --> 00:02:40,020
I'm going to use
actually romeo-short,

55
00:02:40,020 --> 00:02:42,280
because I don't want
to mess with-- romeo

56
00:02:42,280 --> 00:02:44,030
has punctuation in it.

57
00:02:44,030 --> 00:02:50,770
So I'll call this under tuples.

58
00:02:50,770 --> 00:02:52,530
I'm going to call
this guy, topten.py.

59
00:02:52,530 --> 00:02:57,670

60
00:02:57,670 --> 00:02:59,291
And see if it's in
my tuples folder.

61
00:02:59,291 --> 00:02:59,790
Yup.

62
00:02:59,790 --> 00:03:01,800
Just always sanity checking.

63
00:03:01,800 --> 00:03:07,500
So let's go ahead to PythonLearn
and grab that romeo-short file.

64
00:03:07,500 --> 00:03:18,570

65
00:03:18,570 --> 00:03:20,420
So I'm going to
grab romeo-short.

66
00:03:20,420 --> 00:03:24,750
If I look at romeo--
romeo-short conveniently

67
00:03:24,750 --> 00:03:27,250
has the-- or just
romeo conveniently

68
00:03:27,250 --> 00:03:32,190
has the punctuation
moved, and it's small.

69
00:03:32,190 --> 00:03:33,560
So we can do debugging.

70
00:03:33,560 --> 00:03:35,060
Romeo-full is a little harder.

71
00:03:35,060 --> 00:03:37,510
And I cover that in the
book in some more detail

72
00:03:37,510 --> 00:03:39,010
to get rid of
punctuation and stuff.

73
00:03:39,010 --> 00:03:39,670
Not too bad.

74
00:03:39,670 --> 00:03:40,210
Not too bad.

75
00:03:40,210 --> 00:03:42,220
But we won't talk about here.

76
00:03:42,220 --> 00:03:44,500
So I'm going to grab romeo.txt.

77
00:03:44,500 --> 00:03:52,410
And I'll save this to my
tuples folder as romeo.txt.

78
00:03:52,410 --> 00:03:54,190
And I should be done that now.

79
00:03:54,190 --> 00:03:55,340
And I'm done with that.

80
00:03:55,340 --> 00:03:56,840
So if I take a look
at tuples again,

81
00:03:56,840 --> 00:04:00,800
I've got romeo.txt in
this file, topten.py.

82
00:04:00,800 --> 00:04:02,220
And it's not romeo.

83
00:04:02,220 --> 00:04:04,490
It's romeo.txt.

84
00:04:04,490 --> 00:04:06,510
And I'm just going to split.

85
00:04:06,510 --> 00:04:12,240
And I hope by now you can
read a text file and split it

86
00:04:12,240 --> 00:04:15,560
into words and count those
words in a dictionary.

87
00:04:15,560 --> 00:04:18,079
So I'm just going to print
out the dictionary, the counts

88
00:04:18,079 --> 00:04:19,950
dictionary that
we've got at the end.

89
00:04:19,950 --> 00:04:21,260
And let's see how that works.

90
00:04:21,260 --> 00:04:23,160
So I'll go onto my desktop.

91
00:04:23,160 --> 00:04:24,510
And this is under tuples.

92
00:04:24,510 --> 00:04:28,270

93
00:04:28,270 --> 00:04:31,020
And so there's
romeo.txt and topten.py.

94
00:04:31,020 --> 00:04:32,900
So let's go ahead
and run topten.py.

95
00:04:32,900 --> 00:04:36,050

96
00:04:36,050 --> 00:04:37,410
And so there we go.

97
00:04:37,410 --> 00:04:39,850
We have just sort
of roared through,

98
00:04:39,850 --> 00:04:43,100
broken into words,
broken into lines.

99
00:04:43,100 --> 00:04:48,240
We have a nice, convenient,
little thing here.

100
00:04:48,240 --> 00:04:49,660
Now, you know what?

101
00:04:49,660 --> 00:04:52,890
I'm going to do one thing
that's not in the example.

102
00:04:52,890 --> 00:04:54,800
The fact that these
are upper case-- I

103
00:04:54,800 --> 00:04:58,080
don't know if it's going
to cause a problem or not.

104
00:04:58,080 --> 00:04:59,560
This bothers me.

105
00:04:59,560 --> 00:05:04,940
And so I'm going to force all
the words to be lowercase.

106
00:05:04,940 --> 00:05:08,420
And so I'm going to call--
I'm going to make a thing,

107
00:05:08,420 --> 00:05:12,576
word equals word dot lower.

108
00:05:12,576 --> 00:05:13,810
I think it's lower.

109
00:05:13,810 --> 00:05:15,080
We'll find out fast enough.

110
00:05:15,080 --> 00:05:17,570
So I'm going to just grab
a lowercase version of word

111
00:05:17,570 --> 00:05:19,690
and make it be W-R-D.
And that's what

112
00:05:19,690 --> 00:05:23,099
I'm going to put
into my dictionary.

113
00:05:23,099 --> 00:05:24,140
So let me run this again.

114
00:05:24,140 --> 00:05:25,500
See if I got it right.

115
00:05:25,500 --> 00:05:26,040
Yeah.

116
00:05:26,040 --> 00:05:29,187
So now we see things
like "who" is lowercase.

117
00:05:29,187 --> 00:05:31,020
I don't think it changed
any of the numbers.

118
00:05:31,020 --> 00:05:32,110
It may have.

119
00:05:32,110 --> 00:05:36,870
But I think we shouldn't
treat uppercase--

120
00:05:36,870 --> 00:05:38,610
we should make this
case insensitive,

121
00:05:38,610 --> 00:05:40,160
so we'll map everything
to lowercase.

122
00:05:40,160 --> 00:05:42,670
So I just did that by
mapping it to lower

123
00:05:42,670 --> 00:05:49,590
and then using W-R-D instead
of word after I made a copy.

124
00:05:49,590 --> 00:05:50,760
So here we go.

125
00:05:50,760 --> 00:05:52,960
So then what I'm going to
do is I've got my counts.

126
00:05:52,960 --> 00:05:57,320
And I'm going to print
the results of the items.

127
00:05:57,320 --> 00:06:00,830
So that gives us a list.

128
00:06:00,830 --> 00:06:03,600
Instead of just showing it,
it gives us a list of tuples.

129
00:06:03,600 --> 00:06:04,860
So there's a tuple.

130
00:06:04,860 --> 00:06:06,200
It's a two item tuple.

131
00:06:06,200 --> 00:06:07,221
Tuple.

132
00:06:07,221 --> 00:06:07,720
Tuple.

133
00:06:07,720 --> 00:06:10,390
And it's key-value pairs.

134
00:06:10,390 --> 00:06:13,520
And this is useful
now, in particular

135
00:06:13,520 --> 00:06:17,310
because we can construct a
for loop that goes through.

136
00:06:17,310 --> 00:06:23,540
For kie, vaal-- key and value.

137
00:06:23,540 --> 00:06:27,620

138
00:06:27,620 --> 00:06:31,540
Kie, vaal equals-- I'm sorry.

139
00:06:31,540 --> 00:06:34,520
In count dot items.

140
00:06:34,520 --> 00:06:36,900
I get all confused
trying to create

141
00:06:36,900 --> 00:06:39,300
really non-numonic variables.

142
00:06:39,300 --> 00:06:41,980
So we got kie and vaal.

143
00:06:41,980 --> 00:06:46,800
And it's two
iteration variables.

144
00:06:46,800 --> 00:06:55,410
And the way it works
is these will iterate

145
00:06:55,410 --> 00:07:00,990
through each tuple--
tuple, tuple-- and then kie

146
00:07:00,990 --> 00:07:03,500
will be the first thing in
a tuple-- which is the key--

147
00:07:03,500 --> 00:07:05,710
and the value will be the
second thing in the tuple.

148
00:07:05,710 --> 00:07:06,210
Kie, vaal.

149
00:07:06,210 --> 00:07:07,030
Kie, vaal.

150
00:07:07,030 --> 00:07:11,570
And so kie will bounce
through these at the same time

151
00:07:11,570 --> 00:07:14,690
as vaal's going to bounce
to the corresponding values.

152
00:07:14,690 --> 00:07:15,590
So that's quite nice.

153
00:07:15,590 --> 00:07:18,170

154
00:07:18,170 --> 00:07:19,776
I always love sanity
checks, so I'm

155
00:07:19,776 --> 00:07:22,640
going to print out kie and vaal.

156
00:07:22,640 --> 00:07:25,277

157
00:07:25,277 --> 00:07:26,110
Just print them out.

158
00:07:26,110 --> 00:07:29,020

159
00:07:29,020 --> 00:07:31,760
Yeah, something's wrong.

160
00:07:31,760 --> 00:07:34,415
Kie, vaal, and-- oh.

161
00:07:34,415 --> 00:07:36,440
Counts.

162
00:07:36,440 --> 00:07:37,300
So here we go.

163
00:07:37,300 --> 00:07:38,380
Trace back.

164
00:07:38,380 --> 00:07:39,930
Line 11.

165
00:07:39,930 --> 00:07:41,410
The name count is not defined.

166
00:07:41,410 --> 00:07:44,020
I was so quick, I didn't
even read what it told me.

167
00:07:44,020 --> 00:07:44,859
So look at line 11.

168
00:07:44,859 --> 00:07:45,650
Go down to line 11.

169
00:07:45,650 --> 00:07:49,320
And then I forgot my S.
Once you get used to this,

170
00:07:49,320 --> 00:07:51,910
it's pretty much telling
me what it wants to do.

171
00:07:51,910 --> 00:07:53,562
So now I'm going
through my tuples.

172
00:07:53,562 --> 00:07:54,270
Here's my tuples.

173
00:07:54,270 --> 00:07:56,395
And now I'm going through
the tuples one at a time,

174
00:07:56,395 --> 00:07:59,180
just dumping them out in
a loop, and away we go.

175
00:07:59,180 --> 00:08:03,920
Now, the whole problem is is
we want to make a new tuple.

176
00:08:03,920 --> 00:08:08,252

177
00:08:08,252 --> 00:08:12,060
And I'm going to
call this newtup.

178
00:08:12,060 --> 00:08:13,150
Newtup.

179
00:08:13,150 --> 00:08:14,720
And I'm going to
create a tuple--

180
00:08:14,720 --> 00:08:16,680
and I can do this by
just putting these two

181
00:08:16,680 --> 00:08:22,090
things in parentheses-- except
that I want vaal first, and kie

182
00:08:22,090 --> 00:08:24,040
second.

183
00:08:24,040 --> 00:08:25,980
So I want vaal first
and kie second.

184
00:08:25,980 --> 00:08:27,688
And so now I'm going
to print out newtup.

185
00:08:27,688 --> 00:08:32,900

186
00:08:32,900 --> 00:08:35,190
Now you'll see that as
I will loop through each

187
00:08:35,190 --> 00:08:38,919
of the key-value pairs, I'm
just making a new tuple where

188
00:08:38,919 --> 00:08:40,830
they're reversed, where
the value is first

189
00:08:40,830 --> 00:08:42,780
and the key is second.

190
00:08:42,780 --> 00:08:43,340
All right.

191
00:08:43,340 --> 00:08:44,260
So value-key.

192
00:08:44,260 --> 00:08:44,760
Value-key.

193
00:08:44,760 --> 00:08:45,660
Value-key.

194
00:08:45,660 --> 00:08:50,700
And now I'm going to
stick this in a list.

195
00:08:50,700 --> 00:08:54,695
And I'm going to
call my list flipped.

196
00:08:54,695 --> 00:08:57,330

197
00:08:57,330 --> 00:09:01,210
And I'm going to say,
give me an empty list.

198
00:09:01,210 --> 00:09:05,840
So I'm starting an empty
list called flipped.

199
00:09:05,840 --> 00:09:13,180
And I am going to tell
flipped to append to itself--

200
00:09:13,180 --> 00:09:15,310
so now I'm extending
this list each time

201
00:09:15,310 --> 00:09:18,000
through the loop-- take that
newtup that I just made.

202
00:09:18,000 --> 00:09:19,800
So we got newtup.

203
00:09:19,800 --> 00:09:21,440
And I'll take my
print statement out,

204
00:09:21,440 --> 00:09:22,565
because that'll be obvious.

205
00:09:22,565 --> 00:09:26,120
So I'm going to append newtup
to the end of my flipped list.

206
00:09:26,120 --> 00:09:31,425
And then I'll print at the
end of this print flipped.

207
00:09:31,425 --> 00:09:35,280

208
00:09:35,280 --> 00:09:38,260
So I make a tuple, and
instead of printing it,

209
00:09:38,260 --> 00:09:39,580
I just append it to this list.

210
00:09:39,580 --> 00:09:41,538
And then I print the
whole list out afterwards.

211
00:09:41,538 --> 00:09:43,900

212
00:09:43,900 --> 00:09:46,430
This is a little messy,
but here is the first list.

213
00:09:46,430 --> 00:09:48,400
It's got key-value.

214
00:09:48,400 --> 00:09:49,740
And here's the second list.

215
00:09:49,740 --> 00:09:54,530
It's the exact same list as
before, except it's value-key.

216
00:09:54,530 --> 00:09:55,964
Now it's the exact same list.

217
00:09:55,964 --> 00:09:57,130
We didn't take anything out.

218
00:09:57,130 --> 00:09:58,140
We didn't add anything.

219
00:09:58,140 --> 00:09:59,320
We didn't sum anything.

220
00:09:59,320 --> 00:10:00,990
We didn't do anything.

221
00:10:00,990 --> 00:10:06,430
So then what is it that we're
going to do with this list?

222
00:10:06,430 --> 00:10:10,939
Well, we can use the totally--
well, we could use sorted,

223
00:10:10,939 --> 00:10:12,230
but we're not going to do that.

224
00:10:12,230 --> 00:10:13,870
I'm going to do this.

225
00:10:13,870 --> 00:10:19,250
I'm going to say, I want
to take that flipped list,

226
00:10:19,250 --> 00:10:21,940
and I want to sort it.

227
00:10:21,940 --> 00:10:23,080
Sort.

228
00:10:23,080 --> 00:10:26,580
And then print flipped.

229
00:10:26,580 --> 00:10:27,840
Just sort it.

230
00:10:27,840 --> 00:10:29,270
Now the key is sorting.

231
00:10:29,270 --> 00:10:31,930
The awesomeness of
sorting is that sorting

232
00:10:31,930 --> 00:10:34,850
is done by repeated comparison.

233
00:10:34,850 --> 00:10:39,630
And it's comparing this
tuple to this tuple.

234
00:10:39,630 --> 00:10:41,020
But the rules of
tuple comparison

235
00:10:41,020 --> 00:10:43,270
is it first checks
the first pair,

236
00:10:43,270 --> 00:10:45,060
and then it checks
the second pair.

237
00:10:45,060 --> 00:10:47,580
It only checks the second
pair if the first pair

238
00:10:47,580 --> 00:10:48,680
doesn't match.

239
00:10:48,680 --> 00:10:51,679
So 3, 1 doesn't match.

240
00:10:51,679 --> 00:10:53,470
And so it sorts it
based on the 3 and the 1

241
00:10:53,470 --> 00:10:54,830
without even looking.

242
00:10:54,830 --> 00:10:57,150
But then when there
is two 3's that match,

243
00:10:57,150 --> 00:10:59,650
it actually does check
the second two words.

244
00:10:59,650 --> 00:11:02,880
So 3, "and" will sort.

245
00:11:02,880 --> 00:11:05,832

246
00:11:05,832 --> 00:11:07,580
The "and" and the
"the" will decide

247
00:11:07,580 --> 00:11:09,540
where the 3, "and" and
the 3, "the" tuples

248
00:11:09,540 --> 00:11:12,750
end up sorting, if
that makes any sense.

249
00:11:12,750 --> 00:11:16,490
So let's just print this out.

250
00:11:16,490 --> 00:11:21,420
Actually let's print flipped.

251
00:11:21,420 --> 00:11:22,870
Not clipped.

252
00:11:22,870 --> 00:11:24,960
We could make a
clipped one too later.

253
00:11:24,960 --> 00:11:26,960
And I'm actually going
to get rid of this print.

254
00:11:26,960 --> 00:11:29,940
So it's going to print
flipped before and after.

255
00:11:29,940 --> 00:11:31,360
So watch this.

256
00:11:31,360 --> 00:11:33,040
So here's flipped before.

257
00:11:33,040 --> 00:11:34,890
It's been sorted,
in whatever order

258
00:11:34,890 --> 00:11:37,180
it was in the dictionary
in the first place.

259
00:11:37,180 --> 00:11:40,220
And now here's flipped
in the final order.

260
00:11:40,220 --> 00:11:44,820
And you see that it's in
sort of reverse order,

261
00:11:44,820 --> 00:11:50,410
where 3, "and," "is," and
"the" are here at the end.

262
00:11:50,410 --> 00:11:52,870
The ones are in alphabetical
order within the ones,

263
00:11:52,870 --> 00:11:55,687
because tuples check--
oops, don't do that.

264
00:11:55,687 --> 00:11:56,270
Don't do that.

265
00:11:56,270 --> 00:11:58,026
That was nasty.

266
00:11:58,026 --> 00:12:00,480
Ah, and that was nasty.

267
00:12:00,480 --> 00:12:02,950
That's because I was
copying and pasting.

268
00:12:02,950 --> 00:12:05,180
So within all the
ones, it actually

269
00:12:05,180 --> 00:12:09,110
sorted based on the alphabetic
sort of the second parameter

270
00:12:09,110 --> 00:12:11,180
or the second item in the tuple.

271
00:12:11,180 --> 00:12:15,750
Whereas the twos
all sorted later.

272
00:12:15,750 --> 00:12:19,170
So this actually isn't
quite what I wanted.

273
00:12:19,170 --> 00:12:24,080
And so I'm going to say,
reverse equals true.

274
00:12:24,080 --> 00:12:26,530
Because I actually want it
sorted so the big numbers

275
00:12:26,530 --> 00:12:27,780
are at the front.

276
00:12:27,780 --> 00:12:29,870
So let's run that little bit.

277
00:12:29,870 --> 00:12:31,500
So check that, right?

278
00:12:31,500 --> 00:12:33,670
So now I got my same sort.

279
00:12:33,670 --> 00:12:36,510
It's got the unsorted--
now it's got the sorted.

280
00:12:36,510 --> 00:12:39,480
But the big numbers
are at the beginning.

281
00:12:39,480 --> 00:12:41,831
You'll notice it's in
reverse alphabetical order,

282
00:12:41,831 --> 00:12:44,330
because the big words are at
the beginning among the threes.

283
00:12:44,330 --> 00:12:45,380
But, eh, whatever.

284
00:12:45,380 --> 00:12:47,370
We're close enough
for government work.

285
00:12:47,370 --> 00:12:50,240
So now I want to
print out the top 10.

286
00:12:50,240 --> 00:12:51,330
Oops.

287
00:12:51,330 --> 00:12:54,780
I did that again.

288
00:12:54,780 --> 00:12:56,520
I want to print out the top 10.

289
00:12:56,520 --> 00:12:59,280
I'll just do the top five.

290
00:12:59,280 --> 00:13:00,900
Top five.

291
00:13:00,900 --> 00:13:03,130
So I could do something simple.

292
00:13:03,130 --> 00:13:04,450
We'll get rid of this.

293
00:13:04,450 --> 00:13:07,420
We trust that it's
now properly sorted.

294
00:13:07,420 --> 00:13:16,240
I could say, print this list
up to but not including five,

295
00:13:16,240 --> 00:13:19,060
by using list slicing.

296
00:13:19,060 --> 00:13:20,160
So there we go.

297
00:13:20,160 --> 00:13:21,910
There's the top five.

298
00:13:21,910 --> 00:13:23,080
But that looks kind of ugly.

299
00:13:23,080 --> 00:13:23,663
Maybe it does.

300
00:13:23,663 --> 00:13:24,917
Maybe it doesn't.

301
00:13:24,917 --> 00:13:26,750
So I'm going to write
a super cool for loop.

302
00:13:26,750 --> 00:13:28,620
But again, simple, right?

303
00:13:28,620 --> 00:13:30,770
Just for me to
check it, I can say,

304
00:13:30,770 --> 00:13:32,190
print the first five of flipped.

305
00:13:32,190 --> 00:13:34,710
This little list
slicing is a great way

306
00:13:34,710 --> 00:13:37,510
if you're using a lot of data
to keep your data from being

307
00:13:37,510 --> 00:13:40,220
totally insane.

308
00:13:40,220 --> 00:13:42,530
So I'm going to
write a for loop.

309
00:13:42,530 --> 00:13:52,335
For key and value in, flipped.

310
00:13:52,335 --> 00:13:58,050

311
00:13:58,050 --> 00:14:01,270
So I'm going to say, only
go through the first five.

312
00:14:01,270 --> 00:14:03,840
So this loop will only
run for the first five.

313
00:14:03,840 --> 00:14:05,870
Just like this only
prints the first five,

314
00:14:05,870 --> 00:14:09,520
this is going to iterate
only through the first five.

315
00:14:09,520 --> 00:14:11,880
And key and value will go
through the keys and values

316
00:14:11,880 --> 00:14:13,020
of these first five.

317
00:14:13,020 --> 00:14:14,200
3, "the."

318
00:14:14,200 --> 00:14:14,850
Key-value.

319
00:14:14,850 --> 00:14:16,330
3, "is."

320
00:14:16,330 --> 00:14:18,920
And now I'm just going to print
a sweet, cool message out.

321
00:14:18,920 --> 00:14:27,760

322
00:14:27,760 --> 00:14:33,211
And I'm just printing completely
insane, partially mnemonic

323
00:14:33,211 --> 00:14:33,710
things.

324
00:14:33,710 --> 00:14:36,772
So I print out my top
five keys and values.

325
00:14:36,772 --> 00:14:37,980
So let's take a look at that.

326
00:14:37,980 --> 00:14:40,970
Let's go ahead
and run that baby.

327
00:14:40,970 --> 00:14:43,120
Winner, 3 is "the."

328
00:14:43,120 --> 00:14:44,220
3, "is."

329
00:14:44,220 --> 00:14:44,820
3, "and."

330
00:14:44,820 --> 00:14:47,550
So we saw five of these things.

331
00:14:47,550 --> 00:14:48,320
Five of them.

332
00:14:48,320 --> 00:14:49,945
And we're seeing the
key and the value.

333
00:14:49,945 --> 00:14:55,710
It would probably be more
easily read if I just did that.

334
00:14:55,710 --> 00:14:56,966
So 3, "the."

335
00:14:56,966 --> 00:14:58,060
3, "is."

336
00:14:58,060 --> 00:15:02,504
Those are the top five
words in my little program.

337
00:15:02,504 --> 00:15:04,170
So let's take a look
at this and review.

338
00:15:04,170 --> 00:15:08,680

339
00:15:08,680 --> 00:15:10,430
We open the file.

340
00:15:10,430 --> 00:15:12,080
We make an empty dictionary.

341
00:15:12,080 --> 00:15:17,154
We do our standard file
loop, splitting each line.

342
00:15:17,154 --> 00:15:19,070
New lines are kind of
chomped up in the split,

343
00:15:19,070 --> 00:15:20,903
so we don't have to
worry too much about it.

344
00:15:20,903 --> 00:15:22,350
We looped through the words.

345
00:15:22,350 --> 00:15:25,110
We changed it to make it
go lowercase for each word.

346
00:15:25,110 --> 00:15:29,850
We used the get pattern to both
initialize new words to one

347
00:15:29,850 --> 00:15:34,040
and add one to existing words,
by using this awesome get-ness.

348
00:15:34,040 --> 00:15:34,905
Now we want to flip.

349
00:15:34,905 --> 00:15:38,190

350
00:15:38,190 --> 00:15:42,390
We want to flip the
order in each tuple.

351
00:15:42,390 --> 00:15:45,730
We want to make the tuples
from key-value tuples-- which

352
00:15:45,730 --> 00:15:48,230
we get from items--
to value-key tuples.

353
00:15:48,230 --> 00:15:50,860
We append each of
those tuples to a list.

354
00:15:50,860 --> 00:15:57,690
Then with the tuples that have
the vaal and the kie in them--

355
00:15:57,690 --> 00:16:00,570
I can't write with
this very well--

356
00:16:00,570 --> 00:16:02,314
we sort them in reverse order.

357
00:16:02,314 --> 00:16:04,480
But the vaal is going to
be the most important thing

358
00:16:04,480 --> 00:16:06,570
it gets sorted on, because
it's the leftmost thing

359
00:16:06,570 --> 00:16:07,920
in the tuple.

360
00:16:07,920 --> 00:16:12,000
And then we simply
print out the last five.

361
00:16:12,000 --> 00:16:15,880
Or the top five of this
tuples after the sort.

362
00:16:15,880 --> 00:16:17,630
And so that, pretty simple.

363
00:16:17,630 --> 00:16:21,850
Print out the top five words,
in this particular file.

364
00:16:21,850 --> 00:16:23,530
OK?

365
00:16:23,530 --> 00:16:25,300
Simple enough.

366
00:16:25,300 --> 00:16:27,600
Thanks a lot and see you--