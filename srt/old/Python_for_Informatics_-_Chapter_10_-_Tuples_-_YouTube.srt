1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:01,050
Hello.

3
00:00:01,050 --> 00:00:03,000
And welcome to
chapter 10 of Python

4
00:00:03,000 --> 00:00:05,260
for Informatics, the
chapter on tuples.

5
00:00:05,260 --> 00:00:07,600
I'm Charles Severance
I'm your lecturer.

6
00:00:07,600 --> 00:00:09,900
And I'm the author
of the textbook.

7
00:00:09,900 --> 00:00:12,740
As always, this material is
copyright Creative Commons

8
00:00:12,740 --> 00:00:16,830
Attribution including the
video lectures, the slides,

9
00:00:16,830 --> 00:00:19,560
and the book.

10
00:00:19,560 --> 00:00:23,450
So tuples are the third
kind of collection

11
00:00:23,450 --> 00:00:24,450
that we've talked about.

12
00:00:24,450 --> 00:00:25,355
We've talked about lists.

13
00:00:25,355 --> 00:00:26,910
And we've talked
about dictionaries.

14
00:00:26,910 --> 00:00:29,735
And in the dictionary lecture,
we kind of alluded to tuples.

15
00:00:29,735 --> 00:00:32,237

16
00:00:32,237 --> 00:00:34,070
We don't have to talk
too much about tuples.

17
00:00:34,070 --> 00:00:35,445
I'm really shortening
the lecture

18
00:00:35,445 --> 00:00:38,110
by telling you that
they're a lot like lists.

19
00:00:38,110 --> 00:00:44,850
They're a non-changeable list.

20
00:00:44,850 --> 00:00:50,900
And the syntax of them is
pretty much the same as a list,

21
00:00:50,900 --> 00:00:57,060
except that we use parentheses
instead of square brackets.

22
00:00:57,060 --> 00:01:00,070
So like here is a
three tuple, a tuple

23
00:01:00,070 --> 00:01:02,590
with three items in it,
Glen, Sally, and Joseph.

24
00:01:02,590 --> 00:01:06,360
They are numbered
0, 0, 1, and 2.

25
00:01:06,360 --> 00:01:07,840
So the second thing is one.

26
00:01:07,840 --> 00:01:11,720
So x sub 2 is, indeed, Joseph.

27
00:01:11,720 --> 00:01:16,880
We can pass them in as sequences
to things like max or min

28
00:01:16,880 --> 00:01:18,790
or sum.

29
00:01:18,790 --> 00:01:22,160
And so the maximum
of 1, 9, 2 is 9.

30
00:01:22,160 --> 00:01:23,680
And we can loop through them.

31
00:01:23,680 --> 00:01:25,070
So here's why it's a tuple.

32
00:01:25,070 --> 00:01:29,300
It's 1, 9, 2, And
iteration's going

33
00:01:29,300 --> 00:01:32,476
to go through the
three values, right?

34
00:01:32,476 --> 00:01:34,100
And so it's going to
print out 1, 9, 2.

35
00:01:34,100 --> 00:01:36,220
It runs the indented
code, once for each

36
00:01:36,220 --> 00:01:38,420
of the values inside the tuple.

37
00:01:38,420 --> 00:01:42,370
And so in this respect,
they're very much like lists.

38
00:01:42,370 --> 00:01:44,320
But they're also
different than lists

39
00:01:44,320 --> 00:01:47,200
in some real valuable ways.

40
00:01:47,200 --> 00:01:48,920
Tuples are immutable.

41
00:01:48,920 --> 00:01:50,920
And so if you recall when
we talked about lists,

42
00:01:50,920 --> 00:01:52,200
we compared them to strings.

43
00:01:52,200 --> 00:01:54,740
Because both lists
and strings are

44
00:01:54,740 --> 00:01:56,830
a sequence of elements,
where the first one is 0,

45
00:01:56,830 --> 00:01:59,350
1, 2, et cetera.

46
00:01:59,350 --> 00:02:02,550
But if we look at a
string, for example,

47
00:02:02,550 --> 00:02:05,230
and we have a three
character string, ABC,

48
00:02:05,230 --> 00:02:06,980
and we want to change
the third character,

49
00:02:06,980 --> 00:02:12,500
y sub 2, to d, it complains and
says, no, you can't do that.

50
00:02:12,500 --> 00:02:13,710
But you can do it on a list.

51
00:02:13,710 --> 00:02:15,850
So if we have a
list, 9, 8, 7, and we

52
00:02:15,850 --> 00:02:19,050
say x sub 2 is 6, which
is the third item,

53
00:02:19,050 --> 00:02:22,070
then the third item
changes from 7 to 6.

54
00:02:22,070 --> 00:02:22,600
OK.

55
00:02:22,600 --> 00:02:25,490
So this is mutable.

56
00:02:25,490 --> 00:02:28,010
This is not mutable.

57
00:02:28,010 --> 00:02:31,360

58
00:02:31,360 --> 00:02:35,710
And tuples are also not mutable.

59
00:02:35,710 --> 00:02:37,350
They're like strings.

60
00:02:37,350 --> 00:02:41,840
They're sort of like lists in
terms of what they can store.

61
00:02:41,840 --> 00:02:43,340
But they're like
strings in the fact

62
00:02:43,340 --> 00:02:44,810
that they can't be changed.

63
00:02:44,810 --> 00:02:47,930
So here we create a three
tuple, a three item tuple.

64
00:02:47,930 --> 00:02:50,500
And we try to change the
third thing from 3 to 0.

65
00:02:50,500 --> 00:02:56,850
And it says you can't
do that, not mutable.

66
00:02:56,850 --> 00:03:00,420
So it's kind of like
lists in the kind of data

67
00:03:00,420 --> 00:03:01,280
you store in them.

68
00:03:01,280 --> 00:03:03,820
And it's kind of like strings
in that you can't change them

69
00:03:03,820 --> 00:03:05,040
once you create them.

70
00:03:05,040 --> 00:03:06,770
So this parentheses,
this constant,

71
00:03:06,770 --> 00:03:08,510
is the moment of creation.

72
00:03:08,510 --> 00:03:12,880
Once you put the things in, you
can't fiddle around with it.

73
00:03:12,880 --> 00:03:16,570
There's a bunch of other things
you can't do with tuples.

74
00:03:16,570 --> 00:03:17,580
Why even use tuples?

75
00:03:17,580 --> 00:03:19,120
We'll get to that in a second.

76
00:03:19,120 --> 00:03:23,350
So here is a three tuple
with the numbers 3, 2, 1.

77
00:03:23,350 --> 00:03:24,520
You can't sort it.

78
00:03:24,520 --> 00:03:27,500
Because if you sorted
it, that would change it.

79
00:03:27,500 --> 00:03:28,700
You can't add to it.

80
00:03:28,700 --> 00:03:31,282
You can't append the
value 5 to the end of it.

81
00:03:31,282 --> 00:03:32,490
Because that would change it.

82
00:03:32,490 --> 00:03:33,900
And you can't reverse it.

83
00:03:33,900 --> 00:03:37,570
So none of these are allowed.

84
00:03:37,570 --> 00:03:39,660
Those are things you
can do with lists,

85
00:03:39,660 --> 00:03:42,490
but you can't do with tuples.

86
00:03:42,490 --> 00:03:44,290
And you can read
the documentation.

87
00:03:44,290 --> 00:03:46,940
But we can use that built-in Dir
function, that really awesome

88
00:03:46,940 --> 00:03:51,080
Dir function, where we make a
list and we say, hey, Python,

89
00:03:51,080 --> 00:03:53,220
what will you let
me do with lists?

90
00:03:53,220 --> 00:03:56,850
Well, you can append, a count,
extend, index, insert, sort,

91
00:03:56,850 --> 00:03:59,470
reverse, remove,
pop, lots of things.

92
00:03:59,470 --> 00:04:01,260
Now we make a tuple
and say, hey, Python,

93
00:04:01,260 --> 00:04:02,990
what can we do with tuple?

94
00:04:02,990 --> 00:04:05,140
Well, you can do a
count or an index,

95
00:04:05,140 --> 00:04:07,200
which means you can't do
all these other things.

96
00:04:07,200 --> 00:04:09,780
So this is very
much a reduction.

97
00:04:09,780 --> 00:04:12,112

98
00:04:12,112 --> 00:04:13,820
Because everything
you can do with tuples

99
00:04:13,820 --> 00:04:14,904
you can do it lists.

100
00:04:14,904 --> 00:04:16,570
But not everything
you can do with lists

101
00:04:16,570 --> 00:04:18,019
you can do with tuples.

102
00:04:18,019 --> 00:04:22,650
So why did I just waste all
this time introducing tuples?

103
00:04:22,650 --> 00:04:25,689
All they are is
have parentheses.

104
00:04:25,689 --> 00:04:26,480
What good are they?

105
00:04:26,480 --> 00:04:29,180
Well, it turns out that
they're much more efficient.

106
00:04:29,180 --> 00:04:31,310
Because Python doesn't
have to deal with the fact

107
00:04:31,310 --> 00:04:34,100
that we as programmers
might change them,

108
00:04:34,100 --> 00:04:35,890
python can make them quicker.

109
00:04:35,890 --> 00:04:38,170
They can use less
memory, all kinds

110
00:04:38,170 --> 00:04:44,010
of things that save a lot of
processing time in Python.

111
00:04:44,010 --> 00:04:45,260
So when would you use a tuple?

112
00:04:45,260 --> 00:04:46,801
Well, in particularly
if you're going

113
00:04:46,801 --> 00:04:49,110
to create some list that
you're never changing,

114
00:04:49,110 --> 00:04:50,800
we prefer to use tuples.

115
00:04:50,800 --> 00:04:52,750
And there's a lot of
situations in programming

116
00:04:52,750 --> 00:04:55,770
where we create what we think
of as a temporary variable.

117
00:04:55,770 --> 00:04:59,630
And if we're going to create
it, use it, and throw it

118
00:04:59,630 --> 00:05:01,670
away without ever
modifying it, we

119
00:05:01,670 --> 00:05:04,780
prefer tuples in those
kinds of situations.

120
00:05:04,780 --> 00:05:06,700
So we prefer tuples
when we create

121
00:05:06,700 --> 00:05:08,827
things that are just temporary.

122
00:05:08,827 --> 00:05:10,910
So It's the fact that
they're temporary variables.

123
00:05:10,910 --> 00:05:13,367
They're like temporary lists.

124
00:05:13,367 --> 00:05:14,450
Because they're efficient.

125
00:05:14,450 --> 00:05:15,220
They're quick to make.

126
00:05:15,220 --> 00:05:16,553
And they're quick to get rid of.

127
00:05:16,553 --> 00:05:18,810
And they're quick to go through.

128
00:05:18,810 --> 00:05:22,820
Now, another really neat thing
about Python that I really like

129
00:05:22,820 --> 00:05:26,690
is the fact that you can do
sort of two assignments in one

130
00:05:26,690 --> 00:05:30,010
by putting a tuple on both the
left and the right-hand side

131
00:05:30,010 --> 00:05:31,246
of the assignment statement.

132
00:05:31,246 --> 00:05:33,120
So if we think about an
assignment statement,

133
00:05:33,120 --> 00:05:35,120
I like to think of it as
having a direction that

134
00:05:35,120 --> 00:05:37,220
says these things go there.

135
00:05:37,220 --> 00:05:40,860
Well, in Python you can
actually send two things

136
00:05:40,860 --> 00:05:42,270
at the same time.

137
00:05:42,270 --> 00:05:43,510
The 4 goes into the x.

138
00:05:43,510 --> 00:05:45,160
And the Fred goes into the y.

139
00:05:45,160 --> 00:05:46,270
This is a tuple.

140
00:05:46,270 --> 00:05:47,340
This is a tuple.

141
00:05:47,340 --> 00:05:50,450
You cannot have constants
on this left-hand side.

142
00:05:50,450 --> 00:05:52,860
You can have variables or
constants or expressions

143
00:05:52,860 --> 00:05:54,080
on the right-hand side.

144
00:05:54,080 --> 00:05:56,740
But this must be two variables.

145
00:05:56,740 --> 00:06:02,182
Similarly, in this the 99 goes
into A and the 98 goes into B.

146
00:06:02,182 --> 00:06:05,050
Now, it turns out that
you can syntactically

147
00:06:05,050 --> 00:06:07,790
eliminate the parentheses
if you really want.

148
00:06:07,790 --> 00:06:10,440
And so this leads to a
prettier syntax I think.

149
00:06:10,440 --> 00:06:13,810
It's the exact same thing with
or without parentheses, where

150
00:06:13,810 --> 00:06:17,070
we basically just
say, hey, come back,

151
00:06:17,070 --> 00:06:20,680
A and B are assigned
to the tuple 99, 98.

152
00:06:20,680 --> 00:06:22,680
So you can eliminate
the parentheses

153
00:06:22,680 --> 00:06:25,570
as long as it's very clear
what's going on in the tuple.

154
00:06:25,570 --> 00:06:28,144
And so this might be
a little disquieting

155
00:06:28,144 --> 00:06:29,060
when you first see it.

156
00:06:29,060 --> 00:06:31,810
But it's just a tuple
with no parentheses.

157
00:06:31,810 --> 00:06:35,300
And the 99 goes to the A
and the 98 goes to the B.

158
00:06:35,300 --> 00:06:37,990
Now, it turns out
we already did this.

159
00:06:37,990 --> 00:06:41,530
I sort of blew by this
in the previous lecture,

160
00:06:41,530 --> 00:06:43,830
in Dictionaries,
because it allows

161
00:06:43,830 --> 00:06:46,730
us to go through the
dictionaries keys and values

162
00:06:46,730 --> 00:06:50,600
with two iteration variables.

163
00:06:50,600 --> 00:06:53,270
And so if you remember,
here's a dictionary.

164
00:06:53,270 --> 00:06:55,050
We put two items into it.

165
00:06:55,050 --> 00:07:05,100
And we can call d.items
and get a list of tuples,

166
00:07:05,100 --> 00:07:06,190
a list of two tuples.

167
00:07:06,190 --> 00:07:08,340
Tow tuples are
quick way of saying

168
00:07:08,340 --> 00:07:10,030
a tuple with two things in it.

169
00:07:10,030 --> 00:07:12,600
It's a two element
list that consists

170
00:07:12,600 --> 00:07:14,490
each element is a two tuple.

171
00:07:14,490 --> 00:07:19,270
And it's the key and the
value, key and the value.

172
00:07:19,270 --> 00:07:22,590
And so if we just print
this out, it's a list.

173
00:07:22,590 --> 00:07:27,490
So then when we put this on
a for-loop, it is a list.

174
00:07:27,490 --> 00:07:33,510
But the things inside the
list are each a tuple.

175
00:07:33,510 --> 00:07:36,840
Each thing inside
the list is a tuple.

176
00:07:36,840 --> 00:07:40,700
So when this iteration
variable goes to there,

177
00:07:40,700 --> 00:07:43,480
it is like this tuple is
being assigned into k,

178
00:07:43,480 --> 00:07:48,756
v, which means the key goes into
k and the value goes into v.

179
00:07:48,756 --> 00:07:53,630
The name I picked for
k and v do not matter.

180
00:07:53,630 --> 00:07:56,870
It's just the first
one and the second one.

181
00:07:56,870 --> 00:08:00,350
So k and v point here.

182
00:08:00,350 --> 00:08:05,610
Then the next time through
the loop, k and v point here.

183
00:08:05,610 --> 00:08:11,020
And so that's how csev.2
and cwen.4 happen.

184
00:08:11,020 --> 00:08:13,660
And so this is really
a tuple assignment

185
00:08:13,660 --> 00:08:19,370
or a tuple iterations
variable or a pair

186
00:08:19,370 --> 00:08:22,950
of iteration variables
walking through the list.

187
00:08:22,950 --> 00:08:24,980
OK.

188
00:08:24,980 --> 00:08:27,840
We don't do this a lot.

189
00:08:27,840 --> 00:08:30,394
It's most heavily used for
the situation where you're

190
00:08:30,394 --> 00:08:31,810
going through a
dictionary and you

191
00:08:31,810 --> 00:08:34,020
want to see both the
keys and the values.

192
00:08:34,020 --> 00:08:38,830
And then use this method inside
of dictionary called d.items.

193
00:08:38,830 --> 00:08:40,789
Another thing that's
cool about tuples

194
00:08:40,789 --> 00:08:47,570
are that they're comparable,
so less than, greater than,

195
00:08:47,570 --> 00:08:48,880
equals.

196
00:08:48,880 --> 00:08:54,610
And so they first compare
the first leftmost thing.

197
00:08:54,610 --> 00:08:56,610
Then if that matches,
they go to the second one.

198
00:08:56,610 --> 00:08:59,000
And then if that one matches,
they go to the third one.

199
00:08:59,000 --> 00:09:01,766
And so if we're asking
is 0, 1, 2 less than 5,

200
00:09:01,766 --> 00:09:04,270
1, 2, and the answer is true.

201
00:09:04,270 --> 00:09:07,040
And it only looks at the 0 and
the 5, and that's less than.

202
00:09:07,040 --> 00:09:09,220
So away we go.

203
00:09:09,220 --> 00:09:14,270
If we ask is 0, 2, 2 million
less than 0, 3, 4, well, 0 on 0

204
00:09:14,270 --> 00:09:14,900
match.

205
00:09:14,900 --> 00:09:17,890
So it goes to the
second one, 1 and 3.

206
00:09:17,890 --> 00:09:20,020
Well, they don't match
and they're less than.

207
00:09:20,020 --> 00:09:22,030
So 1 is less than 3.

208
00:09:22,030 --> 00:09:23,050
So it's true.

209
00:09:23,050 --> 00:09:24,800
And it doesn't even
look at these numbers,

210
00:09:24,800 --> 00:09:25,830
because it doesn't have to.

211
00:09:25,830 --> 00:09:26,020
Right?

212
00:09:26,020 --> 00:09:28,240
In this one, it doesn't
look at those numbers.

213
00:09:28,240 --> 00:09:34,700
And now if we say is Jones,
Sally less than Jones, Fred,

214
00:09:34,700 --> 00:09:36,760
well, it compares this.

215
00:09:36,760 --> 00:09:37,880
They're equal.

216
00:09:37,880 --> 00:09:39,960
So then it has to look
to the second one,

217
00:09:39,960 --> 00:09:41,721
is Sally less than Fred?

218
00:09:41,721 --> 00:09:42,220
Well, no.

219
00:09:42,220 --> 00:09:47,010
Because S is not less than F.
And so that answer is false.

220
00:09:47,010 --> 00:09:52,440
Is Jones, Sally greater
than Adams, Sam?

221
00:09:52,440 --> 00:09:54,480
Well, Jones is
greater than Adams,

222
00:09:54,480 --> 00:09:56,610
so it never looks
at these variables.

223
00:09:56,610 --> 00:09:59,490
And that turns out to be true.

224
00:09:59,490 --> 00:10:02,290
So these are
comparable, which means

225
00:10:02,290 --> 00:10:05,930
we can use the less than,
less than or equal to, greater

226
00:10:05,930 --> 00:10:09,350
than or equal to, equal
to, or not equal to.

227
00:10:09,350 --> 00:10:12,980
So we can use these
operators on whole tuples.

228
00:10:12,980 --> 00:10:15,490
Now, this turns out
to be quite nice.

229
00:10:15,490 --> 00:10:21,390
Because things that can be
compared can also be sorted.

230
00:10:21,390 --> 00:10:22,810
OK.

231
00:10:22,810 --> 00:10:28,250
So here is A, B,
and C. A maps to 10.

232
00:10:28,250 --> 00:10:29,030
B maps to 1.

233
00:10:29,030 --> 00:10:30,570
C maps to 22.

234
00:10:30,570 --> 00:10:33,190
If I look at the
items, I get back

235
00:10:33,190 --> 00:10:36,770
a list of two tuples,
three two tuples.

236
00:10:36,770 --> 00:10:41,830
They are not sorted, because
dictionaries aren't sorted.

237
00:10:41,830 --> 00:10:42,610
A maps to 10.

238
00:10:42,610 --> 00:10:43,350
C maps to 22.

239
00:10:43,350 --> 00:10:44,270
And B maps to 1.

240
00:10:44,270 --> 00:10:47,150
The order that these come
out in is not something

241
00:10:47,150 --> 00:10:49,410
that we can control.

242
00:10:49,410 --> 00:10:53,840
But if we put these items
into a variable, called it t,

243
00:10:53,840 --> 00:10:56,800
t is the list of
tuples basically,

244
00:10:56,800 --> 00:10:59,130
and then we tell it
to sort, it can do

245
00:10:59,130 --> 00:11:02,800
comparisons between all these.

246
00:11:02,800 --> 00:11:04,140
And it can sort them.

247
00:11:04,140 --> 00:11:08,470
And now they're sorted in
key order, A, B, C. Now,

248
00:11:08,470 --> 00:11:10,160
you'll never get
any keys that match.

249
00:11:10,160 --> 00:11:12,180
So it never looks at
the second one, right?

250
00:11:12,180 --> 00:11:15,850
Because there's one and
only one key A or B or C.

251
00:11:15,850 --> 00:11:17,900
The value 10 never
gets looked at.

252
00:11:17,900 --> 00:11:26,580
So this ends up sort
by key, sort by keys.

253
00:11:26,580 --> 00:11:29,310
So this a way to sort by keys.

254
00:11:29,310 --> 00:11:31,770
We take a dictionary,
we get back a list

255
00:11:31,770 --> 00:11:33,830
of tuples, key value tuples.

256
00:11:33,830 --> 00:11:35,960
Then we sort that
dictionary-- I mean,

257
00:11:35,960 --> 00:11:38,200
sort that list of
key value tuples.

258
00:11:38,200 --> 00:11:39,850
And then it's sorted by key.

259
00:11:39,850 --> 00:11:40,350
OK.

260
00:11:40,350 --> 00:11:43,380
So that's one sort.

261
00:11:43,380 --> 00:11:51,090
There is a built-in function
in Python called sorted,

262
00:11:51,090 --> 00:11:53,270
which takes as a
parameter a list

263
00:11:53,270 --> 00:11:56,130
and gives you back a sorted
version of that list.

264
00:11:56,130 --> 00:11:58,820
So we can collapse
these operations

265
00:11:58,820 --> 00:12:04,150
by saying, well, d sub items is
this list of tuples non-sorted.

266
00:12:04,150 --> 00:12:08,210
But sorted of d sub items
is that same list of tuples,

267
00:12:08,210 --> 00:12:09,100
but then sorted.

268
00:12:09,100 --> 00:12:15,270
So immediately in one step,
we have A, B, and C properly

269
00:12:15,270 --> 00:12:16,480
sorted.

270
00:12:16,480 --> 00:12:19,340
And we can combine all
this into one nice little

271
00:12:19,340 --> 00:12:24,000
for statement, where we say for
k, v in sorted of d sub items.

272
00:12:24,000 --> 00:12:27,520
So this is now going to
first sort the key value

273
00:12:27,520 --> 00:12:31,530
pairs by key, and then k, v
is going to run through them.

274
00:12:31,530 --> 00:12:35,990
So k's going to be A 10,
then k is going to be B.

275
00:12:35,990 --> 00:12:37,660
v is going to be 1.

276
00:12:37,660 --> 00:12:40,580
k is going to be C.
B is going to be 22.

277
00:12:40,580 --> 00:12:42,400
So now we've printed
these things out

278
00:12:42,400 --> 00:12:44,650
in alphabetical key order.

279
00:12:44,650 --> 00:12:45,440
OK.

280
00:12:45,440 --> 00:12:47,470
So by adding sorted
to d.items, that

281
00:12:47,470 --> 00:12:54,170
means that this loop is going
to run in key sorted order,

282
00:12:54,170 --> 00:12:56,300
key sorted order.

283
00:12:56,300 --> 00:12:59,050
And that's because
sorted takes a list,

284
00:12:59,050 --> 00:13:03,080
and then returns-- takes a
list as unsorted list as input

285
00:13:03,080 --> 00:13:04,665
and returns a sorted list.

286
00:13:04,665 --> 00:13:07,525

287
00:13:07,525 --> 00:13:09,850
OK?

288
00:13:09,850 --> 00:13:14,020
Now if we're doing something
like our common problem

289
00:13:14,020 --> 00:13:15,640
of what's the most
common word, what

290
00:13:15,640 --> 00:13:19,080
if we want to say what's
the five most common words?

291
00:13:19,080 --> 00:13:23,210
In that case, we probably want
to sort in descending order

292
00:13:23,210 --> 00:13:26,590
by the values not the key.

293
00:13:26,590 --> 00:13:28,830
OK?

294
00:13:28,830 --> 00:13:32,230
So we want to sort by the
values instead of the key.

295
00:13:32,230 --> 00:13:34,160
So this is a situation
where we're going

296
00:13:34,160 --> 00:13:36,790
to create a temporary variable.

297
00:13:36,790 --> 00:13:39,520
So here's how we're
going to do it.

298
00:13:39,520 --> 00:13:42,580
Here is our
dictionary with A 10.

299
00:13:42,580 --> 00:13:44,580
And we want to sort,
now, by the values.

300
00:13:44,580 --> 00:13:48,610
We want to maybe see the most
common or sort by the values.

301
00:13:48,610 --> 00:13:52,322
And so we're going to
make a temporary list.

302
00:13:52,322 --> 00:13:54,280
And then we're going to
loop through the items.

303
00:13:54,280 --> 00:13:56,979

304
00:13:56,979 --> 00:13:58,770
So this is going to
just loop through them.

305
00:13:58,770 --> 00:14:01,800
And it's going to loop through
them in non-sorted order.

306
00:14:01,800 --> 00:14:05,930
And we are going to add
using the append operation

307
00:14:05,930 --> 00:14:08,020
to this little list
that we're making.

308
00:14:08,020 --> 00:14:14,280
But we're going to add a
tuple that is value, key.

309
00:14:14,280 --> 00:14:18,300
So if we make the value
first and the key second,

310
00:14:18,300 --> 00:14:19,310
in this tuple.

311
00:14:19,310 --> 00:14:22,790
So this syntax here of
this parentheses v,k,

312
00:14:22,790 --> 00:14:27,210
that means make a two tuple
with values from the v and k

313
00:14:27,210 --> 00:14:30,330
variable and append to list.

314
00:14:30,330 --> 00:14:34,660
So you're going to end up
with a list of two tuples.

315
00:14:34,660 --> 00:14:37,960
So if we take a look when
we're all done with this,

316
00:14:37,960 --> 00:14:39,380
each of these is a tuple.

317
00:14:39,380 --> 00:14:40,770
10A gets appended.

318
00:14:40,770 --> 00:14:44,030
22C gets appended.

319
00:14:44,030 --> 00:14:46,810
And it was simply
the opposite order.

320
00:14:46,810 --> 00:14:49,190
Each of the tuples
now has the value

321
00:14:49,190 --> 00:14:53,690
first and the key second, value
first, key second, value first,

322
00:14:53,690 --> 00:14:54,410
key second.

323
00:14:54,410 --> 00:14:57,690
So this is a bit of temporary
data that we've created.

324
00:14:57,690 --> 00:15:00,830
This is a bit of temporary
data that we've created.

325
00:15:00,830 --> 00:15:05,070
Then what we do is we
call the sort method.

326
00:15:05,070 --> 00:15:07,990
Take this list--
lists are mutable.

327
00:15:07,990 --> 00:15:09,860
The individual tuples
can't be changed.

328
00:15:09,860 --> 00:15:11,810
But the order of the
tuples can be changed,

329
00:15:11,810 --> 00:15:14,130
because they are in a list.

330
00:15:14,130 --> 00:15:15,980
Temp dot sort, and
then we're going

331
00:15:15,980 --> 00:15:17,660
to say reverse equals true.

332
00:15:17,660 --> 00:15:21,390
So we sort from the
highest down to the lowest.

333
00:15:21,390 --> 00:15:22,470
OK.

334
00:15:22,470 --> 00:15:24,840
And now temp has been sorted.

335
00:15:24,840 --> 00:15:27,852
And now it is in a
new order, 22, 10,

336
00:15:27,852 --> 00:15:30,480
1 is what caused
it to be sorted.

337
00:15:30,480 --> 00:15:33,090
So we know that
the biggest value

338
00:15:33,090 --> 00:15:38,370
is 22, the key of C. Next
biggest is 10 with a key of A.

339
00:15:38,370 --> 00:15:42,290
And the smallest is a
value of 1 with a key of B.

340
00:15:42,290 --> 00:15:46,370
So the trick here is if we
want to sort in some other way,

341
00:15:46,370 --> 00:15:49,272
we just construct a list
where we put it in the order

342
00:15:49,272 --> 00:15:50,230
that we want it sorted.

343
00:15:50,230 --> 00:15:53,270
And this is more important now,
the value is more important,

344
00:15:53,270 --> 00:15:54,620
than the key.

345
00:15:54,620 --> 00:16:02,500
Now if we had 22 f, it
would sort first on the 22,

346
00:16:02,500 --> 00:16:06,537
and then it would sort
the f, 1 after the c, 1.

347
00:16:06,537 --> 00:16:07,870
So we don't have any duplicates.

348
00:16:07,870 --> 00:16:10,815
But we could have
the key of C to 22.

349
00:16:10,815 --> 00:16:12,400
And we could have F also to 22.

350
00:16:12,400 --> 00:16:14,800

351
00:16:14,800 --> 00:16:15,300
OK.

352
00:16:15,300 --> 00:16:18,050
So take some time on this.

353
00:16:18,050 --> 00:16:20,210
Get this one right.

354
00:16:20,210 --> 00:16:22,660
So now I want to
show you a program

355
00:16:22,660 --> 00:16:26,090
that is going to show you
the 10 most common words.

356
00:16:26,090 --> 00:16:35,410
We did a loop before, where
we did the most common word

357
00:16:35,410 --> 00:16:37,530
by doing a maximum
loop at the end

358
00:16:37,530 --> 00:16:40,610
by looking through all of
the counts in a dictionary,

359
00:16:40,610 --> 00:16:42,130
and then picking the maximum.

360
00:16:42,130 --> 00:16:44,130
But if you wanted the top 10?

361
00:16:44,130 --> 00:16:44,724
Right?

362
00:16:44,724 --> 00:16:46,390
You don't want to
write a loop for that.

363
00:16:46,390 --> 00:16:47,700
So we're going to use sorting.

364
00:16:47,700 --> 00:16:49,990
So here's what
we're going to do.

365
00:16:49,990 --> 00:16:52,630
We're going to open a file.

366
00:16:52,630 --> 00:16:55,870
We're going to create a
empty counts dictionary.

367
00:16:55,870 --> 00:17:00,560
Then we're going to write a
for loop that reads each line,

368
00:17:00,560 --> 00:17:02,470
for line in fhand.

369
00:17:02,470 --> 00:17:04,720
Then I'm going to
split each line

370
00:17:04,720 --> 00:17:09,349
into words based on the
spaces using the dot split.

371
00:17:09,349 --> 00:17:13,540
Then I'm going to loop through
each word in each line and use

372
00:17:13,540 --> 00:17:18,410
our histogram or
dictionary pattern,

373
00:17:18,410 --> 00:17:21,900
where I say count sub word
equals counts.get, word,zero.

374
00:17:21,900 --> 00:17:25,410
That basically says
go look in counts.

375
00:17:25,410 --> 00:17:28,910
If the word key exists, give me
back the value that's in that.

376
00:17:28,910 --> 00:17:30,410
Otherwise, give me 0.

377
00:17:30,410 --> 00:17:34,120
So this both creates the
new entries and updates

378
00:17:34,120 --> 00:17:37,590
old entries all in one
nice simple statement.

379
00:17:37,590 --> 00:17:41,140
So at the end of this
bit of code right here,

380
00:17:41,140 --> 00:17:48,260
we are going to have counts
with word count pairs.

381
00:17:48,260 --> 00:17:48,760
OK.

382
00:17:48,760 --> 00:17:51,700
So this is something
we've done before.

383
00:17:51,700 --> 00:17:55,580
It's just dictionaries,
reading, splitting, and then

384
00:17:55,580 --> 00:18:00,020
this pattern of how to
accumulate in a dictionary.

385
00:18:00,020 --> 00:18:02,100
Then what we're going
to do is we're going

386
00:18:02,100 --> 00:18:04,720
to make a new list called lst.

387
00:18:04,720 --> 00:18:07,150
And now, we're doing this
key value in the item.

388
00:18:07,150 --> 00:18:09,150
So this is going to go
through the key value

389
00:18:09,150 --> 00:18:12,430
pairs in this list,
which is the key value

390
00:18:12,430 --> 00:18:15,410
pairs from the dictionary.

391
00:18:15,410 --> 00:18:16,020
Right.

392
00:18:16,020 --> 00:18:19,570
But then we are going to create
this temporary list of tuples

393
00:18:19,570 --> 00:18:21,720
that are val,key.

394
00:18:21,720 --> 00:18:30,230
So val is like 20 the, 14 hello.

395
00:18:30,230 --> 00:18:32,550
And that's what the list
is going to look like.

396
00:18:32,550 --> 00:18:34,670
It's going to be tuples.

397
00:18:34,670 --> 00:18:37,980
But it's going to be the
value, and then the key

398
00:18:37,980 --> 00:18:39,610
rather than the
key and the value.

399
00:18:39,610 --> 00:18:42,240
This one here is key,value.

400
00:18:42,240 --> 00:18:46,520
This one here,
lst, is value key.

401
00:18:46,520 --> 00:18:53,582
Now that we have a
list that's value,key,

402
00:18:53,582 --> 00:18:54,790
we are just going to sort it.

403
00:18:54,790 --> 00:18:57,081
Because now it's going to
sort based on the first thing

404
00:18:57,081 --> 00:18:58,070
in that tuple.

405
00:18:58,070 --> 00:18:59,320
And we're going to reverse it.

406
00:18:59,320 --> 00:19:02,730
So the biggest values
are near the top.

407
00:19:02,730 --> 00:19:04,830
And so when we're
all done, this is

408
00:19:04,830 --> 00:19:06,760
going to be a list
except it's going to be

409
00:19:06,760 --> 00:19:09,270
sorted based on the value.

410
00:19:09,270 --> 00:19:11,500
So that's just one
step to sort it.

411
00:19:11,500 --> 00:19:13,490
So this is a good example
of how we sort of go

412
00:19:13,490 --> 00:19:14,240
through some work.

413
00:19:14,240 --> 00:19:17,330
We get a data structure, a
list, the way we want it.

414
00:19:17,330 --> 00:19:19,920
And now we can sort of
leverage the built-in sort.

415
00:19:19,920 --> 00:19:23,709
We had to prepare a list, so
we could use the built-in sort.

416
00:19:23,709 --> 00:19:24,750
We could do this by hand.

417
00:19:24,750 --> 00:19:26,708
But it would be very
difficult. But it's easier

418
00:19:26,708 --> 00:19:29,910
to say I think I'll make a
list, and then I'll sort it.

419
00:19:29,910 --> 00:19:30,410
OK.

420
00:19:30,410 --> 00:19:32,820
So I made two lists basically.

421
00:19:32,820 --> 00:19:34,130
I made the original one.

422
00:19:34,130 --> 00:19:36,970
Now I made this one just
for the purposes of sorting.

423
00:19:36,970 --> 00:19:40,350
And now what I'm going to
do to print out the top 10

424
00:19:40,350 --> 00:19:44,160
is I am going to write
a for loop, val key.

425
00:19:44,160 --> 00:19:47,910
Remember this list,
lst, is value key.

426
00:19:47,910 --> 00:19:53,890
And I'm going to say for val
key in list, using list slicing,

427
00:19:53,890 --> 00:19:56,390
starting at 0, up
to but not including

428
00:19:56,390 --> 00:20:00,460
10, which is indeed
the first 10 items.

429
00:20:00,460 --> 00:20:02,510
Now, I'm going to
print out key value.

430
00:20:02,510 --> 00:20:09,740
So it's going to be print
out the 22, Fred 16.

431
00:20:09,740 --> 00:20:11,670
It's only going to
print the first 10.

432
00:20:11,670 --> 00:20:14,200
So this list is
in val key order.

433
00:20:14,200 --> 00:20:15,427
The tuples are val key order.

434
00:20:15,427 --> 00:20:17,260
And so I'm going to
print it out in key val,

435
00:20:17,260 --> 00:20:21,070
just so that I print out in a
way that makes the most sense.

436
00:20:21,070 --> 00:20:24,370
And so this is a
simple way to do

437
00:20:24,370 --> 00:20:29,590
a simple histogram of the
occurrence of words in a file.

438
00:20:29,590 --> 00:20:32,970
So again, you should know this.

439
00:20:32,970 --> 00:20:36,178
You should know every line.

440
00:20:36,178 --> 00:20:37,760
You should know every line.

441
00:20:37,760 --> 00:20:39,920
Go back, review a couple times.

442
00:20:39,920 --> 00:20:43,150
But you should know the
meaning of every line of this.

443
00:20:43,150 --> 00:20:46,110
And if you do,
that's really good.

444
00:20:46,110 --> 00:20:53,470
So as you become more powerful
and capable inside Python,

445
00:20:53,470 --> 00:20:56,240
you will realize that there
are sometimes even shorter ways

446
00:20:56,240 --> 00:20:57,770
of doing things.

447
00:20:57,770 --> 00:21:00,200
Now what I'm showing
you here is not

448
00:21:00,200 --> 00:21:03,240
that different than what
was on the previous page.

449
00:21:03,240 --> 00:21:04,890
It's just really dense.

450
00:21:04,890 --> 00:21:07,370
But you have to concentrate.

451
00:21:07,370 --> 00:21:09,620
I want you understand what's
on that previous page.

452
00:21:09,620 --> 00:21:11,495
If you don't understand
this, don't feel bad.

453
00:21:11,495 --> 00:21:13,250
I'm going to explain it to you.

454
00:21:13,250 --> 00:21:15,140
But don't feel bad
if you don't get, OK?

455
00:21:15,140 --> 00:21:18,540
So I'm just going to explain it.

456
00:21:18,540 --> 00:21:20,450
If it doesn't feel
right to you, go back

457
00:21:20,450 --> 00:21:22,060
and look at the previous page.

458
00:21:22,060 --> 00:21:22,890
OK.

459
00:21:22,890 --> 00:21:24,310
So here we go.

460
00:21:24,310 --> 00:21:27,050
I'm going to have a dictionary.

461
00:21:27,050 --> 00:21:33,260
And then I'm going to print
in one line sorted by value.

462
00:21:33,260 --> 00:21:37,100
So we'll start from
the inside out.

463
00:21:37,100 --> 00:21:40,610
So this is a thing called
list comprehension.

464
00:21:40,610 --> 00:21:42,520
It looks like a list
constant, because we

465
00:21:42,520 --> 00:21:44,310
start with square brackets.

466
00:21:44,310 --> 00:21:50,050
But this is a Python syntax
that says construct dynamically

467
00:21:50,050 --> 00:21:55,240
a list of tuples v,k.

468
00:21:55,240 --> 00:21:58,900
And I would like you to loop
through the items with k and v

469
00:21:58,900 --> 00:22:01,980
taking on the successive values.

470
00:22:01,980 --> 00:22:05,120
So this is creating
that reversed list

471
00:22:05,120 --> 00:22:07,380
where value and
key are the order

472
00:22:07,380 --> 00:22:09,514
of the items in each tuple.

473
00:22:09,514 --> 00:22:10,680
And that's going to do that.

474
00:22:10,680 --> 00:22:12,330
So it's going to expand.

475
00:22:12,330 --> 00:22:13,694
It goes vazoo.

476
00:22:13,694 --> 00:22:14,360
It expands this.

477
00:22:14,360 --> 00:22:16,920
It makes a temporary
list right now.

478
00:22:16,920 --> 00:22:18,980
Now if you look on
the previous slide,

479
00:22:18,980 --> 00:22:21,460
we called that thing lst.

480
00:22:21,460 --> 00:22:23,670
But here, we don't
even call it lst.

481
00:22:23,670 --> 00:22:29,850
And then once we have the list
of tuples in value key order,

482
00:22:29,850 --> 00:22:34,020
then we simply take and
pass that into sorted.

483
00:22:34,020 --> 00:22:38,270
This is a function call,
the sorted function.

484
00:22:38,270 --> 00:22:39,450
Now, I'm not reversing it.

485
00:22:39,450 --> 00:22:43,520
But the print statement
prints out its ascending order

486
00:22:43,520 --> 00:22:47,480
of the value, 1, 10, 22.

487
00:22:47,480 --> 00:22:48,150
OK.

488
00:22:48,150 --> 00:22:51,460
So you can make these
more dense once you're

489
00:22:51,460 --> 00:22:54,220
a little more comfortable
with what's going on.

490
00:22:54,220 --> 00:22:57,430
It's sometimes easier
to construct something

491
00:22:57,430 --> 00:23:01,180
that seems to have steps, where
you can put a debug print here,

492
00:23:01,180 --> 00:23:04,010
you can put debug print here,
you can put a debug print here.

493
00:23:04,010 --> 00:23:06,270
And you kind of see
what's going on, right?

494
00:23:06,270 --> 00:23:08,320
Whereas, once you
really understand this,

495
00:23:08,320 --> 00:23:12,110
you can write some
more dense Python.

496
00:23:12,110 --> 00:23:15,042
When you understand
this, it's OK, right?

497
00:23:15,042 --> 00:23:17,250
So I'm not saying you're
supposed to understand this.

498
00:23:17,250 --> 00:23:18,833
But I just want to
point out that it's

499
00:23:18,833 --> 00:23:22,610
possible to do this
in a tighter fashion.

500
00:23:22,610 --> 00:23:29,640
So tuples are like lists, except
that you can't change them.

501
00:23:29,640 --> 00:23:31,370
You can't change lists.

502
00:23:31,370 --> 00:23:33,240
And you can compare them.

503
00:23:33,240 --> 00:23:34,630
You can sort them.

504
00:23:34,630 --> 00:23:36,180
You can sort lists of tuples.

505
00:23:36,180 --> 00:23:40,060
You can't sort within
the tuple itself.

506
00:23:40,060 --> 00:23:42,450
The two values on the
left-hand side of an assignment

507
00:23:42,450 --> 00:23:46,270
statement we can use sorted.

508
00:23:46,270 --> 00:23:49,290
And we played the sorting
dictionaries by key and value.

509
00:23:49,290 --> 00:23:53,690
So that's kind of the
end of this lecture.

510
00:23:53,690 --> 00:23:55,910
And so at this
point, I just want

511
00:23:55,910 --> 00:24:00,980
to congratulate you on making
it through the first 10

512
00:24:00,980 --> 00:24:02,350
chapters of the book.

513
00:24:02,350 --> 00:24:05,330
So I'll drink a
cup of tea to you.

514
00:24:05,330 --> 00:24:06,320
Here's your cup of tea.

515
00:24:06,320 --> 00:24:11,770
Here's my toast to you
in my Slytherin cup.

516
00:24:11,770 --> 00:24:16,200
And so it's time for
a graduation ceremony.

517
00:24:16,200 --> 00:24:18,410
So I'll give a little
graduation speech here

518
00:24:18,410 --> 00:24:20,740
with my graduation hat on.

519
00:24:20,740 --> 00:24:23,740
And this is my Slytherin wand.

520
00:24:23,740 --> 00:24:27,010
And so the reason I'm
congratulating you

521
00:24:27,010 --> 00:24:31,350
at the end of this chapter
is that at this point,

522
00:24:31,350 --> 00:24:39,040
you kind have know all the
fundamentals of programming.

523
00:24:39,040 --> 00:24:41,030
Programming really
comes down to what's

524
00:24:41,030 --> 00:24:43,920
called algorithms
and data structures.

525
00:24:43,920 --> 00:24:48,970
Sometimes we solve a problem
by a clever series of steps

526
00:24:48,970 --> 00:24:50,530
that we put together.

527
00:24:50,530 --> 00:24:53,830
And sometimes we solve a problem
by creating a clever data

528
00:24:53,830 --> 00:24:55,670
structure.

529
00:24:55,670 --> 00:24:59,260
And so the first few chapters
were about algorithm, steps,

530
00:24:59,260 --> 00:25:02,100
loops, functions,
very procedural,

531
00:25:02,100 --> 00:25:05,300
how you sort of create
these threads of stepping

532
00:25:05,300 --> 00:25:09,010
and do things a bunch of times
or skip around or whatever.

533
00:25:09,010 --> 00:25:11,330
And in the last three
chapters that we've covered,

534
00:25:11,330 --> 00:25:13,650
we're talking about
data structures.

535
00:25:13,650 --> 00:25:18,020
And programming power comes when
you combine algorithms and data

536
00:25:18,020 --> 00:25:19,880
structures.

537
00:25:19,880 --> 00:25:21,660
Now in the next
chapters, starting

538
00:25:21,660 --> 00:25:24,600
with chapter 11,
Regular Expressions,

539
00:25:24,600 --> 00:25:29,500
we're going to learn more clever
ways of doing the same thing.

540
00:25:29,500 --> 00:25:31,750
So you kind of know how
to do a lot of stuff now.

541
00:25:31,750 --> 00:25:34,520
From this point forward,
you'll say, oh boy,

542
00:25:34,520 --> 00:25:35,380
that's more clever.

543
00:25:35,380 --> 00:25:36,790
Or we'll use a database.

544
00:25:36,790 --> 00:25:38,230
Oh, that's more clever.

545
00:25:38,230 --> 00:25:40,490
But it's not
fundamentally different.

546
00:25:40,490 --> 00:25:46,210
And so that's why it's
important for you,

547
00:25:46,210 --> 00:25:49,770
before you leave this moment,
to understand everything

548
00:25:49,770 --> 00:25:53,880
that we've covered so far,
loops, functions, strings,

549
00:25:53,880 --> 00:25:58,825
files, tuples,
lists, dictionaries.

550
00:25:58,825 --> 00:26:00,450
Because they're kind
of the foundation.

551
00:26:00,450 --> 00:26:02,580
And everything else
will just kind of

552
00:26:02,580 --> 00:26:05,300
be a subtle refinement
slash improvement.

553
00:26:05,300 --> 00:26:09,570
So once you understand
that, you've kind of begun.

554
00:26:09,570 --> 00:26:11,080
You become a basic programmer.

555
00:26:11,080 --> 00:26:14,095
And I like, poof.

556
00:26:14,095 --> 00:26:18,877
I magically [INAUDIBLE] you
and turn you a Pythoneo.

557
00:26:18,877 --> 00:26:19,710
Something like that.

558
00:26:19,710 --> 00:26:20,210
OK.

559
00:26:20,210 --> 00:26:22,800
Enough with the Harry
Potter reference.

560
00:26:22,800 --> 00:26:25,780
Thank you for spending
all this time with me.

561
00:26:25,780 --> 00:26:29,760
If you've gotten this far,
I really appreciate it.

562
00:26:29,760 --> 00:26:32,350
And of course, it's
really just the beginning.

563
00:26:32,350 --> 00:26:35,580
But I hope that it has
been a good beginning.

564
00:26:35,580 --> 00:26:37,130
Thank you.