1
00:00:00,000 --> 00:00:00,650

2
00:00:00,650 --> 00:00:01,150
Hello.

3
00:00:01,150 --> 00:00:04,430
And welcome to yet another
worked exercise from Python

4
00:00:04,430 --> 00:00:06,980
for Informatics,
Exploring Information.

5
00:00:06,980 --> 00:00:08,460
My name is Charles Severance.

6
00:00:08,460 --> 00:00:11,370
And I'm your exercise coach.

7
00:00:11,370 --> 00:00:14,880
I'm your personal trainer,
your personal assistant.

8
00:00:14,880 --> 00:00:18,620
Welcome to the software
development gym.

9
00:00:18,620 --> 00:00:21,600
This material, of course, is
copyright Creative Commons

10
00:00:21,600 --> 00:00:24,060
as is the textbook as well.

11
00:00:24,060 --> 00:00:27,060
So just make sure when
you're using these exercises

12
00:00:27,060 --> 00:00:29,580
that you're using them properly.

13
00:00:29,580 --> 00:00:32,700
Particularly if you've
taken this class

14
00:00:32,700 --> 00:00:36,670
and you have an assignment
that includes this exercise,

15
00:00:36,670 --> 00:00:38,500
you probably should
try it first.

16
00:00:38,500 --> 00:00:40,160
I mean, these
exercises are there so

17
00:00:40,160 --> 00:00:42,120
that you learn the material.

18
00:00:42,120 --> 00:00:47,140
And if you just sort of take
the crutch every time then

19
00:00:47,140 --> 00:00:50,280
you won't learn to do
things on your own.

20
00:00:50,280 --> 00:00:55,430
So enough of that lecturing.

21
00:00:55,430 --> 00:00:59,470
Other details you can
get from Pythonlearn.com.

22
00:00:59,470 --> 00:01:03,620
So today, we're
contemplating exercise 6.9.

23
00:01:03,620 --> 00:01:05,930
And our goal is
to write some code

24
00:01:05,930 --> 00:01:10,300
to parse lines that start with
this something blah, blah,

25
00:01:10,300 --> 00:01:13,250
blah, blah, colon.

26
00:01:13,250 --> 00:01:15,890
And then we're going to
chop off the second half

27
00:01:15,890 --> 00:01:18,700
and convert to
floating point number.

28
00:01:18,700 --> 00:01:22,170
In a later chapter
we'll do this in a loop.

29
00:01:22,170 --> 00:01:25,320
But for now, we're just
going to like hack one line

30
00:01:25,320 --> 00:01:27,420
and just see what it looks like.

31
00:01:27,420 --> 00:01:28,480
OK.

32
00:01:28,480 --> 00:01:31,420
And so this one's
kind of a silly one,

33
00:01:31,420 --> 00:01:34,710
but we'll do it anyway.

34
00:01:34,710 --> 00:01:39,360
So this one, let's grab this
string while we're at it

35
00:01:39,360 --> 00:01:43,730
and start up TextWrangler.

36
00:01:43,730 --> 00:01:47,360
The last exercise
is still there.

37
00:01:47,360 --> 00:01:52,530
I started TextWrangler and I'll
start the terminal program.

38
00:01:52,530 --> 00:01:57,729

39
00:01:57,729 --> 00:01:59,770
From the terminal program,
I'll go to my desktop.

40
00:01:59,770 --> 00:02:02,320
I'll go to Python for
Informatics folder.

41
00:02:02,320 --> 00:02:07,730

42
00:02:07,730 --> 00:02:10,380
And I'll paste that string in.

43
00:02:10,380 --> 00:02:13,680
And I'm just going to
call my string x for now.

44
00:02:13,680 --> 00:02:15,540
And I'll put this in a string.

45
00:02:15,540 --> 00:02:18,020
Later, you'll be reading
this from a file.

46
00:02:18,020 --> 00:02:20,830
But this exercise is not to
read anything from a file.

47
00:02:20,830 --> 00:02:24,670
This exercise is just
parse to that string.

48
00:02:24,670 --> 00:02:28,000
So it's going pretty simple.

49
00:02:28,000 --> 00:02:29,530
We'll print x just for yucks.

50
00:02:29,530 --> 00:02:32,352

51
00:02:32,352 --> 00:02:33,810
We could make it
so it would prompt

52
00:02:33,810 --> 00:02:36,443
for this string in a loop
or something like that,

53
00:02:36,443 --> 00:02:38,820
but we'll leave that for now.

54
00:02:38,820 --> 00:02:42,030
We're just going to-- our job
is just hackin' and slashin'.

55
00:02:42,030 --> 00:02:44,060
So the first thing
we're going to do

56
00:02:44,060 --> 00:02:47,910
is we're going to use the find
function in the string library.

57
00:02:47,910 --> 00:02:48,410
Great.

58
00:02:48,410 --> 00:02:49,840
Make a variable call position.

59
00:02:49,840 --> 00:02:53,390
And we're going to
say x dot find colon.

60
00:02:53,390 --> 00:02:56,590
It's like where
is that colon at?

61
00:02:56,590 --> 00:02:59,280
Print position.

62
00:02:59,280 --> 00:03:04,736
And we're going to save
this guy as spamchop.py.

63
00:03:04,736 --> 00:03:08,646

64
00:03:08,646 --> 00:03:10,377
And of course,
the colors change.

65
00:03:10,377 --> 00:03:11,335
And we do it in a list.

66
00:03:11,335 --> 00:03:12,660
And here's spamchop.py.

67
00:03:12,660 --> 00:03:15,155
So I say Python spamchop.py.

68
00:03:15,155 --> 00:03:17,730

69
00:03:17,730 --> 00:03:20,725
An again, there's no input here.

70
00:03:20,725 --> 00:03:21,800
Let's run that again.

71
00:03:21,800 --> 00:03:24,852
Python spamchop.py.

72
00:03:24,852 --> 00:03:25,840
So there we go.

73
00:03:25,840 --> 00:03:29,860
So that basically says that
the position of this letter

74
00:03:29,860 --> 00:03:33,000
is the position 18.

75
00:03:33,000 --> 00:03:35,180
So the next thing
we're going to do

76
00:03:35,180 --> 00:03:37,680
is we're going to
just sort of say OK.

77
00:03:37,680 --> 00:03:39,870
Let's chop off the first part.

78
00:03:39,870 --> 00:03:42,390
Print x.

79
00:03:42,390 --> 00:03:46,700
We're going to use string
slicing, pos colon, which

80
00:03:46,700 --> 00:03:50,080
says start at position
and move to the end.

81
00:03:50,080 --> 00:03:53,150
So I'll save that
one and I'll run it.

82
00:03:53,150 --> 00:03:55,170
And that looks pretty close.

83
00:03:55,170 --> 00:04:00,330
We got rid of most of it, but
we still don't have the colon.

84
00:04:00,330 --> 00:04:03,970
So we got to chop off one after
the position of the colon.

85
00:04:03,970 --> 00:04:06,210
We actually are not
interested in the colon.

86
00:04:06,210 --> 00:04:08,550
So we just add one here.

87
00:04:08,550 --> 00:04:11,040
And then go, spamchop.

88
00:04:11,040 --> 00:04:13,860
Now, we're going to see if
the float cares about this.

89
00:04:13,860 --> 00:04:16,779
I don't think so,
but we'll find out.

90
00:04:16,779 --> 00:04:20,450
num equals float.

91
00:04:20,450 --> 00:04:24,840
And I'm just going to
say x of position plus 1

92
00:04:24,840 --> 00:04:28,480
because I can give it an
expression here to the end.

93
00:04:28,480 --> 00:04:30,180
And see what happens.

94
00:04:30,180 --> 00:04:32,214
Print num.

95
00:04:32,214 --> 00:04:33,880
So what do you think
is going to happen?

96
00:04:33,880 --> 00:04:34,950
Think it's going to work?

97
00:04:34,950 --> 00:04:36,116
Think it's going to blow up?

98
00:04:36,116 --> 00:04:40,150
Think these spaces at the front
are going to freak it out?

99
00:04:40,150 --> 00:04:41,975
Let's find out.

100
00:04:41,975 --> 00:04:42,475
No.

101
00:04:42,475 --> 00:04:45,170
The spaces don't freak it out.

102
00:04:45,170 --> 00:04:48,130
So we now have a number.

103
00:04:48,130 --> 00:04:52,410
And if I did a
print of type, just

104
00:04:52,410 --> 00:04:55,930
to be sort of like
obsessively compulsive,

105
00:04:55,930 --> 00:04:59,980
you could say num
comma type of num.

106
00:04:59,980 --> 00:05:05,989
And so proven to me, and I
can comment these guys out.

107
00:05:05,989 --> 00:05:07,655
We don't really need
those guys anymore.

108
00:05:07,655 --> 00:05:13,290

109
00:05:13,290 --> 00:05:15,182
And that is a
floating point number.

110
00:05:15,182 --> 00:05:16,640
And it's all parsed,
and it's cool.

111
00:05:16,640 --> 00:05:18,160
I mean, it's pretty simple.

112
00:05:18,160 --> 00:05:18,700
Right?

113
00:05:18,700 --> 00:05:21,220
You go find where this thing
is, advance one character

114
00:05:21,220 --> 00:05:24,300
beyond it, and
then slice it out.

115
00:05:24,300 --> 00:05:25,880
Simple enough.

116
00:05:25,880 --> 00:05:27,830
Thanks for your time.