1
00:00:00,543 --> 00:00:01,376
- So welcome back,

2
00:00:01,376 --> 00:00:03,256
we're now going to talk about expressions.

3
00:00:03,256 --> 00:00:05,829
Expressions are a little
more complex calculations

4
00:00:05,829 --> 00:00:08,698
that we can sorta do
on the right hand side

5
00:00:08,698 --> 00:00:10,904
of an assignment statement.

6
00:00:10,904 --> 00:00:14,284
So one of the things about
expressions is operators,

7
00:00:14,284 --> 00:00:17,203
and then operators in
computer programming are often

8
00:00:17,203 --> 00:00:19,616
very much the same as the
mathematical operators.

9
00:00:19,616 --> 00:00:22,405
But we don't have all the fancy characters

10
00:00:22,405 --> 00:00:26,902
that we have in mathematics,
and so we have to choose

11
00:00:26,902 --> 00:00:27,856
what's on the keyboard.

12
00:00:27,856 --> 00:00:31,352
And then we really go back
to the 1960s and 1970s

13
00:00:31,352 --> 00:00:32,925
and then we use what was on the keyboard

14
00:00:32,925 --> 00:00:36,299
in the 1960s and the 1970s
to make these operators.

15
00:00:36,299 --> 00:00:39,604
So plus is addition, minus is subtraction,

16
00:00:39,604 --> 00:00:42,194
we don't have a times sign
or a dot in the middle,

17
00:00:42,194 --> 00:00:44,868
so we use the asterisk as multiplication,

18
00:00:44,868 --> 00:00:47,422
division, we can't put two
things over the top of each other

19
00:00:47,422 --> 00:00:50,473
so we use slash for division,
raising to the power,

20
00:00:50,473 --> 00:00:52,111
because they didn't have
little characters back then

21
00:00:52,111 --> 00:00:55,163
is star star, which is
raising to the power,

22
00:00:55,163 --> 00:00:58,204
and then remainder, remainder is the,

23
00:00:58,204 --> 00:00:59,843
when you do integer division,

24
00:00:59,843 --> 00:01:01,605
it's also called the modulo
operator, it's the remainder,

25
00:01:01,605 --> 00:01:05,779
not the quotient and I've got
a picture of that coming up.

26
00:01:05,779 --> 00:01:08,653
So here's a whole series
of little examples of this,

27
00:01:08,653 --> 00:01:11,056
right, so we've already
seen, you know, the plus,

28
00:01:11,056 --> 00:01:12,380
x equals x plus 1,

29
00:01:12,380 --> 00:01:14,799
keep remembering that these
assignments are arrows,

30
00:01:14,799 --> 00:01:17,534
basically, arrow, arrow
the other direction.

31
00:01:17,534 --> 00:01:19,951
Multiplication, 440 times 12.

32
00:01:21,262 --> 00:01:23,348
Dividing this by that's division,

33
00:01:23,348 --> 00:01:24,681
over 1000, 5.28.

34
00:01:27,681 --> 00:01:29,481
Here we're gonna put 23 into jj

35
00:01:29,481 --> 00:01:30,571
and then we'll do modulo.

36
00:01:30,571 --> 00:01:33,728
So that says take 23 divided
by five and give me back

37
00:01:33,728 --> 00:01:35,266
the remainder and put it in kk.

38
00:01:35,266 --> 00:01:38,182
So this is the expression
that evaluates like this.

39
00:01:38,182 --> 00:01:42,971
Take 23 divide five into
23, four remainder three.

40
00:01:42,971 --> 00:01:46,073
The three is what comes
back up here, okay?

41
00:01:46,073 --> 00:01:47,990
And so that is the remainder,

42
00:01:47,990 --> 00:01:49,627
it's also called the modulo operator.

43
00:01:49,627 --> 00:01:52,948
It turns out for things
like, picking a random number

44
00:01:52,948 --> 00:01:55,281
and then taking the modulo of 52,

45
00:01:55,281 --> 00:01:57,007
is a way to pick a card randomly.

46
00:01:57,007 --> 00:01:59,320
So this modulo operator is actually

47
00:01:59,320 --> 00:02:02,513
a specialty in games and
other things, super useful.

48
00:02:02,513 --> 00:02:05,180
So that's the various operators.

49
00:02:06,879 --> 00:02:10,655
It's important to know which
of these operators goes first.

50
00:02:10,655 --> 00:02:12,618
It's called operator precedence.

51
00:02:12,618 --> 00:02:15,238
Now normally we put parentheses in.

52
00:02:15,238 --> 00:02:17,481
Like you know, so if I put
the parentheses in here,

53
00:02:17,481 --> 00:02:19,937
I'd say this goes first parentheses,

54
00:02:19,937 --> 00:02:22,707
then this goes first,
actually not that one.

55
00:02:22,707 --> 00:02:25,019
Whoops, got that one wrong.

56
00:02:25,019 --> 00:02:29,574
This happens first, this
happens, then this happens.

57
00:02:29,574 --> 00:02:30,407
Okay?

58
00:02:31,360 --> 00:02:33,411
But it's important for
us to be able to know

59
00:02:33,411 --> 00:02:35,435
if there were not parentheses
the order in which

60
00:02:35,435 --> 00:02:37,037
these things will happen.

61
00:02:37,037 --> 00:02:40,616
So the way things work, in
terms of operator precedence,

62
00:02:40,616 --> 00:02:43,339
is parentheses are the
most important thing,

63
00:02:43,339 --> 00:02:46,765
followed by raising to the
power, all those being equal,

64
00:02:46,765 --> 00:02:50,315
multiplication and
division, are both equal,

65
00:02:50,315 --> 00:02:51,148
and then addition,

66
00:02:51,148 --> 00:02:53,315
and then within it's adding left to right.

67
00:02:53,315 --> 00:02:56,473
So let's see an example of how this works.

68
00:02:56,473 --> 00:03:00,373
And so if we take one plus
two, raised to the three power,

69
00:03:00,373 --> 00:03:02,316
divided by four, times five.

70
00:03:02,316 --> 00:03:04,410
And we print out what comes out of this.

71
00:03:04,410 --> 00:03:08,324
So, the way I did this
when I was taking exams

72
00:03:08,324 --> 00:03:10,599
back many, many years ago when I was first

73
00:03:10,599 --> 00:03:13,138
in computer science, is
I'd write it all down

74
00:03:13,138 --> 00:03:14,812
and I'd look for the
highest precedence thing.

75
00:03:14,812 --> 00:03:16,739
Now parentheses would make this easy.

76
00:03:16,739 --> 00:03:18,558
But exponentiation is the first one,

77
00:03:18,558 --> 00:03:20,429
so that means we're gonna take this,

78
00:03:20,429 --> 00:03:21,877
and that's gonna be eight.

79
00:03:21,877 --> 00:03:25,057
Two to the third power,
two times two times two.

80
00:03:25,057 --> 00:03:26,640
Two cubed is eight.

81
00:03:28,618 --> 00:03:29,451
Then what I would do is,

82
00:03:29,451 --> 00:03:30,932
I would rewrite the whole
thing with the eight there,

83
00:03:30,932 --> 00:03:34,043
and I'd look across, and I'm
looking for multiplications.

84
00:03:34,043 --> 00:03:35,170
Because the powers been done,

85
00:03:35,170 --> 00:03:37,185
the multiplication's what
I'm looking for next.

86
00:03:37,185 --> 00:03:39,083
And then there is both
multiplication and division.

87
00:03:39,083 --> 00:03:41,307
They are equal, they're at the same level.

88
00:03:41,307 --> 00:03:43,259
And so what happens is,
they're done left to right.

89
00:03:43,259 --> 00:03:47,605
Eight divided by four happens
before four times five.

90
00:03:47,605 --> 00:03:49,981
And so the fact that
it's not four times five,

91
00:03:49,981 --> 00:03:51,537
but instead eight times four,

92
00:03:51,537 --> 00:03:52,951
is because of the left to right rule.

93
00:03:52,951 --> 00:03:55,503
So then this gets rewritten to be two.

94
00:03:55,503 --> 00:03:57,302
One plus two times five.

95
00:03:57,302 --> 00:04:00,091
And this one, multiplication
is the top one,

96
00:04:00,091 --> 00:04:01,422
so that does this next.

97
00:04:01,422 --> 00:04:02,591
Two times five becomes ten.

98
00:04:02,591 --> 00:04:03,834
I rewrite it again.

99
00:04:03,834 --> 00:04:06,310
And then one plus 10,
addition is the lowest thing.

100
00:04:06,310 --> 00:04:09,207
And that's how we end up with 11.

101
00:04:09,207 --> 00:04:11,685
And so that's how I
would do these problems

102
00:04:11,685 --> 00:04:14,837
if I ever saw the problem on an exam.

103
00:04:14,837 --> 00:04:16,890
And it's a fun problem to put on exams

104
00:04:16,890 --> 00:04:19,457
because there is one and only one answer,

105
00:04:19,457 --> 00:04:22,193
and every programming
class has usually at least

106
00:04:22,193 --> 00:04:24,358
one slide about this stuff.

107
00:04:24,358 --> 00:04:26,772
So like I said, the
rules go top to bottom,

108
00:04:26,772 --> 00:04:30,232
parentheses, power,
multiplication, addition,

109
00:04:30,232 --> 00:04:33,429
and then left to right within it.

110
00:04:33,429 --> 00:04:36,427
So, we talked about variables
and computing values

111
00:04:36,427 --> 00:04:38,144
to put inside variables,

112
00:04:38,144 --> 00:04:39,775
but the one thing you kind of also,

113
00:04:39,775 --> 00:04:41,299
maybe you noticed today as we go by,

114
00:04:41,299 --> 00:04:43,778
is we have different kinds of data.

115
00:04:43,778 --> 00:04:45,099
We call it type.

116
00:04:45,099 --> 00:04:46,366
Is this of type integer?

117
00:04:46,366 --> 00:04:48,323
Is this of type floating point number?

118
00:04:48,323 --> 00:04:49,721
Is it of type string?

119
00:04:49,721 --> 00:04:51,371
What is going on here?

120
00:04:51,371 --> 00:04:54,472
And Python is pretty
smart about various kinds

121
00:04:54,472 --> 00:04:56,312
of types of data.

122
00:04:56,312 --> 00:04:59,334
And so, you know, we're
adding one plus four here,

123
00:04:59,334 --> 00:05:01,323
and Python knows as it looks at this

124
00:05:01,323 --> 00:05:02,978
that that's an integer
and that's an integer.

125
00:05:02,978 --> 00:05:05,075
And will add it together
and make it an integer.

126
00:05:05,075 --> 00:05:06,947
So that thing is an integer.

127
00:05:06,947 --> 00:05:10,351
We can also use this plus
to get get need to strings.

128
00:05:10,351 --> 00:05:13,075
This is hello blank plus there.

129
00:05:13,075 --> 00:05:14,923
And plus looks here and
says, oh that's a string

130
00:05:14,923 --> 00:05:17,648
and that's a string, so I
know what to do with strings.

131
00:05:17,648 --> 00:05:19,401
I will concatenate those
two things together

132
00:05:19,401 --> 00:05:21,988
so it become another
string that gets assigned

133
00:05:21,988 --> 00:05:24,982
into eee and it's hello space there.

134
00:05:24,982 --> 00:05:27,114
The plus doesn't add the
space, I added the space

135
00:05:27,114 --> 00:05:29,273
by putting it right there.

136
00:05:29,273 --> 00:05:31,142
And so these operators are kind of smart,

137
00:05:31,142 --> 00:05:32,941
in that they kind of know
what they're dealing with

138
00:05:32,941 --> 00:05:35,832
and sometimes they will
do one thing or another,

139
00:05:35,832 --> 00:05:39,447
depending on the kinds of
values, variables, or constants

140
00:05:39,447 --> 00:05:42,363
that they're working with.

141
00:05:42,363 --> 00:05:46,632
And so, sometimes type
can get us in trouble.

142
00:05:46,632 --> 00:05:49,806
So here we have eee, which is hello there,

143
00:05:49,806 --> 00:05:52,101
because we concatenated
these two strings together,

144
00:05:52,101 --> 00:05:53,246
and now we're adding one.

145
00:05:53,246 --> 00:05:55,539
And the problem now, is that
it looks on one side and says,

146
00:05:55,539 --> 00:05:57,628
that's a string and
that's a number and says,

147
00:05:57,628 --> 00:05:59,308
I don't know how to do that.

148
00:05:59,308 --> 00:06:01,442
This is another one of
those annoying errors

149
00:06:01,442 --> 00:06:04,609
that you think that somehow
Python doesn't like you,

150
00:06:04,609 --> 00:06:06,472
but it just is confused.

151
00:06:06,472 --> 00:06:08,794
If you look at these things,
trace back, trace back

152
00:06:08,794 --> 00:06:10,448
always means I quit.

153
00:06:10,448 --> 00:06:13,539
Means I stopped, I ran, I'm
quitting now because I don't

154
00:06:13,539 --> 00:06:16,049
want to go any farther
because I've become confused.

155
00:06:16,049 --> 00:06:19,091
So your program stops running and you say,

156
00:06:19,091 --> 00:06:20,576
here's where I stopped running.

157
00:06:20,576 --> 00:06:21,930
Because we're typing
interactively, it's always

158
00:06:21,930 --> 00:06:23,428
line one here.

159
00:06:23,428 --> 00:06:26,518
Type it, but you read carefully
and you don't get too stuck

160
00:06:26,518 --> 00:06:29,616
on too much stuff, line one
that tells us something.

161
00:06:29,616 --> 00:06:33,235
In module>TypeError:
Can't covert 'int' object

162
00:06:33,235 --> 00:06:34,556
to str implicitly.

163
00:06:34,556 --> 00:06:36,953
So that's an integer right
there, and that's a string,

164
00:06:36,953 --> 00:06:38,498
and that's what it's complaining about.

165
00:06:38,498 --> 00:06:39,957
That little bit right there.

166
00:06:39,957 --> 00:06:42,763
If Python is so grumpy about types,

167
00:06:42,763 --> 00:06:44,625
then we should be able
to ask it about a type.

168
00:06:44,625 --> 00:06:48,603
So there turns out that
there is, inside Python,

169
00:06:48,603 --> 00:06:51,950
a built in function called type, t y p e.

170
00:06:51,950 --> 00:06:53,822
So we can pass into type.

171
00:06:53,822 --> 00:06:57,357
So this syntax is calling a
built in function name type,

172
00:06:57,357 --> 00:07:00,665
parentheses is the parameter
that we're passing to it.

173
00:07:00,665 --> 00:07:03,159
We're saying, hey, hello,
tell me something about

174
00:07:03,159 --> 00:07:06,029
the type of the variable eee.

175
00:07:06,029 --> 00:07:08,001
And so this is a function,
the parentheses are part

176
00:07:08,001 --> 00:07:09,448
of the function call.

177
00:07:09,448 --> 00:07:12,976
And it says, oh that
would be of class string.

178
00:07:12,976 --> 00:07:14,922
And then we can pass in
a constant that says,

179
00:07:14,922 --> 00:07:16,613
hey what about hello?

180
00:07:16,613 --> 00:07:17,645
The string hello.

181
00:07:17,645 --> 00:07:19,248
It's like, oh that's a string too.

182
00:07:19,248 --> 00:07:20,081
What about a one?

183
00:07:20,081 --> 00:07:21,118
Well that's an integer.

184
00:07:21,118 --> 00:07:25,234
And so we're asking Python
through the type function,

185
00:07:25,234 --> 00:07:29,634
what the type of either a
variable or a constant is.

186
00:07:29,634 --> 00:07:31,417
And there are even
several types of numbers

187
00:07:31,417 --> 00:07:35,194
and we'll even see
Booleans and others later.

188
00:07:35,194 --> 00:07:38,482
Like one with no decimal,
that's an integer number.

189
00:07:38,482 --> 00:07:41,927
98.6 with a decimal, that's
a floating point number.

190
00:07:41,927 --> 00:07:43,889
And so, you know, constants and,

191
00:07:43,889 --> 00:07:47,686
constants can be both
integer and floating point.

192
00:07:47,686 --> 00:07:49,838
And I'm just asking over
and over and over again,

193
00:07:49,838 --> 00:07:52,114
what is the type of, what's in xxx,

194
00:07:52,114 --> 00:07:53,777
what's the type of what's in temp,

195
00:07:53,777 --> 00:07:57,659
and what's the type of the constant one?

196
00:07:57,659 --> 00:07:59,909
And what's the type of 1.0?

197
00:08:01,100 --> 00:08:04,033
You can also use a set
of built in functions

198
00:08:04,033 --> 00:08:08,009
like float and int to
convert from one to another.

199
00:08:08,009 --> 00:08:10,942
And so this basically
says, I wanna convert,

200
00:08:10,942 --> 00:08:13,042
oops, let's go back.

201
00:08:13,042 --> 00:08:16,868
I wanna convert 99 to a
floating point number.

202
00:08:16,868 --> 00:08:18,966
So this is a function
and it's participating

203
00:08:18,966 --> 00:08:22,589
in this plus, but before
it can finish the plus,

204
00:08:22,589 --> 00:08:24,756
it turns this into a 99.0.

205
00:08:25,788 --> 00:08:28,413
The difference between
99 as an integer and 99.0

206
00:08:28,413 --> 00:08:30,043
is that it's a floating point number.

207
00:08:30,043 --> 00:08:32,514
And that actually turns this computation,

208
00:08:32,514 --> 00:08:34,669
as it looks to the left
and looks to the right.

209
00:08:34,669 --> 00:08:37,346
It says, oh I've got a floating
point number on one side,

210
00:08:37,346 --> 00:08:39,256
and an integer on the other side.

211
00:08:39,256 --> 00:08:41,506
And so I'm gonna make my
calculation overall be

212
00:08:41,506 --> 00:08:43,385
a floating point calculation.

213
00:08:43,385 --> 00:08:46,288
I can also pass into the float function.

214
00:08:46,288 --> 00:08:49,455
I can say take this
variable i, which has a 42,

215
00:08:49,455 --> 00:08:53,095
also an integer, and then
give me back a floating point.

216
00:08:53,095 --> 00:08:56,483
So that'll be 42.0 pass that into f,

217
00:08:56,483 --> 00:09:00,877
we print it out and it is
indeed 42.0, and it's a float.

218
00:09:00,877 --> 00:09:05,057
And so it knows the type
and value in any variable.

219
00:09:05,057 --> 00:09:07,216
This is an integer, a value 42.

220
00:09:07,216 --> 00:09:09,716
This is a float, a value 42.0.

221
00:09:12,583 --> 00:09:15,410
Integer division in Python
2 was kind of weird.

222
00:09:15,410 --> 00:09:17,516
And it was actually one of
the big things they changed

223
00:09:17,516 --> 00:09:19,676
between Python 2 and Python 3.

224
00:09:19,676 --> 00:09:21,616
This is a Python 3 course,
so we're not worried

225
00:09:21,616 --> 00:09:23,041
about that too much.

226
00:09:23,041 --> 00:09:26,102
What's nice about integer
division in Python 3

227
00:09:26,102 --> 00:09:28,627
is it always produces a
floating point result.

228
00:09:28,627 --> 00:09:32,042
And that means that Python 3's
division is more predictable

229
00:09:32,042 --> 00:09:35,281
and it works more like a calculator.

230
00:09:35,281 --> 00:09:37,678
So in this case, I mean
you can go back and look

231
00:09:37,678 --> 00:09:39,874
at my Python 2 lectures
and see how crazy it was

232
00:09:39,874 --> 00:09:41,077
in Python 2.

233
00:09:41,077 --> 00:09:44,205
10 divided by two is 5.0,
and the weird thing here is

234
00:09:44,205 --> 00:09:47,219
these are both integers,
but the division forces the

235
00:09:47,219 --> 00:09:50,053
result of a calculation to
be a floating point number.

236
00:09:50,053 --> 00:09:52,738
And this, you know, ten
over 2 could be five,

237
00:09:52,738 --> 00:09:54,821
but nine over two is 4.5.

238
00:09:55,956 --> 00:09:57,716
And so that is accurate.

239
00:09:57,716 --> 00:10:00,350
In old Python 2, it
would give us back four,

240
00:10:00,350 --> 00:10:03,783
which is completely
unpredictable and weird.

241
00:10:03,783 --> 00:10:07,283
The same with 99 over
100, as you would expect,

242
00:10:07,283 --> 00:10:09,592
if this were a calculator you'd get 0.99.

243
00:10:09,592 --> 00:10:12,480
Actually what you get in Python 2 is 0.

244
00:10:12,480 --> 00:10:13,775
Because it would round it down,

245
00:10:13,775 --> 00:10:16,361
it doesn't round at it all truncates it.

246
00:10:16,361 --> 00:10:20,357
So 99 over 100 is 0.99 and
then it truncates it to zero.

247
00:10:20,357 --> 00:10:22,785
That's Python 2, we're not
talking about Python 2.

248
00:10:22,785 --> 00:10:25,049
There's a good reason we're
not talking about Python 2.

249
00:10:25,049 --> 00:10:26,580
Welcome to Python 3.

250
00:10:26,580 --> 00:10:28,769
Of course if there are a
floating point on either side,

251
00:10:28,769 --> 00:10:31,479
the result is still a floating
point, floating point,

252
00:10:31,479 --> 00:10:33,177
and the result is still a floating point.

253
00:10:33,177 --> 00:10:36,231
So, integer division
produces a floating result

254
00:10:36,231 --> 00:10:37,398
in Python 3.0.

255
00:10:38,736 --> 00:10:40,843
Not in Python 2.0.

256
00:10:40,843 --> 00:10:44,402
That is an improvement in Python 3.0.

257
00:10:44,402 --> 00:10:46,297
And that's why we're
recording these lectures.

258
00:10:46,297 --> 00:10:48,821
I have a whole great set
of lectures about Python 2,

259
00:10:48,821 --> 00:10:50,295
and now I'm gonna have
a great set of lectures

260
00:10:50,295 --> 00:10:51,726
about Python 3.

261
00:10:51,726 --> 00:10:53,393
Welcome to Python 3.

262
00:10:54,267 --> 00:10:56,706
Okay, so we've been
talking about converting

263
00:10:56,706 --> 00:10:58,003
from integer to floating point,

264
00:10:58,003 --> 00:11:00,641
but you can also convert
from sting to integer

265
00:11:00,641 --> 00:11:02,895
or string to floating point.

266
00:11:02,895 --> 00:11:06,465
And so here we start out
with a little string value,

267
00:11:06,465 --> 00:11:08,576
now it only works for strings
that are made of digits.

268
00:11:08,576 --> 00:11:10,826
So "123" is not an integer,

269
00:11:11,895 --> 00:11:15,306
it is a three character string
that has one, two, three

270
00:11:15,306 --> 00:11:16,827
as the characters in that string.

271
00:11:16,827 --> 00:11:20,360
Which is very different than 123.

272
00:11:20,360 --> 00:11:21,746
We say what is the type of this?

273
00:11:21,746 --> 00:11:23,069
It's a string.

274
00:11:23,069 --> 00:11:24,732
We say let's add one to it.

275
00:11:24,732 --> 00:11:27,973
And it says can't convert "int" to string.

276
00:11:27,973 --> 00:11:29,260
So that blows up, right?

277
00:11:29,260 --> 00:11:30,512
Cause this is a string.

278
00:11:30,512 --> 00:11:32,918
It looks to both sides,
string plus an integer,

279
00:11:32,918 --> 00:11:34,168
not good, okay?

280
00:11:35,078 --> 00:11:36,959
But, we can convert this.

281
00:11:36,959 --> 00:11:38,642
We can call the int function,

282
00:11:38,642 --> 00:11:41,440
which is like the float
function, and pass a string in.

283
00:11:41,440 --> 00:11:44,796
So it says, hey, take this
and turn it into an integer.

284
00:11:44,796 --> 00:11:48,769
So take the input of s val,
which is the string "123"

285
00:11:48,769 --> 00:11:51,609
and give me back an integer
representation of that.

286
00:11:51,609 --> 00:11:54,203
Which is going to be 123.

287
00:11:54,203 --> 00:11:55,996
So we say what kind of
thing did we get back?

288
00:11:55,996 --> 00:11:57,238
Well we got back an integer,

289
00:11:57,238 --> 00:12:00,261
we can now add one to it and get 124.

290
00:12:00,261 --> 00:12:03,078
And so, you have to
manage the type of things.

291
00:12:03,078 --> 00:12:06,787
And you can convert from
one type to another.

292
00:12:06,787 --> 00:12:08,741
Now, it is not magic.

293
00:12:08,741 --> 00:12:11,635
If you send something into
it, a string that doesn't

294
00:12:11,635 --> 00:12:13,100
consist of digits,

295
00:12:13,100 --> 00:12:15,453
then you're gonna end
up with another error.

296
00:12:15,453 --> 00:12:17,724
Invalid literal for for
integer with base 10,

297
00:12:17,724 --> 00:12:18,911
blah blah blah blah blah.

298
00:12:18,911 --> 00:12:19,916
So it's really complaining.

299
00:12:19,916 --> 00:12:21,668
It says, I want these to be number here,

300
00:12:21,668 --> 00:12:23,057
and you just gave me letters.

301
00:12:23,057 --> 00:12:26,224
So that's going to cause this to fail.

302
00:12:27,292 --> 00:12:29,326
Another thing that we're
going to do with variables is,

303
00:12:29,326 --> 00:12:32,337
just like the print
function takes something,

304
00:12:32,337 --> 00:12:35,556
a list of things, in this case
a string comma a variable,

305
00:12:35,556 --> 00:12:38,165
and then prints some
output in the program,

306
00:12:38,165 --> 00:12:39,703
the opposite of that is input.

307
00:12:39,703 --> 00:12:42,111
Actually input generally
happens before output.

308
00:12:42,111 --> 00:12:44,129
Input is a built in function.

309
00:12:44,129 --> 00:12:45,975
And we pass to it a prompt.

310
00:12:45,975 --> 00:12:49,181
A string of text that's going
to be printed out for the user

311
00:12:49,181 --> 00:12:51,116
and then it stops and waits.

312
00:12:51,116 --> 00:12:52,725
So it says, who are you?

313
00:12:52,725 --> 00:12:54,772
And then right here it just sits.

314
00:12:54,772 --> 00:12:56,621
Waiting for us to type something.

315
00:12:56,621 --> 00:12:59,571
So we type, blah blah blah blah,
and then hit the enter key.

316
00:12:59,571 --> 00:13:01,013
Right, we hit the enter key,

317
00:13:01,013 --> 00:13:04,819
and then this text ends
up in this variable.

318
00:13:04,819 --> 00:13:07,712
So this is an assignment
statement that Chuck

319
00:13:07,712 --> 00:13:09,656
is the result of the input call,

320
00:13:09,656 --> 00:13:12,489
gets copied into the nam variable.

321
00:13:14,894 --> 00:13:16,870
So let's do that again.

322
00:13:16,870 --> 00:13:18,664
It's evaluating an assignment statement.

323
00:13:18,664 --> 00:13:20,662
Remember it's kind of this
way, or you can think of it as

324
00:13:20,662 --> 00:13:22,905
do this right side first.

325
00:13:22,905 --> 00:13:25,195
It writes this out.

326
00:13:25,195 --> 00:13:26,385
Writes that out.

327
00:13:26,385 --> 00:13:27,464
Then it waits.

328
00:13:27,464 --> 00:13:28,937
Wait, wait, wait, wait, wait.

329
00:13:28,937 --> 00:13:31,405
Until we hit the enter.

330
00:13:31,405 --> 00:13:34,599
And takes this Chuck, and
that becomes the result

331
00:13:34,599 --> 00:13:35,779
of this input.

332
00:13:35,779 --> 00:13:39,000
Which is then assigned into nam.

333
00:13:39,000 --> 00:13:41,611
Now then we go sequentially
to the next line,

334
00:13:41,611 --> 00:13:46,032
it prints out Welcome, and any
contents of the variable nam.

335
00:13:46,032 --> 00:13:48,400
Now this one, this
comma here actually does

336
00:13:48,400 --> 00:13:50,138
put the space in here automatically.

337
00:13:50,138 --> 00:13:51,921
So it says Welcome space Chuck.

338
00:13:51,921 --> 00:13:56,199
So there's no space in
Chuck, just c h u c k,

339
00:13:56,199 --> 00:13:58,875
and so print can take more than one thing,

340
00:13:58,875 --> 00:13:59,953
separated by commas.

341
00:13:59,953 --> 00:14:03,638
As a matter of fact print
can have a whole bunch of.

342
00:14:03,638 --> 00:14:05,721
Oops come back come back.

343
00:14:07,349 --> 00:14:09,562
Print can have comma,
comma, comma parentheses,

344
00:14:09,562 --> 00:14:10,422
as many as you like.

345
00:14:10,422 --> 00:14:12,122
Everything you've seen up
to now is kind of one thing

346
00:14:12,122 --> 00:14:13,492
in the print, but that
doesn't mean that print

347
00:14:13,492 --> 00:14:15,325
only can do one thing.

348
00:14:16,377 --> 00:14:17,778
So I've talked about variables,

349
00:14:17,778 --> 00:14:18,924
we've talked about constants,

350
00:14:18,924 --> 00:14:20,770
we've talked about input,
we've talked about output,

351
00:14:20,770 --> 00:14:25,728
and now it is time to write
our first meaningful program.

352
00:14:25,728 --> 00:14:28,793
And so this program has
to do with those of you

353
00:14:28,793 --> 00:14:31,209
who have traveled internationally.

354
00:14:31,209 --> 00:14:32,616
If you've traveled to the United States

355
00:14:32,616 --> 00:14:34,215
and you've traveled
outside the United States,

356
00:14:34,215 --> 00:14:36,895
you notice that there is
an elevator convention

357
00:14:36,895 --> 00:14:38,886
that is different inside
the United States.

358
00:14:38,886 --> 00:14:41,893
The United States, the
walk in the ground floor

359
00:14:41,893 --> 00:14:43,645
and the elevator that's one.

360
00:14:43,645 --> 00:14:45,643
If you want in a ground floor in Europe,

361
00:14:45,643 --> 00:14:47,132
or many other places in the world,

362
00:14:47,132 --> 00:14:48,937
and the elevator is zero.

363
00:14:48,937 --> 00:14:50,685
So we have written a small app,

364
00:14:50,685 --> 00:14:51,787
that we're gonna put on the app store

365
00:14:51,787 --> 00:14:52,835
and get wealthy with,

366
00:14:52,835 --> 00:14:55,918
called Elevator Floor Conversion App.

367
00:14:56,792 --> 00:14:59,801
And it's gonna ask us, we're
in Europe and we're lost,

368
00:14:59,801 --> 00:15:02,350
and you say, well what
floor would this be if I was

369
00:15:02,350 --> 00:15:04,618
in the United States of America?

370
00:15:04,618 --> 00:15:07,687
And so here's we have to
read the floor that we are at

371
00:15:07,687 --> 00:15:11,074
in Europe, and then we're
going to convert it to

372
00:15:11,074 --> 00:15:12,609
a U.S. floor, and then
we're gonna print it out.

373
00:15:12,609 --> 00:15:14,743
This is very silly,

374
00:15:14,743 --> 00:15:18,910
but it is a pure essential
program that has input,

375
00:15:20,292 --> 00:15:22,843
does some kind of task on that input,

376
00:15:22,843 --> 00:15:24,426
and the produces some output.

377
00:15:24,426 --> 00:15:28,857
Which is useful, for some
value of useful, okay?

378
00:15:28,857 --> 00:15:31,218
So let's take a look at
how we combine everything

379
00:15:31,218 --> 00:15:32,623
that we've learned in this lecture

380
00:15:32,623 --> 00:15:34,613
input, processing, and output.

381
00:15:34,613 --> 00:15:37,354
It's a three line
program, but it's sort of

382
00:15:37,354 --> 00:15:40,162
the beginning of something
that programs do.

383
00:15:40,162 --> 00:15:42,343
Okay, you're gonna do lots
of programs that do this.

384
00:15:42,343 --> 00:15:43,593
So, here we go.

385
00:15:44,708 --> 00:15:46,046
Program starts.

386
00:15:46,046 --> 00:15:47,644
We do the input side effect,

387
00:15:47,644 --> 00:15:50,504
it prints out this and then waits.

388
00:15:50,504 --> 00:15:52,028
We type in zero.

389
00:15:52,028 --> 00:15:53,457
That comes back here.

390
00:15:53,457 --> 00:15:55,709
And the zero, which is a string.

391
00:15:55,709 --> 00:15:57,675
Input gives you back a string,

392
00:15:57,675 --> 00:15:59,835
it doesn't give you back a number.

393
00:15:59,835 --> 00:16:00,969
It's a little different in Python 2,

394
00:16:00,969 --> 00:16:02,990
but in Python 3 input gives you a string.

395
00:16:02,990 --> 00:16:05,588
So "0" which is what we typed here.

396
00:16:05,588 --> 00:16:07,478
We didn't type the quotes, it's a string.

397
00:16:07,478 --> 00:16:09,994
Gets stored in the inp variable.

398
00:16:09,994 --> 00:16:12,424
Then we move to the next statement.

399
00:16:12,424 --> 00:16:14,554
And on this right hand
side we convert that

400
00:16:14,554 --> 00:16:16,321
string variable to an integer.

401
00:16:16,321 --> 00:16:18,062
So that become the integer zero.

402
00:16:18,062 --> 00:16:21,475
We add one to it and
then that becomes one.

403
00:16:21,475 --> 00:16:23,623
And then we assign that into usf.

404
00:16:23,623 --> 00:16:26,972
I've named this variable
United States Floor.

405
00:16:26,972 --> 00:16:27,805
Right?

406
00:16:27,805 --> 00:16:29,270
So inp is the input and usf.

407
00:16:29,270 --> 00:16:32,001
That's mnemonic, it doesn't
know anything about elevators.

408
00:16:32,001 --> 00:16:36,429
It's just I picked a variable
that was quite friendly.

409
00:16:36,429 --> 00:16:41,053
And so at this point, usf
has the United States floor

410
00:16:41,053 --> 00:16:42,982
that's equivalent the the European floor

411
00:16:42,982 --> 00:16:45,629
and then I just fall down
and I do a print statement.

412
00:16:45,629 --> 00:16:48,705
Print out US floor, US floor comma,

413
00:16:48,705 --> 00:16:50,087
that's this space right here,

414
00:16:50,087 --> 00:16:53,140
and then whatever the contents
of the US floor variable is.

415
00:16:53,140 --> 00:16:55,734
And you could see that I
could write this on four,

416
00:16:55,734 --> 00:16:56,925
and it would say three.

417
00:16:56,925 --> 00:16:58,834
I could write this in say seven,

418
00:16:58,834 --> 00:17:00,150
and it would say six.

419
00:17:00,150 --> 00:17:01,537
This is an amazing program.

420
00:17:01,537 --> 00:17:05,742
It converts floors in a
European numbering scheme.

421
00:17:05,742 --> 00:17:08,456
Wait, actually no, I got that wrong.

422
00:17:08,456 --> 00:17:11,075
Hang on, let me clear this.

423
00:17:11,075 --> 00:17:13,117
I wasn't thinking clearly.

424
00:17:13,117 --> 00:17:16,383
I could type in four and
it would give me back five.

425
00:17:16,383 --> 00:17:18,766
I could type in six and it
would give me back seven.

426
00:17:18,766 --> 00:17:19,648
See I'm confused.

427
00:17:19,648 --> 00:17:21,697
Haven't been in Europe
in a couple of months

428
00:17:21,697 --> 00:17:23,345
and so I forgot all about the floors.

429
00:17:23,345 --> 00:17:24,770
But that's the idea.

430
00:17:24,770 --> 00:17:29,080
Now, this is a super,
super, super simple program.

431
00:17:29,080 --> 00:17:31,714
Not super useful, but you get the idea

432
00:17:31,714 --> 00:17:33,430
that we're gonna pull some data in,

433
00:17:33,430 --> 00:17:35,870
we're gonna do some intelligent thing.

434
00:17:35,870 --> 00:17:38,461
Soon this will be
hundreds of lines of code

435
00:17:38,461 --> 00:17:39,295
instead of one line of code.

436
00:17:39,295 --> 00:17:40,568
And then we go ahead
and present the results

437
00:17:40,568 --> 00:17:41,568
to our user.

438
00:17:45,319 --> 00:17:48,007
Now, another element of
most any programing language

439
00:17:48,007 --> 00:17:49,448
is what's called a comment.

440
00:17:49,448 --> 00:17:53,419
Comment is a way for you
to put in a program file

441
00:17:53,419 --> 00:17:57,718
some text that's to be
ignored by Python or SEER,

442
00:17:57,718 --> 00:17:59,455
what ever language we happen to be using.

443
00:17:59,455 --> 00:18:02,984
In Python comments
start with a pound sign.

444
00:18:02,984 --> 00:18:06,007
So what you could do is put a
pound sign anywhere in a line,

445
00:18:06,007 --> 00:18:09,000
and then after the pound sign
Python ignores everything

446
00:18:09,000 --> 00:18:09,992
after that pound sign.

447
00:18:09,992 --> 00:18:11,547
It can be the first character.

448
00:18:11,547 --> 00:18:14,876
So here's our recurring concept that we

449
00:18:14,876 --> 00:18:16,375
talk a lot about.

450
00:18:16,375 --> 00:18:17,713
We're not gonna cover this.

451
00:18:17,713 --> 00:18:18,591
Remember what this does.

452
00:18:18,591 --> 00:18:20,266
This is counting how many letters.

453
00:18:20,266 --> 00:18:21,965
There's 16 thes.

454
00:18:21,965 --> 00:18:25,530
And in that file there were
six tos, or whatever it was.

455
00:18:25,530 --> 00:18:26,438
This is that code.

456
00:18:26,438 --> 00:18:28,068
We'll get back to this code.

457
00:18:28,068 --> 00:18:29,235
But what we've done here,

458
00:18:29,235 --> 00:18:32,224
is I've added some
comments that are really

459
00:18:32,224 --> 00:18:33,902
for human consumption.

460
00:18:33,902 --> 00:18:36,079
So this first paragraph is
get the name of the file

461
00:18:36,079 --> 00:18:36,972
and open it.

462
00:18:36,972 --> 00:18:39,840
The second paragraph is
count the word frequency.

463
00:18:39,840 --> 00:18:43,467
You know maybe I should
have said histogram here.

464
00:18:43,467 --> 00:18:45,810
Count the word frequency
and assemble a histogram.

465
00:18:45,810 --> 00:18:48,295
And then here I'm putting
this pound sign in,

466
00:18:48,295 --> 00:18:49,416
find the most common word.

467
00:18:49,416 --> 00:18:51,306
And when I'm all done
I print this stuff out.

468
00:18:51,306 --> 00:18:52,139
All right?

469
00:18:52,139 --> 00:18:55,174
And so all I'm saying is
comments are for people

470
00:18:55,174 --> 00:18:58,015
to read, your next
programmer, or the person

471
00:18:58,015 --> 00:19:01,417
who's gonna change your program
after you're done with it.

472
00:19:01,417 --> 00:19:02,300
And they're nice.

473
00:19:02,300 --> 00:19:05,120
And you don't have to use
any particularly weird syntax

474
00:19:05,120 --> 00:19:06,988
or variable name conventions.

475
00:19:06,988 --> 00:19:10,011
You put a pound sign in and
you can write anything you want

476
00:19:10,011 --> 00:19:12,839
from that point forward.

477
00:19:12,839 --> 00:19:15,626
Okay, so we've talked a
little bit about variables,

478
00:19:15,626 --> 00:19:18,314
and types, and mnemonics,
and how we would choose

479
00:19:18,314 --> 00:19:20,897
variable names, and how expressions work,

480
00:19:20,897 --> 00:19:22,192
and the various operators,

481
00:19:22,192 --> 00:19:24,254
converting between different byte types,

482
00:19:24,254 --> 00:19:27,734
printing, input, output, and comments.

483
00:19:27,734 --> 00:19:31,404
So that just kind of gets us sentences.

484
00:19:31,404 --> 00:19:34,647
Coming up next we'll talk
about conditional execution.

485
00:19:34,647 --> 00:19:37,140
Where we're really starting
to move up to paragraphs.

486
00:19:37,140 --> 00:19:38,723
So see ya in a bit.

487
00:19:40,216 --> 00:19:42,633
(soft music)

