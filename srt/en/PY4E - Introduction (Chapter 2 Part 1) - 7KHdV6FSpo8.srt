1
00:00:00,707 --> 00:00:02,963
- Hello and welcome to Chapter 2.

2
00:00:02,963 --> 00:00:04,813
Now we're gonna just
continue to talk about

3
00:00:04,813 --> 00:00:07,740
the building blocks of
Python, variables, constants,

4
00:00:07,740 --> 00:00:10,158
statements, expressions, et cetera.

5
00:00:10,158 --> 00:00:12,524
The first thing we have to
talk about is constants.

6
00:00:12,524 --> 00:00:14,441
These are just things
we call 'em constants

7
00:00:14,441 --> 00:00:15,824
'cause they don't change.

8
00:00:15,824 --> 00:00:18,087
There are numbers, strings, et cetera,

9
00:00:18,087 --> 00:00:20,926
and we use them to
sorta start calculations

10
00:00:20,926 --> 00:00:25,508
or, you know, if something
is greater than 40 hours

11
00:00:25,508 --> 00:00:27,074
we're gonna do something,

12
00:00:27,074 --> 00:00:29,432
so 40 is the constant in that situation.

13
00:00:29,432 --> 00:00:34,056
So, we have 123, we have
98.6, we have 'Hello World',

14
00:00:34,056 --> 00:00:36,180
which is a string by
enclosing it in quotes,

15
00:00:36,180 --> 00:00:39,023
we pass each of these things
to the print function,

16
00:00:39,023 --> 00:00:40,950
and a side effect of the print function

17
00:00:40,950 --> 00:00:42,580
is that we see the output.

18
00:00:42,580 --> 00:00:46,814
So print(123), prints out 123,
print(98.6), prints it out.

19
00:00:46,814 --> 00:00:49,905
So these are just really
the syntax of constants

20
00:00:49,905 --> 00:00:52,591
and without constants we
can't write really much

21
00:00:52,591 --> 00:00:53,796
of anything.

22
00:00:53,796 --> 00:00:56,546
The other sort of foundational notion

23
00:00:56,546 --> 00:00:59,517
of any programming language
are the reserved words,

24
00:00:59,517 --> 00:01:01,119
and like I said before, reserved words

25
00:01:01,119 --> 00:01:04,555
are these special words where
Python is listening for them

26
00:01:04,555 --> 00:01:07,088
and there is very special meanings,

27
00:01:07,088 --> 00:01:10,194
so when Python sees if, it's
not just any other word,

28
00:01:10,194 --> 00:01:15,176
it means how Python implements
conditional execution.

29
00:01:15,176 --> 00:01:18,473
Variables are the third building block,

30
00:01:18,473 --> 00:01:21,986
and that is a way that you can ask Python

31
00:01:21,986 --> 00:01:24,932
to allocate a piece of memory
and then give it a name,

32
00:01:24,932 --> 00:01:26,652
and you can put stuff in that.

33
00:01:26,652 --> 00:01:28,209
Sometimes you just put one value.

34
00:01:28,209 --> 00:01:29,309
Later we'll see,

35
00:01:29,309 --> 00:01:31,529
we do collections in
chapters eight and nine.

36
00:01:31,529 --> 00:01:34,138
We will see that more than one value

37
00:01:34,138 --> 00:01:35,656
can be put into a variable.

38
00:01:35,656 --> 00:01:38,257
And the variable, how
we control the variable,

39
00:01:38,257 --> 00:01:40,314
is through the assignment statement,

40
00:01:40,314 --> 00:01:41,398
and as I said before,

41
00:01:41,398 --> 00:01:43,445
it's important to think of
the assignment statement

42
00:01:43,445 --> 00:01:45,451
as having an arrow to it.

43
00:01:45,451 --> 00:01:48,820
So this is not saying x for
all time is the same as 12.2,

44
00:01:48,820 --> 00:01:52,080
what it's saying is
take 12.2, find a place,

45
00:01:52,080 --> 00:01:55,095
find some memory in your
computer there Mr. Python,

46
00:01:55,095 --> 00:01:57,376
give it a label x, we get to choose the x,

47
00:01:57,376 --> 00:02:00,944
that's the variable
part, we chose it, right,

48
00:02:00,944 --> 00:02:04,246
and then stick 12 in it, and
then the same is true for 14,

49
00:02:04,246 --> 00:02:09,079
go find another spot, name it
y, and then put a 14 in there.

50
00:02:09,079 --> 00:02:12,139
So, think of this as an
arrow every time you see

51
00:02:12,139 --> 00:02:16,306
that equality, the assignment,
in an assignment statement.

52
00:02:18,462 --> 00:02:21,251
Now, these variables hold one value.

53
00:02:21,251 --> 00:02:24,905
So now if we have these
three statements, these two,

54
00:02:24,905 --> 00:02:26,656
and then the third one executes,

55
00:02:26,656 --> 00:02:29,779
it says put 100 into x, but
that wipes out the old value

56
00:02:29,779 --> 00:02:32,831
of 12.2 and it rewrites it with 100,

57
00:02:32,831 --> 00:02:34,941
and so we can change the variables;

58
00:02:34,941 --> 00:02:39,108
that's another reason that
we call them a variable.

59
00:02:40,098 --> 00:02:42,148
There are some names,
now insert some rules

60
00:02:42,148 --> 00:02:43,218
for making variable names.

61
00:02:43,218 --> 00:02:45,629
You can start with a
letter or an underscore.

62
00:02:45,629 --> 00:02:48,421
We tend not to as normal
programmers use underscore,

63
00:02:48,421 --> 00:02:51,817
we tend to reserve those for variables

64
00:02:51,817 --> 00:02:54,386
that we use to communicate
with Python itself,

65
00:02:54,386 --> 00:02:55,632
so when we're making up a variable,

66
00:02:55,632 --> 00:02:59,391
we tend not to use underscores
as a first character.

67
00:02:59,391 --> 00:03:02,608
You can have letters and
numbers and underscores

68
00:03:02,608 --> 00:03:05,158
after the first character
and they're case sensitive

69
00:03:05,158 --> 00:03:06,503
but it's really a bad idea

70
00:03:06,503 --> 00:03:09,753
to use case as the only differentiator.

71
00:03:10,636 --> 00:03:14,719
So, in this case, spam,
eggs, spam23, and _speed,

72
00:03:15,737 --> 00:03:16,763
are all totally legit.

73
00:03:16,763 --> 00:03:18,417
We would probably not use this one

74
00:03:18,417 --> 00:03:20,057
unless we were actually doing it

75
00:03:20,057 --> 00:03:21,828
because Python told us
to use that variable.

76
00:03:21,828 --> 00:03:24,407
23spam starts with a
number, #sign is starts

77
00:03:24,407 --> 00:03:28,373
and dot is not a legitimate
variable character.

78
00:03:28,373 --> 00:03:31,623
And spam, Spam, and SPAM are different,

79
00:03:33,011 --> 00:03:35,094
but this is not something that you want

80
00:03:35,094 --> 00:03:37,594
to sort of depend on too much,

81
00:03:38,475 --> 00:03:40,045
so that's just the rule names.

82
00:03:40,045 --> 00:03:42,196
We tend to start them with a letter

83
00:03:42,196 --> 00:03:44,041
and then use letters,
numbers, and underscores.

84
00:03:44,041 --> 00:03:45,762
Underscores other than the first character

85
00:03:45,762 --> 00:03:50,641
are generally pretty common and
you'll see those used a lot.

86
00:03:50,641 --> 00:03:52,319
Now, when we're choosing variable names,

87
00:03:52,319 --> 00:03:54,503
one of things about variables,
is we get to choose the name;

88
00:03:54,503 --> 00:03:57,678
we get to choose the name
x, choose the name y,

89
00:03:57,678 --> 00:03:59,341
And so sometimes we like 'em short

90
00:03:59,341 --> 00:04:01,292
but sometimes we want them descriptive,

91
00:04:01,292 --> 00:04:04,696
and the notion that of
making variables descriptive

92
00:04:04,696 --> 00:04:07,209
is often confusing to beginning students.

93
00:04:07,209 --> 00:04:09,681
Sometimes it's really helpful to,

94
00:04:09,681 --> 00:04:11,558
if you're gonna have a line of text

95
00:04:11,558 --> 00:04:14,236
and you name the variable
line, that's great,

96
00:04:14,236 --> 00:04:16,002
because the next person
reading your program says,

97
00:04:16,002 --> 00:04:17,874
oh that must be the line of text.

98
00:04:17,874 --> 00:04:21,405
Whereas, it also can become
misleading, that line,

99
00:04:21,405 --> 00:04:24,423
the name of a variable,
somehow has meaning.

100
00:04:24,423 --> 00:04:26,248
So sometimes we'll have
even singular variables

101
00:04:26,248 --> 00:04:29,539
and plural variables,
like friend and friends,

102
00:04:29,539 --> 00:04:30,696
you know like is plural?

103
00:04:30,696 --> 00:04:33,472
Does Python know about
singular and plural?

104
00:04:33,472 --> 00:04:34,755
And the answer is no.

105
00:04:34,755 --> 00:04:38,050
So sometimes we pick
variables that make no sense,

106
00:04:38,050 --> 00:04:39,942
sometimes we pick variables
that make a lot of sense.

107
00:04:39,942 --> 00:04:42,857
This is just something that
you as a beginning programmer

108
00:04:42,857 --> 00:04:44,435
are going to have to understand

109
00:04:44,435 --> 00:04:47,988
that we can pick anything we want.

110
00:04:47,988 --> 00:04:50,622
And so, you'll see I'll try
to call attention to this

111
00:04:50,622 --> 00:04:52,844
in the first few lectures
as we go through.

112
00:04:52,844 --> 00:04:56,040
So here's a bit a code with
an assignment statement,

113
00:04:56,040 --> 00:04:57,985
two assignment statements,
a multiplication,

114
00:04:57,985 --> 00:05:00,077
and a print statement,

115
00:05:00,077 --> 00:05:02,105
and you can say what is this doing?

116
00:05:02,105 --> 00:05:05,637
Now, Python is perfectly
happy with this code

117
00:05:05,637 --> 00:05:06,688
'cause it assigns it in there,

118
00:05:06,688 --> 00:05:09,033
you have said please go
give me this as a label,

119
00:05:09,033 --> 00:05:10,774
and then we assign two variables

120
00:05:10,774 --> 00:05:12,587
and then we're carefully pulling

121
00:05:12,587 --> 00:05:15,221
these two variables back out,
multiplying them together,

122
00:05:15,221 --> 00:05:17,124
and sticking them into
yet another variable

123
00:05:17,124 --> 00:05:18,727
and then printing that variable out.

124
00:05:18,727 --> 00:05:21,345
That seems like, you know, how
we can figure out what it is,

125
00:05:21,345 --> 00:05:22,879
you just have to look really careful,

126
00:05:22,879 --> 00:05:25,676
and a single character mistake,
and Python is gonna be,

127
00:05:25,676 --> 00:05:28,259
you know, pretty unhappy, okay?

128
00:05:29,699 --> 00:05:33,045
So that's one way to write this program.

129
00:05:33,045 --> 00:05:35,068
It's hard though, because
any of those characters

130
00:05:35,068 --> 00:05:37,333
are long variable and
they're random stuff,

131
00:05:37,333 --> 00:05:39,540
it's not very friendly

132
00:05:39,540 --> 00:05:42,041
to anyone who might read your program.

133
00:05:42,041 --> 00:05:43,378
Now this looks a little friendlier.

134
00:05:43,378 --> 00:05:44,384
It's the same program,

135
00:05:44,384 --> 00:05:46,702
because Python just
wants a correspondence.

136
00:05:46,702 --> 00:05:49,710
You pick a, you pick b, and you pick c,

137
00:05:49,710 --> 00:05:53,276
and it's really much easier
for us to see what's going on,

138
00:05:53,276 --> 00:05:57,359
and so this is, in a way
going from here to here,

139
00:05:58,237 --> 00:05:59,965
is much friendlier,

140
00:05:59,965 --> 00:06:02,072
but, we can being even friendlier

141
00:06:02,072 --> 00:06:03,932
if we pick mnemonic variable names.

142
00:06:03,932 --> 00:06:05,349
So this is, this is not mnemonic,

143
00:06:05,349 --> 00:06:06,876
this is short and convenient,

144
00:06:06,876 --> 00:06:09,054
this is long and inconvenient.

145
00:06:09,054 --> 00:06:12,327
Python is happy with any of these.

146
00:06:12,327 --> 00:06:13,630
Here on the other hand, is another version

147
00:06:13,630 --> 00:06:15,479
of the exact same program,

148
00:06:15,479 --> 00:06:18,391
and now you think to yourself,
oh yeah, now I get it.

149
00:06:18,391 --> 00:06:22,710
35 is the number of
hours, 12.50 is the rate,

150
00:06:22,710 --> 00:06:24,853
and then we're gonna multiply
the hours and the rate

151
00:06:24,853 --> 00:06:25,970
and come up with the pay,

152
00:06:25,970 --> 00:06:27,410
and we're printing out the pay.

153
00:06:27,410 --> 00:06:28,632
Now whoever wrote this program

154
00:06:28,632 --> 00:06:32,949
is helping us greatly
understand what's going on,

155
00:06:32,949 --> 00:06:33,894
and that's good.

156
00:06:33,894 --> 00:06:36,939
Choosing variable names, Python again,

157
00:06:36,939 --> 00:06:39,207
all three of these are the same to Python.

158
00:06:39,207 --> 00:06:42,050
Choosing variable names in
a way that help your reader

159
00:06:42,050 --> 00:06:44,948
understand what's going
on, is a great thing.

160
00:06:44,948 --> 00:06:48,865
The problem is, the danger
is, if you read this

161
00:06:50,238 --> 00:06:53,092
and you think that somehow
Python understands payroll;

162
00:06:53,092 --> 00:06:54,705
that if you name a variable hours

163
00:06:54,705 --> 00:06:56,800
that Python knows what hours means.

164
00:06:56,800 --> 00:06:59,958
The answer is, Python, really doesn't care

165
00:06:59,958 --> 00:07:00,929
what you name the variable,

166
00:07:00,929 --> 00:07:03,521
as long as what you name
it you use it, right,

167
00:07:03,521 --> 00:07:05,456
and so you gotta be careful.

168
00:07:05,456 --> 00:07:08,706
And so you'll see, when I write my code

169
00:07:09,685 --> 00:07:13,417
in these first few weeks,
first few lectures,

170
00:07:13,417 --> 00:07:15,439
I will sometimes write it with gibberish,

171
00:07:15,439 --> 00:07:17,464
I'll sometimes write
it with extremely short

172
00:07:17,464 --> 00:07:18,763
but meaningless variable names

173
00:07:18,763 --> 00:07:20,962
and sometimes I'll use
meaningful variable names

174
00:07:20,962 --> 00:07:24,918
and I'll call your attention
to it and it will get you.

175
00:07:24,918 --> 00:07:27,198
You'll start, when you
look at this third kind

176
00:07:27,198 --> 00:07:30,303
it has meaningful variables
or mnemonic variable names,

177
00:07:30,303 --> 00:07:32,567
you'll just instinctively want

178
00:07:32,567 --> 00:07:34,706
to give Python more intelligence

179
00:07:34,706 --> 00:07:36,640
than it sort of deserves.

180
00:07:36,640 --> 00:07:39,460
I guess that's probably
the best way to say that.

181
00:07:39,460 --> 00:07:41,098
So, we've talked about constants,

182
00:07:41,098 --> 00:07:42,725
we've talked about reserved words,

183
00:07:42,725 --> 00:07:44,892
we talked about variables.

184
00:07:46,135 --> 00:07:48,144
And so, here we have a sentence,

185
00:07:48,144 --> 00:07:49,686
like we've already done
some of these things,

186
00:07:49,686 --> 00:07:53,849
where we said x = 2, we
retrieve the old value of x

187
00:07:53,849 --> 00:07:57,697
and add 2 to it, so that becomes
4, and then we print 4 out.

188
00:07:57,697 --> 00:07:59,864
Print is a function that's built-in

189
00:07:59,864 --> 00:08:02,134
and we pass in whatever
we want to print out,

190
00:08:02,134 --> 00:08:06,051
so this parenthesis is
part of a function call.

191
00:08:07,584 --> 00:08:10,079
Okay, so an assignment statement,

192
00:08:10,079 --> 00:08:13,257
you have to really get
your head around the notion

193
00:08:13,257 --> 00:08:16,406
that it has this arrow nature,

194
00:08:16,406 --> 00:08:19,981
and that it valuates this
entire right-hand side

195
00:08:19,981 --> 00:08:23,369
before we change the left-hand side,

196
00:08:23,369 --> 00:08:26,422
and so you can think of this
sort of as at time step 1

197
00:08:26,422 --> 00:08:29,335
it does this and then at
time step 2 it does the copy,

198
00:08:29,335 --> 00:08:31,642
and that's how you can
have something like x

199
00:08:31,642 --> 00:08:35,767
on both sides of an assignment statement.

200
00:08:35,767 --> 00:08:39,934
And so, if for example we
have x, and x has 0.6 in it,

201
00:08:41,003 --> 00:08:43,864
x has 0.6 in it, what happens is, is that,

202
00:08:43,864 --> 00:08:46,966
it first it sort of ignores
this part right here

203
00:08:46,966 --> 00:08:48,767
and evaluates the expression.

204
00:08:48,767 --> 00:08:52,684
So it pulls the 0.6, everywhere
x appears, it pulls 0.6 out,

205
00:08:52,684 --> 00:08:55,148
then it starts running these calculations,

206
00:08:55,148 --> 00:08:56,955
and then it has the new value.

207
00:08:56,955 --> 00:08:58,859
After all the calculations are done,

208
00:08:58,859 --> 00:09:03,026
then and only then is it
going to put that back into x.

209
00:09:04,405 --> 00:09:08,036
And so it sort of takes that
and puts it back into x,

210
00:09:08,036 --> 00:09:10,600
and then wipes out the old value.

211
00:09:10,600 --> 00:09:12,529
At this point, this
has all been taken care

212
00:09:12,529 --> 00:09:15,758
and it's been reduced down to this 0.93,

213
00:09:15,758 --> 00:09:19,591
and so that is what's
put in as the new value.

214
00:09:20,790 --> 00:09:23,444
So, up next, we'll talk
a little bit more about

215
00:09:23,444 --> 00:09:26,111
making more complex expressions.

216
00:09:27,765 --> 00:09:30,598
(classical music)

