
% Python for Everybody 
% Exploring Data Using Python 3
% Charles R. Severance

Perché dovreste imparare a scrivere programmi?
=======================================

Scrivere programmi (o programmare) è un'attivitá molto creativa e gratificante
Potete scrivere programmi per molte ragioni,
per guadagnarti da vivere, per risolvere complessi problemi di analisi dei dati, per divertimento
o per aiutare qualcun altro a risolvere un problema. Questo libro presuppone che
*tutti* abbiano bisogno di saper programmare e che una volta che abbiano saputo
come programmare, sapranno cosa fare con le nuove capacità acquisite.


Ogni giorno siamo circondati da computer che vanno dai portatili
ai telefoni cellulari. Possiamo pensare a questi computer come ai nostri "assistenti
personali"che si prendono cura di molti aspetti per nostro conto. L'hardware
degli elaboratori moderni è essenzialmente costruito per porci continuamente
la domanda: "Cosa vorresti che facessi dopo?"

![Personal Digital Assistant](height=1.0in@../images/pda)

I programmatori hanno aggiunto un sistema operativo e una serie di applicazioni all'
hardware ed abbiamo ottenuto un assistente personale digitale che è abbastanza
utile e capace di aiutarci a fare molte cose diverse.

I nostri computer sono veloci e sono dotati di una grande quantità di memoria e potrebbero esserci molto
utili se solo conoscessimo la lingua per spiegare loro
quello che vorremmo fosse "fatto dopo". Se conoscessimo questa lingua,
potremmo dire al computer di svolgere compiti ripetitivi per nostro conto.
È interessante notare che il tipo di cose che i computer possono fare meglio sono
spesso il genere di cose che noi umani troviamo più noiose e logoranti.

Ad esempio, leggete i primi tre paragrafi di questo capitolo ed individaute
la parola più comunemente usata e quante volte questa venga ripetuta.
Mentre siete in grado di leggere e capire le parole in pochi secondi,
contarle è quasi difficoltoso in quanto non è il tipo di problema
per cui le menti umane sono abituate a trovare una soluzione. Per un computer è l'opposto
ad essere vero, leggere e capire il testo da un pezzo di carta è difficoltoso
mentre contare le parole e dirvi quante volte é ripetuta
la parola più usata è molto semplice per il computer:

~~~~ {.python}
    python words.py
    Enter file:words.txt
    to 16
~~~~

Il nostro "assistente personal per l'analisi delle informazioni" ci ha rapidamente detto che 
la parola "a" è stata usata sedici volte nei primi tre paragrafi di questo 
capitolo.

Questo stesso fatto che i computer siano bravi a cose che gli umani non sono
é il motivo per cui è necessario che voi diventiate abili nel parlare di "linguaggio informatico". Una volta che
avrete imparato questa nuova lingua, potrete delegare al vostro partner (computer) compiti banali,
lasciandovi più tempo per fare le cose per cui
siete piú portati. Voi aggiungete creatività, intuizione e invettiva
a questa partnership.

Creatività e motivazione
-------------------------

Nonostante questo libro non sia destinato a programmatori professionisti,
la programmazione può essere un lavoro molto gratificante sia dal punto dal punto di vista finanziario
sia personalmente. Scrivere programmi utili, eleganti e intelligenti perché altri
li possano utilizzare è un'attività molto creativa. Il vostro computer o il vostro Assistente Personale Digitale
(PDA) di solito contegono molti programmi diversi scritti da molti
diverse team di sviluppatori in competizione per la vostra attenzione e
interesse. Fanno del loro meglio per soddisfare le vostre esigenze e darti nel contempo una meravigliosa
fornisce un'esperienza utente. In alcune situazioni, quando si sceglie di
software specifico, i programmatori sono direttamente compensati per via della
vostra scelta.

Se pensiamo ai programmi come alla produzione creativa di team di programmatori,
forse la seguente immagine è una versione più sensata del nostro PDA:

![Programmers Talking to You](height=1.0in@../images/pda2)

Per ora, la nostra motivazione principale non è fare soldi o finire per soddisfare
utenti finali, ma piuttosto per essere più produttivi nella gestione dei dati e
informazioni che incontreremo nelle nostre vite. In un primo momento,
sarete sia lo sviluppatore sia l'utente finale dei vostri programmi. Come
migliorete la vostra abilità come programmatore e la programmazione sembrerà più creativa,
potresti iniziare a pensare allo sviluppo di programmi per gli altri.

Architettura hardware del computer
------------------------------

\index{hardware}
\index{hardware!architettura}

Prima di iniziare a imparare la lingua che useremo per dare istruzioni ad un
computer per sviluppare software, abbiamo bisogno di imparare una piccola quantità di nozioni su come
sono costruiti i computer. Se doveste smontare il vostro computer o il vostro cellulare
e guardarvi dentro, trovereste le seguenti parti:

![Hardware Architecture](height=1.75in@../images/arch)

Le definizioni di alto livello di queste parti sono le seguenti:

- La *Central Processing Unit* (o CPU) è la parte del
    computer che è stata costruita per essere ossessionato dalla domanda "qual è la prossima istruzione?"Se
    il vostro computer ha una frequenza di 3.0 Gigahertz, significa che la CPU chiederà
    "qual è la prossima istruzione?"tre miliardi di volte al secondo. State per
    imparare come parlare velocemente per stare al passo con la CPU.

- La * Memoria principale * viene utilizzata per memorizzare le informazioni di cui
    la CPU ha bisogno in meno tempo possibile. La memoria principale è veloce quasi quanto la
    CPU. Ma le informazioni memorizzate nella memoria principale spariscono quando
    il computer viene spento.

- La * memoria secondaria * è utilizzata anche per memorizzare
    informazioni, ma è molto più lenta della memoria principale. Il
    vantaggio della memoria secondaria è che può conservare le informazioni 
    anche quando il computer non viene alimentato. Esempi di memoria
    secondaria sono i dischi rigidi o le memoria flash (generalmente pendrive USB
    e lettori multimediali portatili).

- I * Dispositivi di Input ed Output * sono, semplicemente, il nostro schermo,
    la tastiera, il mouse, il microfono, gli altoparlanti, il touchpad, ecc. Sono tutti
    i modi con cui interagiamo con il computer.

- Al giorno d'oggi la maggior parte dei computer ha anche una *Connessione
    di rete* per scambiare informazioni su una rete. Possiamo
    pensare alla rete come a un posto molto lento per archiviare e recuperare i dati
    che potrebbe non essere sempre funzionante. Quindi in un certo senso, la rete è la
    forma più lenta e talvolta inaffidabile di * memoria
    secondaria*.

Mentre la maggior parte dei dettagli su come funzionano questi componenti è meglio lasciarli
ai costruttori di computer, è utile conoscere un po' di terminologia in modo da poter parlare
di questi diversi componenti mentre scriviamo i nostri programmi.

Come sviluppatori, il vostro compito è quello di utilizzare e orchestrare ciascuno di queste
risorse per risolvere i problemi e analizzare i
dati ottenuti. Per lo più come sviluppatori
"parlerete" con la CPU e indicarle cosa fare dopo. A volte direte
alla CPU di usare la memoria principale, la memoria secondaria, la rete o i
dispositivi di input/output.

![Where Are You?](height=1.75in@../images/arch2)

Dovete essere le persone che rispondono alla CPU alla domanda "Qual è la prossima istruzione?".
Ma sarebbe molto scomodo rimpicciolirvi a 5 mm di altezza e
introdurvi nel computer solo per poter dare un comando per tre
miliardi di volte al secondo. Quindi, invece, dovete scrivere in anticipo le vostre
istruzioni. Chiamiamo *programma* queste istruzioni memorizzate
e *programmazione* l'atto di scrivere queste istruzioni
e fare in modo che siano corrette.

Capire la Programmazione
-------------------------

Nel resto di questo libro, cercheremo di trasformarvi in una persona
esperta nell'arte della programmazione. Alla fine diventerete
*programmatori* - forse non un programmatore professionista, ma
almeno avrete le capacità per esamina un problema riguardante l'analisi di dati/informazioni 
e sviluppare un programma che risolva il problema.

\index{problem solving}

In un certo senso, avrete bisogno di due abilità per diventare un programmatore:

- Per prima cosa, dovrete conoscere il linguaggio di programmazione (Python) - di cui avete bisogno
    di conoscere il vocabolario e la grammatica. Dovete essere in grado di scrivere correntemente
    le parole in questa nuova lingua e sapere come costruire
    frasi "ben strutturate" in questa nuova lingua.

- In secondo luogo, dovrete aver bisogno di "raccontare una storia". Per scrivere una storia, combinate
    parole e frasi allo scopo di trasmettere un'idea al lettore. Sono necessarie
    abilità e arte nella costruzione della storia e l'abilità nella scrittura di storie
    viene migliorata scrivendo e ottenendo feedback. Nella
    programmazione, il nostro programma è la "storia" e il problema che state 
    cercare di risolvere è "l'idea".

Una volta che avrete un linguaggio di programmazione come Python, troverete
molto più facile imparare un secondo linguaggio di programmazione come JavaScript o
C++. Il nuovo linguaggio di programmazione avrà un vocabolario ed una grammatica molto diversi
ma le necessità di problem-solving sono comuni a tutti
i linguaggi di programmazione.

Imparete il "vocabolario" e le "frasi" di Python molto
velocemente. Sarà necessario più tempo per essere in grado di scrivere un programma coerente
per risolvere un problema nuovo. Si Insegna a programmare in modo simile a
come si insegna a scrivere. Iniziamo con il leggere e capire i programmi, quindi scriveremo
dei programmi semplici, in seguito scriveremo programmi sempre più complessi
. Ad un certo punto "entrerete in contatto con la vostra musa" e riuscirete a vedere da soli lo schema
e sarà più naturale risolvere un problema e scrivere un programma
che lo risolva. Una volta arrivati a quel punto, programmare
diventerà un processo molto piacevole e creativo.

Iniziamo con il vocabolario e la struttura dei programmi in Python. Siate
pazienti, questi esempi più semplici vi ricorderanno quando avete iniziato a leggere
per la prima volta.

Parole e frasi
-------------------

\index{linguaggio di programmazione}
\index{linguaggio!programmazione}

A differenza dei linguaggi umani, il vocabolario di Python è in realtà piuttosto limitato.
Chiamiamo questo "vocabolario" "parole riservate". Queste sono parole che
hanno un significato molto speciale per Python. Quando Python incontra queste parole in un suo
script, hanno un solo ed unico significato per Python. Più tardi
scriverete codice, creete le vostre parole che avranno un proprio significato
che chiameremo *variabili*. Avrete una grande libertà nello
scegliere i nomi per le vostre variabili, ma non potrete usare nessuna
delle parole riservate di Python come nome per una variabile.

Quando addestriamo un cane, utilizziamo parole speciali come "sit", "stay" e
"fetch". Quando parlate con un cane e non utilizzate nessuna delle parole riservate,
vi guarderà in faccia con uno sguardo interrogativo finché non direte
una parola riservata. Ad esempio, se dite "Vorrei che più gente camminasse
di più per migliorare la propria salute generale", ma ciò che la maggior parte dei cani probabilmente sentirà "blah 
blah blah *cammina* blah blah blah blah." Questo perché
"cammina" è una parola riservata nel linguaggio del cane. In molti potrebbero suggerire che il
il linguaggio tra umani e gatti non abbia parole riservate^[<http://xkcd.com/231/>].

Le parole riservate nella lingua utilizzata dagli umani per comunicare con Python includono
le seguenti:

    and       del       global      not       with
    as        elif      if          or        yield
    assert    else      import      pass      
    break     except    in          raise
    class     finally   is          return
    continue  for       lambda      try
    def       from      nonlocal    while    

Cioè, a differenza di un cane, Python è già completamente addestrato. Quando
voi dite "prova", Python proverà ogni volta che lo dite senza fallire.

A tempo debito impareremo queste parole riservate ed il loro utilizzo,
ma per ora ci concentreremo sull'equivalente in Python di "comunicare" (in
linguaggio uomo-cane). Il bello di dire a Python di parlare è
che possiamo persino indicargli cosa dire dandogli un messaggio tra virgolette:

~~~~ {.python}
    print('Hello world!')
~~~~

Così abbiamo persino scritto la nostra prima frase Python sintatticamente corretta.
La nostra frase inizia con la funzione *print* 
seguito da una stringa di testo a nostra scelta racchiusa tra virgolette singole.
Le stringhe nelle istruzioni di stampa sono racchiuse tra le virgolette. Le virgolette
singole e le virgolette doppie fanno la stessa cosa; la maggior parte delle persone usa le virgolette singole
tranne in casi come questo in cui una virgoletta singola (che è anche un
apostrofo) appare nella stringa.

Conversare con Python
----------------------

Ora che conosciamo una parola e una frase semplice in Python, 
abbiamo bisogno di sapere come avviare una conversazione con Python per testare le nostre nuove
abilità linguistiche. 

Prima di poter dialogare con Python, dovete installare il software Python
sul vostro computer e imparare ad avviarlo.
Questo è troppo dettagliato per questo capitolo, quindi vi suggerisco di 
consultare [www.py4e.com] (http://www.py4e.com) dove ho indicato istruzioni dettagliate 
e screencast dell'installazione e dell'avvio di Python
su sistemi Macintosh e Windows. Ad un certo punto, vi troverete in un terminale
o una finestra di comando e dovrai digitare * python * e
l'interprete Python si avvierà in modalità interattiva e apparirà
bene o male come segue:

\index{modalità interattiva}

~~~~ {.python}
    Python 3.5.1 (v3.5.1:37a07cee5969, Dec  6 2015, 01:54:25)
    [MSC v.1900 64 bit (AMD64)] on win32
    Type "help", "copyright", "credits" or "license" for more information.
    >>>
~~~~

Il prompt `>>>` è il modo di chiedere dell'interprete Python
"Cosa vuoi che faccia dopo?"Python è pronto per 
conversare con voi. Tutto quello che dovete sapere è come parlare il linguaggio Python.


Diciamo, per esempio, che non conoscevate nemmeno le più semplici parole o frasi del linguaggio Python.
Potreste voler usare la linea guida
che usano gli astronauti quando atterrano su un pianeta lontano e cercano di parlare
con gli abitanti del pianeta:

~~~~ {.python}
    >>> I come in peace, please take me to your leader
      File "<stdin>", line 1
        I come in peace, please take me to your leader
             ^
    SyntaxError: invalid syntax
    >>>
~~~~

Non sta andando molto bene. A meno che non pensiate a qualcosa velocemente, gli
è probabile che gli abitanti del pianeta ti pugnalino con le loro lance, ti mettano
su uno spiedo, ti arrostiscano sopra un fuoco e ti mangino per cena.

Fortunatamente avete portato una copia di questo libro nel vostro viaggio e il vostro dito è fermo
in questa stessa pagina e riprovate:

~~~~ {.python}
    >>> print('Hello world!')
    Hello world!
~~~~

Questo è molto più bello, quindi provate a comunicare ancora:

~~~~ {.python}
    >>> print('You must be the legendary god that comes from the sky')
    You must be the legendary god that comes from the sky
    >>> print('We have been waiting for you for a long time')
    We have been waiting for you for a long time
    >>> print('Our legend says you will be very tasty with mustard')
    Our legend says you will be very tasty with mustard
    >>> print 'We will have a feast tonight unless you say
      File "<stdin>", line 1
        print 'We will have a feast tonight unless you say
                                                         ^
    SyntaxError: Missing parentheses in call to 'print'
    >>>
~~~~

La conversazione stava andando così bene per un po' e poi avete fatto
l'errore più piccolo che si possa fare usando il linguaggio Python e Python ha mostrato di nuovo le lance.


A questo punto, dovresti anche rendervi conto che mentre Python è incredibilmente
complesso, potente e schizzinoso sulla sintassi che usate per
comunicare con esso, Python * non * è intelligente. In realtà
state solo avendo una conversazione con voi stessi, ma usando una sintassi corretta.


In un certo senso, quando usate un programma scritto da qualcun altro
la conversazione è tra voi e gli altri sviluppatori con Python
ad agire come intermediario. Python è un modo per chi scrive codice
di esprimere come dovrebbe procedere la conversazione. E tra solo
pochi altri capitoli, sarete uno di quei programmatori che usano Python per
parlare agli utenti del vostro programma.

Prima di lasciare la nostra prima conversazione con l'interprete Python, voi
dovreste probabilmente conoscere il modo corretto per dire "ciao" quando interagite
con gli abitanti del pianeta Python:

~~~~ {.python}
    >>> good-bye
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    NameError: name 'good' is not defined
    >>> if you don't mind, I need to leave
      File "<stdin>", line 1
        if you don't mind, I need to leave
                 ^
    SyntaxError: invalid syntax
    >>> quit ()
~~~~

Noterete che l'errore è diverso per i primi due tentativi
errati. Il secondo errore è diverso perché * if * è una
parola riservata e Python vedendo la parola riservate pensava che stessimo
cercando di dire qualcosa sbagliando, però, la sintassi della frase.

Il modo corretto per dire "arrivederci" a Python è digitare
*quit()* al prompt interattivo `>>>` 
Probabilmente ti ci sarebbe voluto un po' per indovinare
ciò, quindi avere un libro a portata di mano probabilmente si rivelerà utile.

Terminologia: interprete e compilatore
-------------------------------------

Python è un *linguaggio di alto livello* destinato a essere
relativamente semplice da leggere e scrivere per gli umani
e da leggere ed elaborare per i computer. Altri linguaggi di alto livello sono Java,
C ++, PHP, Ruby, Basic, Perl, JavaScript e molti altri. L'attuale
l'hardware all'interno della Central Processing Unit (CPU) non comprende
nessuno di questi linguaggi di alto livello.

La CPU comprende un linguaggio che chiamiamo *linguaggio macchina*.
Il linguaggio macchina è molto semplice e francamente molto
noioso da scrivere perché è composto esclusivamente da zeri e uno:

~~~~
    001010001110100100101010000001111
    11100110000011101010010101101101
    ...
~~~~

Il linguaggio macchina a prima vista sembra abbastanza semplice, dato che ci sono
solo zeri e uno, ma la sua sintassi è molto più complessa e molto più
intricata di quella del Python. Pertanto pochissimi programmatori scrivono in linguaggio 
macchina. Invece costruiamo vari traduttori per consentire agli sviluppatori di
scrivere in linguaggi di alto livello come Python o JavaScript cosicché questi
traduttori convertano i programmi in linguaggio macchina per l'effettiva
esecuzione da parte della CPU.

Poiché il linguaggio macchina è legato all'hardware del computer, il linguaggio macchina
non è * trasferibile * tra diversi tipi di
hardware. I programmi scritti in lingue di alto livello possono essere spostati tra
computer diversi utilizzando un interprete diverso sulla nuova macchina
o ricompilando il codice per creare una versione in linguaggio macchina del
programma per la nuova macchina.

Questi traduttori del linguaggio di programmazione si dividono in due categorie generali:
(1) interpreti e (2) compilatori.

Un *interprete* legge il codice sorgente del programma così come è stato
scritto dal programmatore, analizza il codice sorgente e interpreta le
istruzioni al volo. Python è un interprete e quando lo stiamo
eseguendo Python in modo interattivo, possiamo digitare una riga di Python (una frase)
e Python la elabora immediatamente ed è pronto per farci digitare un'altra
riga di Python.

Alcune delle righe di Python dicono a Python che volete che ricordi
qualche valore per un secondo momento. Dobbiamo scegliere un nome per quel valore da
ricordare e possiamo usare quel nome simbolico per recuperare il valore
in un secondo momento. Usiamo il termine *variabile* per fare riferimento alle etichette
che usiamo per riferirci a questi dati memorizzati.

~~~~ {.python}
    >>> x = 6
    >>> print(x)
    6
    >>> y = x * 7
    >>> print(y)
    42
    >>>
~~~~

In questo esempio, chiediamo a Python di ricordare il valore 6 e di usare
l'etichetta *x* in modo da poter recuperare il valore più tardi. Verifichiamo
che Python abbia effettivamente ricordato il valore usando
*print*. Quindi chiediamo a Python di recuperare
*x* e moltiplicarlo per 7 e mettere il nuovo
valore calcolato in *y*. Quindi chiediamo a Python di stampare il valore
attualmente contenuto in *y*.

Anche se stiamo digitando questi comandi in Python una riga per volta,
Python li tratta come una sequenza ordinata di istruzioni con successive
istruzioni in grado di recuperare i dati creati durante precedenti istruzioni. Noi stiamo
scrivendo il nostro primo semplice paragrafo con quattro frasi in un ordine logico e
significativo.

È nella natura di un *interprete* l'essere in grado di avere
una conversazione interattiva come mostrato sopra. Un *compilatore*
necessita di avere l'intero codice prima di avviare il processo
di traduzione del codice sorgente di alto livello in linguaggio macchina
e quindi il compilatore inserisce il linguaggio macchina risultante in un file
per la successiva esecuzione.

Se disponete di un sistema Windows, spesso questi eseguibili in linguaggio macchina
hanno un suffisso ".exe" o ".dll" che indica rispettivamente "eseguibile"
e libreria DLL. In Linux e Macintosh,
non è non esiste un suffisso che in modo univoco contrassegna un file come eseguibile.

Se doveste aprire un file eseguibile con un editor di testo, il contenuto vi sembrerà 
completamente folle ed illeggibile:

~~~~
    ^?ELF^A^A^A^@^@^@^@^@^@^@^@^@^B^@^C^@^A^@^@^@\xa0\x82
    ^D^H4^@^@^@\x90^]^@^@^@^@^@^@4^@ ^@^G^@(^@$^@!^@^F^@
    ^@^@4^@^@^@4\x80^D^H4\x80^D^H\xe0^@^@^@\xe0^@^@^@^E
    ^@^@^@^D^@^@^@^C^@^@^@^T^A^@^@^T\x81^D^H^T\x81^D^H^S
    ^@^@^@^S^@^@^@^D^@^@^@^A^@^@^@^A\^D^HQVhT\x83^D^H\xe8
    ....
~~~~

Non è semplcie leggere o scrivere il linguaggio macchina, quindi è bello che 
si possa disporre di *interpreti* e *compilatori* che
permettano di scrivere in linguaggi di alto livello come Python o C.

Ora, a questo punto della nostra discussione di compilatori e interpreti, vi
starate chiedendo qualcosa sull'interprete stesso di Python. in che 
linguaggio è stato scritto? È scritto in un linguaggio compilato? Quando 
digitiamo "Python", cosa succede esattamente?

L'interprete di Python è scritto in un linguaggio di alto livello chiamato "C".
Potete dare un'occhiata all'attuale codice sorgente dell'interprete di Python andando nel sito
[www.python.org] (http://www.python.org) e facendovi strada fino al 
codice sorgente. Quindi Python è esso stesso un programma ed é stato compilato
in linguaggio macchina. Quando avete installato Python nel vostro computer (o se é stato installato
venditore), avete copiato una copia in linguaggio macchina del programma Python tradotto per il
vostro sistema. In Windows, il linguaggio macchina eseguibile per
lo stesso Python è probabilmente in un file con un nome simile a:

~~~~
    C:\Python35\python.exe
~~~~

Questo è più di quanto voi abbiate davvero bisogno di sapere per essere un programmatore Python, ma
a volte paga rispondere subito a quelle piccole domande
fastidiose.

Scrivere un programma
-----------------

Digitare comandi nell'interprete di Python è un ottimo modo per sperimentare
con le funzionalità di Python, ma non è consigliato per risolvere i
problemi più complessi.

Quando vogliamo scrivere un programma, possiamo utilizzare un editor di testo per scrivere le
Istruzioni Python in un file, chiamato 
*script*. Per convenzione, gli script Python hanno nomi che
terminano con l'estensione `.py`.

\index{script}

Per eseguire uno script, dovete dire all'interprete Python il nome
del file. In una finestra di comando di Unix o Windows, dovete digitare
`python hello.py` come nel seguente esempio:

~~~~ {.bash}
    csev$ cat hello.py
    print('Hello world!')
    csev$ python hello.py
    Hello world!
    csev$
~~~~

Il "csev\$" è il prompt del sistema operativo e "cat hello.py"
mostra che il file "hello.py" ha una riga di programma Python per 
stampare una stringa.

se avviamo l'interprete di Python e gli diciamo di leggere il codice sorgente dal
file "hello.py" invece di chiederci di leggere linee dil codice Python
in modo interattivo.

Noterai che non era necessario avere * quit () *
alla fine del programma Python nel file. Quando Python sta leggendo
il tuo codice sorgente da un file, sa di fermarsi quando raggiunge la fine
del file.

Cos'è un programma?
------------------

La definizione di un * programma * nella sua forma più basilare è a
sequenza di istruzioni Python create per fare qualcosa.
Anche il nostro semplice script * hello.py * è un programma. È un
programma a una riga e non è particolarmente utile, ma nel modo più rigoroso
definizione, è un programma Python.

Potrebbe essere più facile capire cosa sia un programma pensando a a
problema che un programma potrebbe essere costruito per risolvere e quindi guardare a
programma che risolverebbe questo problema.

Diciamo che stai facendo ricerche di Social Computing su post di Facebook e
ti interessa la parola più frequentemente usata in una serie di
post. Potresti stampare il flusso dei post di Facebook e andare oltre
il testo che cerca la parola più comune, ma ciò richiederebbe molto tempo
tempo ed essere molto inclini agli errori. Saresti intelligente a scrivere un Python
programma per gestire l'attività in modo rapido e preciso in modo da poter spendere il
fine settimana facendo qualcosa di divertente.

Ad esempio, guarda il seguente testo su un clown e una macchina. Guarda a
il testo e capire la parola più comune e quante volte
si verifica.

~~~~
    the clown ran after the car and the car ran into the tent
    and the tent fell down on the clown and the car
~~~~

Quindi immagina di svolgere questo compito guardando milioni di righe
di testo. Francamente sarebbe più veloce per te imparare Python e scrivere a
Programma Python per contare le parole di quanto non sarebbe per la scansione manuale del
parole.

La notizia ancora migliore è che ho già creato un semplice programma per
trova la parola più comune in un file di testo. L'ho scritto, testato e ora
Ti sto dando da usare per poter risparmiare un po 'di tempo.

\VerbatimInput{../code3/words.py}
\begin{trinketfiles}
../code3/words.txt
\end{trinketfiles}

Non hai nemmeno bisogno di sapere Python per utilizzare questo programma. Avrai bisogno di
passa attraverso il capitolo 10 di questo libro per comprendere appieno il fantastico
Tecniche Python utilizzate per realizzare il programma. Tu sei la fine
utente, semplicemente usi il programma e ti stupisci della sua intelligenza e di come
ti ho risparmiato così tanto sforzo manuale. Basta digitare il codice in un file
chiamato * words.py * ed eseguirlo o scaricare la fonte
codice da <http://www.py4e.com/code3/> ed eseguirlo.

\index{programma}

Questo è un buon esempio di come agiscono Python e il linguaggio Python
come intermediario tra te (l'utente finale) e me (il programmatore).
Python è un modo per scambiare utili sequenze di istruzioni (es.
programmi) in un linguaggio comune che può essere utilizzato da chiunque lo installi
Python sul loro computer. Quindi nessuno di noi parla * a
Python *, invece comunichiamo tra loro
* attraverso * Python.

I blocchi costitutivi dei programmi
-------------------------------

Nei prossimi capitoli, impareremo di più sul vocabolario,
struttura della frase, struttura dei paragrafi e struttura della storia di Python.
Impareremo a conoscere le potenti funzionalità di Python e come
comporre queste capacità insieme per creare programmi utili.

Ci sono alcuni modelli concettuali di basso livello che usiamo per costruire
programmi. Questi costrutti non sono solo per programmi Python, lo sono
parte di ogni linguaggio di programmazione dal linguaggio macchina fino al
lingue di alto livello.

input
: Ottieni dati dal "mondo esterno". Questo potrebbe essere la lettura di dati da a
    file, o anche qualche tipo di sensore come un microfono o un GPS. Nel nostro
    programmi iniziali, il nostro input verrà generato dall'utente digitando i dati
    la tastiera.

output
: Visualizza i risultati del programma su uno schermo o li memorizza in a
    file o magari scriverli su un dispositivo come un altoparlante per riprodurre musica
    o parlare di testo.

esecuzione sequenziale
: Esegui dichiarazioni una dopo l'altra nell'ordine in cui si trovano
    incontrato nella sceneggiatura.

esecuzione condizionale
: Verifica alcune condizioni e poi esegui o salta una sequenza di
    dichiarazioni.

esecuzione ripetuta
: Esegui ripetutamente alcune istruzioni, di solito con alcune
    variazione.

riutilizzo
: Scrivi una serie di istruzioni una volta e dai loro un nome e poi riutilizzalo
    quelle istruzioni necessarie durante il tuo programma.

Sembra quasi troppo semplice per essere vero, e ovviamente non è mai così
semplice. È come dire che camminare è semplicemente "mettere un piede dentro"
davanti all'altro ". L '"arte" di scrivere un programma è composta e
tessendo insieme questi elementi di base molte volte per produrre
qualcosa che è utile ai suoi utenti.

Il programma di conteggio delle parole sopra utilizza direttamente tutti questi modelli
tranne uno.

Che cosa potrebbe andare storto?
-----------------------------

Come abbiamo visto nelle nostre prime conversazioni con Python, dobbiamo comunicare
molto precisamente quando scriviamo il codice Python. La più piccola deviazione o
errore farà sì che Python smetta di guardare al tuo programma.

I programmatori principianti spesso prendono il fatto che Python non lascia spazio
errori come prova che Python è cattivo, odioso e crudele. Mentre Python
sembra piacere a tutti gli altri, Python li conosce personalmente e ne detiene uno
rancore verso di loro. A causa di questo rancore, Python prende il nostro perfettamente
programmi scritti e li respinge come "inadatti" solo per tormentarci.

~~~~ {.python}
    >>> primt 'Hello world!'
      File "<stdin>", line 1
        primt 'Hello world!'
                           ^
    SyntaxError: invalid syntax
    >>> primt ('Hello world')
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    NameError: name 'primt' is not defined
    
    >>> I hate you Python!
      File "<stdin>", line 1
        I hate you Python!
             ^
    SyntaxError: invalid syntax
    >>> if you come out of there, I would teach you a lesson
      File "<stdin>", line 1
        if you come out of there, I would teach you a lesson
                  ^
    SyntaxError: invalid syntax
    >>>
~~~~

C'è poco da guadagnare discutendo con Python. È solo uno strumento.
Non ha emozioni ed è felice e pronto a servirti ogni volta che tu
bisogno di essa. I suoi messaggi di errore sono aspri, ma sono solo la chiamata di Python
per un aiuto. Ha esaminato ciò che hai digitato e semplicemente non può
capire cosa hai inserito

Python è molto più simile a un cane, amandoti incondizionatamente, avendo pochi
parole chiave che capisce, guardandoti con un'espressione dolce in volto
(`>>>`), e aspettando che tu dica qualcosa
capisce. Quando Python dice "SyntaxError: invalid syntax", lo è
semplicemente scodinzolando e dicendo, "Sembravi dire qualcosa ma io
solo non capisco cosa volevi dire, ma per favore continua a parlarmi
( `` >>>)."

Come i tuoi programmi diventano sempre più sofisticati, lo incontrerai
tre tipi generali di errori:

Errori di sintassi
: Questi sono i primi errori che farai e il più facile da correggere. UN
    errore di sintassi significa che hai violato le regole di "grammatica" di
    Pitone. Python fa del suo meglio per puntare direttamente alla linea e
    personaggio in cui ha notato che era confuso. L'unico trucco di
    errori di sintassi è che a volte l'errore che deve essere risolto è
    in realtà in precedenza nel programma rispetto a Python
    * notato * era confuso. Quindi la linea e il carattere
    che Python indichi in un errore di sintassi potrebbe essere solo un punto di partenza
    per la tua indagine

Errori logici
: Un errore logico è quando il tuo programma ha una buona sintassi ma c'è un
    errore nell'ordine delle affermazioni o forse un errore nel come
    le dichiarazioni si riferiscono l'una all'altra. Un buon esempio di logica
    errore potrebbe essere, "prendere un drink dalla tua bottiglia d'acqua, metterlo nel tuo
    zaino, cammina fino alla biblioteca e poi rimetti la parte superiore
    bottiglia."

Errori semantici
: Un errore semantico è quando la descrizione dei passaggi da eseguire è
    sintatticamente perfetto e nel giusto ordine, ma c'è semplicemente a
    errore nel programma. Il programma è perfettamente corretto ma lo fa
    non fare ciò che * intendi * per fare. Un semplice
    esempio sarebbe se tu dessi una persona a un indirizzo
    ristorante e ha detto, "... quando si raggiunge l'incrocio con il
    stazione di benzina, girare a sinistra e andare a 1,6 km e il ristorante è un rosso
    costruendo alla tua sinistra. "Il tuo amico è molto in ritardo e ti chiama
    ti dico che sono in una fattoria e camminano dietro un granaio,
    senza alcun segno di un ristorante. Quindi dici "hai girato a sinistra o
    proprio alla stazione di servizio?"e dicono:" Ho seguito le tue indicazioni
    perfettamente, li ho annotati, dice girare a sinistra e andare uno
    miglio al distributore di benzina. "Allora tu dici:" Mi dispiace molto, perché
    mentre le mie istruzioni erano sintatticamente corrette, loro purtroppo
    conteneva un errore semantico piccolo ma non rilevato ".

Di nuovo in tutti e tre i tipi di errori, Python sta semplicemente provando il più difficile
fare esattamente quello che hai chiesto.

Il viaggio di apprendimento
--------------------

Mentre avanzi nel resto del libro, non aver paura se il
i concetti non sembrano adattarsi bene la prima volta. Quando eri
imparare a parlare, non è stato un problema per i tuoi primi anni
hai appena fatto dei dolci gorgoglii. Ed era OK se ci sono voluti sei mesi
per voi di passare dal semplice vocabolario alle frasi semplici e ha preso 5-6
più anni per passare da frasi a paragrafi e ancora qualche anno
essere in grado di scrivere un interessante racconto completo per conto tuo.

Vogliamo che tu impari Python molto più rapidamente, quindi insegniamo tutto a
stesso tempo nei prossimi capitoli. Ma è come imparare un nuovo
linguaggio che richiede tempo per assorbire e capire prima che si senta
naturale. Ciò porta ad una certa confusione mentre visitiamo e rivisitiamo argomenti
prova a farti vedere il quadro generale mentre definiamo il piccolo
frammenti che compongono questo quadro generale. Mentre il libro è scritto
linearmente, e se stai seguendo un corso, progredirà in modo lineare
moda, non esitare ad essere molto non-lineare nel modo in cui ti avvicini al
Materiale. Guarda avanti e indietro e leggi con un tocco leggero. Di
sfogliare materiale più avanzato senza comprendere appieno i dettagli,
puoi capire meglio il "perché?"di programmazione. Di
rivedendo il materiale precedente e anche rifacendo gli esercizi precedenti, lo farai
renditi conto che in realtà hai imparato molto materiale anche se il materiale
al momento stai fissando sembra un po 'impenetrabile.

Di solito quando stai imparando il tuo primo linguaggio di programmazione, ci sono
alcuni meravigliosi "Ah Ah!"Momenti in cui puoi guardare dal martellante
via a qualche roccia con un martello e uno scalpello e passi e vedi quello
stai davvero costruendo una bellissima scultura.

Se qualcosa sembra particolarmente difficile, di solito non ha valore
stare sveglio tutta la notte e fissarlo. Fare una pausa, fare un pisolino, avere un
spuntino, spiega a qualcuno cosa stai avendo un problema (o forse
il tuo cane), e poi tornare ad esso con occhi nuovi. Te lo assicuro
una volta che apprendi i concetti di programmazione nel libro, guarderai indietro
e vedi che è stato tutto molto semplice ed elegante e ti ha semplicemente portato a
un po 'di tempo per assorbirlo.

Glossario
--------

bug
: Un errore in un programma.
\index{bug}

central processing unit
: Il cuore di qualsiasi computer È ciò che gestisce il software che noi
    Scrivi; chiamato anche "CPU" o "processore".
\index{central processing unit}
\index{CPU}

compilare
: Tradurre un programma scritto in un linguaggio di alto livello in a
    linguaggio di basso livello tutto in una volta, in preparazione per l'esecuzione successiva.
\index{compilare}

linguaggio di alto livello
: Un linguaggio di programmazione come Python progettato per essere facile
    gli umani a leggere e scrivere.
\index{linguaggio di alto livello}

modalità interattiva
: Un modo di usare l'interprete Python digitando comandi e
    espressioni al prompt.
\index{modalità interattiva}

interpret
: Per eseguire un programma in un linguaggio di alto livello traducendolo
    linea alla volta.
\index{interpret}

linguaggio di basso livello
: Un linguaggio di programmazione progettato per essere facile per un computer
    eseguire; chiamato anche "codice macchina" o "linguaggio assembly".
\index{linguaggio di basso livello}

codice macchina
: Il linguaggio di livello più basso per il software, che è il linguaggio
    viene eseguito direttamente dall'unità di elaborazione centrale (CPU).
\index{codice macchina}

memoria principale
: Memorizza programmi e dati. La memoria principale perde le sue informazioni quando il
    l'alimentazione è spenta.
\index{memoria principale}

parse
: Esaminare un programma e analizzare la struttura sintattica.
\index{parse}

portabilità
: Una proprietà di un programma che può essere eseguito su più di un tipo di
    computer.
\index{portabilità}

funzione di stampa
: Un'istruzione che fa in modo che l'interprete Python visualizzi un valore
    sullo schermo.
\index{funzione di stampa}
\index{function!print}

risoluzione dei problemi
: Il processo di formulazione di un problema, ricerca di una soluzione, e
    esprimendo la soluzione.
\index{risoluzione dei problemi}

programma
: Un set di istruzioni che specifica un calcolo.
\index{programma}

prompt
: Quando un programma visualizza un messaggio e si interrompe affinché l'utente possa digitare
    qualche input per il programma.
\index{prompt}

memoria secondaria
: Memorizza programmi e dati e conserva le informazioni anche quando
    l'alimentazione è spenta. Generalmente più lento della memoria principale. Esempi di
    la memoria secondaria include le unità disco e la memoria flash nelle chiavette USB.
\index{memoria secondaria}

semantica
: Il significato di un programma.
\index{semantica}

errore semantico
: Un errore in un programma che lo fa fare qualcosa di diverso da quello
    programmatore inteso.
\index{errore semantico}

codice sorgente
: Un programma in un linguaggio di alto livello.
\index{codice sorgente}

Esercizi
---------

** Esercizio 1: qual è la funzione della memoria secondaria in un computer?**

a\) Execute all of the computation and logic of the program\
b) Retrieve web pages over the Internet\
c) Conservare le informazioni a lungo termine, anche oltre il ciclo di accensione \
d) Accetta input dall'utente

** Esercizio 2: che cos'è un programma?**

** Esercizio 3: Qual è la differenza tra un compilatore e un
interprete?**

** Esercizio 4: Quale delle seguenti contiene "codice macchina"?**

a \) L'interprete Python \
b) La tastiera \
c) File sorgente Python \
d) Un documento di elaborazione di testi

** Esercizio 5: Cosa c'è di sbagliato con il seguente codice: **

~~~~ {.python}
    >>> primt 'Hello world!'
      File "<stdin>", line 1
        primt 'Hello world!'
                           ^
    SyntaxError: invalid syntax
    >>>
~~~~

** Esercizio 6: dove nel computer è una variabile come "x" memorizzata dopo
la seguente linea Python termina?**

~~~~ {.python}
    x = 123
~~~~

a) Unità di elaborazione centrale
b) Memoria principale \
c) Memoria secondaria \
d) Dispositivi di input \
e) Dispositivi di uscita

** Esercizio 7: quale sarà il seguente programma stampato: **

~~~~ {.python}
    x = 43
    x = x + 1
    print(x)
~~~~

a \) 43 \
b) 44 \
c) x + 1 \
d) Errore perché x = x + 1 non è possibile matematicamente

** Esercizio 8: Spiega ognuno dei seguenti esempi usando un esempio di umano
capacità: (1) unità centrale di elaborazione, (2) memoria principale, (3) secondaria
Memoria, (4) Dispositivo di input e (5) Dispositivo di uscita. Ad esempio, "Cos'è
l'equivalente umano di un'unità di elaborazione centrale "?**

** Esercizio 9: come si risolve un "Errore di sintassi"?**
